
==================== FINAL INTERFACE ====================
2017-04-26 15:37:11.374867 UTC

interface Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert [hpc] 8002
  interface hash: 040eea8aca38fa138a0e0612226ed9ba
  ABI hash: 6791facdd1c2eb021215370a1953aa07
  export-list hash: e6325587f2d49d1f5f5691a1203b103e
  orphan hash: 749525ca905ad7f5fad3c7f8e529189d
  flag hash: 566c261facb1547c57528108f6948d9c
  sig of: Nothing
  used TH splices: False
  where
exports:
  Evolverbetert.chEnv
  Evolverbetert.compilerOpts
  Evolverbetert.initialize
  Evolverbetert.isAgentSeed
  Evolverbetert.isGraphics
  Evolverbetert.isHelp
  Evolverbetert.isOutputFile
  Evolverbetert.isWorldSeed
  Evolverbetert.main
  Evolverbetert.mainLoop
  Evolverbetert.newAssoc
  Evolverbetert.newWorld
  Evolverbetert.options
  Evolverbetert.outputString
  Evolverbetert.reproduceAgent
  Evolverbetert.Flag{Evolverbetert.AgentSeed Evolverbetert.Graphics Evolverbetert.Help Evolverbetert.OutputFile Evolverbetert.WorldSeed}
module dependencies: Misc Mutations MyGraphics MyRandom Parameters
                     Types World
package dependencies: GLURaw-2.0.0.3@GLURaw-2.0.0.3-G12M6COyQIU5WfRlrIwPuj
                      GLUT-2.7.0.11@GLUT-2.7.0.11-IP0PzJz4wI8KYXyKTnttpl
                      MonadRandom-0.5.1@MonadRandom-0.5.1-IY6HiWu00vQLARukQW3KMH
                      ObjectName-1.1.0.1@ObjectName-1.1.0.1-EiFOWjUQWWuLyOhtrmuIWX
                      OpenGL-3.0.1.0@OpenGL-3.0.1.0-BckrJgI63aX3I0VRJxU6fY
                      OpenGLRaw-3.2.4.0@OpenGLRaw-3.2.4.0-JDyGgOXR61GG549SwmWm2Q
                      StateVar-1.1.0.4@StateVar-1.1.0.4-5dJbnTVECtEAhfJXPZKdbO
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      fixed-0.2.1.1@fixed-0.2.1.1-8Jr82l0kss5Gr4nEevmXlZ ghc-prim-0.5.0.0
                      half-0.2.2.3@half-0.2.2.3-GHJ372Ls7FBA3PAGtGHfOR
                      integer-gmp-1.0.0.1
                      mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV
                      monad-parallel-0.7.2.2@monad-parallel-0.7.2.2-DgGZ1OYT6KM5SKZdJnC6sE
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      parallel-3.2.1.0@parallel-3.2.1.0-CNlrARikHUx7Z7NHwpxRS3
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      random-shuffle-0.0.4@random-shuffle-0.0.4-97h14tPp7Ru21125sv6IMi
                      split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:MyRandom
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: MonadRandom-0.5.1@MonadRandom-0.5.1-IY6HiWu00vQLARukQW3KMH:Control.Monad.Trans.Random.Lazy
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity base-4.9.1.0:Data.List.NonEmpty
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Semigroup
                         base-4.9.1.0:Data.Type.Equality base-4.9.1.0:Data.Version
                         base-4.9.1.0:Data.Void base-4.9.1.0:GHC.Exts
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
import  -/  Misc 7c0846d5151aa3976be221f5a46a4e97
  exports: fb044bf498acb33549eb7c51f9d2b907
  maybeCh 892171fb445e407e3e08b7538686fede
  moore8 341232d9428eb6d95fb3aa3c0729b480
import  -/  Mutations f7b0935d934dc62dbc7720748f1261b7
  exports: 0d52d2629401434cfd136feaa7df8e4a
  mutAg 00cc57d82ac81d579b56993d0a35caa5
import  -/  MyGraphics 3228ef6b30ec453dd37a0405d1136d62
  exports: 1534e1da062b73bef3ea9e58a9bab50f
  showWorld ef775087e6c7f8d30861a5eba58529ae
import  -/  MyRandom 182c41d4defde8d08f518d29f4df558c
  exports: 6a3b246076d887accae198004a7f70d6
  Rand 86a475c1a4a2e3e28a826bd2f49fdf44
  evalRand e29eac6b5b7707fe696f4521f1af5d3f
  getDouble bad88a8c20ffa90c2054a378b8a71658
  getMyStdGen 944347f6e9c4a64288dd8ceb7fad3bc5
  getRange b6a172676204c07d07f0c812ec9d92a0
  pureMT a7de9331d25951a5891358793a596583
  runRand 6676e125417c83d240614a7aa5731954
  setMyStdGen 5e42753b459691eee5fd0176de30b922
import  -/  Parameters 934216b463092aab34aa8d6da02a0ffd
  exports: 2da6637e19561a3c84dac8b2f8e0f38b
  Time 879d5e19ebb9bc15f9454477e91cb426
  deathRate 8b59f674614afdd22b4978284c047604
  display f6bb7253bfe841fedb1a6a5e54bbfa01
  envSwitchProb 387179cebdf5761f93fa9c1ff2f673ab
  height 610d1ee7055745e8bd88aa61ba7d6a54
  maxTime b188f11758672aa4d0ecfc71bab95fbf
  nrEnv 755eb24c4bae29c8b70bf6a06c78f7e2
  outputTime 5fa4d21a7e2f012d3c98159ce1b72516
  selectionPressure 3a4e156cebc4f7f298f6485df3b5fe62
  width 9537722c1d52c4a43542c71e46733379
  worldBounds 191cdc5f8944c926ba079db28e7e0cb2
  worldCoods 587feddc3cdc81ca0dfba78e4563d316
import  -/  Types 067da2fa0f710839b88e4fd1e1eded28
  exports: 6ec82bea59d093b10ad3149623a0d676
  Agent 96dc13c40ccb216e8863ab97a7d41886
  Env 86d083c95cb440c346ac68b02f16b953
  NoAgent b7d8cf22e526c1e2e90e11821c8dcfa9
  World b2d7886f021b3414ee0076dcba9f10fa
  World 9bb6c372a29952d09ae59d711db1b0d5
  agents 34556f25827dc09841286d6755a9a58a
  env 1a5c7eff54975831b312c30e0bb11a49
  genome c7f64df2f2e325af4eb8c6c54f1a9035
import  -/  World 0b7434b437e15c97cb605d374fd57909
  exports: 3dfc99342d1991a0fe3b35f33fb08559
  devAg abaaa2a146842e852bc6ee3395a01b27
  fitnessAgent e652eeda2193af33a2739266ffa43434
  hammDistAg 108f2f71851dc5c092430e5173bc6de9
  randomAgent 60290e210a80a1632f6ff2d9ef5999c0
import  -/  GLUT-2.7.0.11@GLUT-2.7.0.11-IP0PzJz4wI8KYXyKTnttpl:Graphics.UI.GLUT 850ab735296960c40e0ec36d1d65a5d9
import  -/  GLUT-2.7.0.11@GLUT-2.7.0.11-IP0PzJz4wI8KYXyKTnttpl:Graphics.UI.GLUT.Begin ea032cc762fd34fa2e97608364fc14de
import  -/  GLUT-2.7.0.11@GLUT-2.7.0.11-IP0PzJz4wI8KYXyKTnttpl:Graphics.UI.GLUT.Callbacks.Window 321354f4387a2887f3a304683c1e29a0
import  -/  GLUT-2.7.0.11@GLUT-2.7.0.11-IP0PzJz4wI8KYXyKTnttpl:Graphics.UI.GLUT.Initialization 0838e50fd395fdbc2ecd45c020f218dc
import  -/  GLUT-2.7.0.11@GLUT-2.7.0.11-IP0PzJz4wI8KYXyKTnttpl:Graphics.UI.GLUT.State 6a2eaa2a2a972f0cd9cffc605f52dd60
import  -/  GLUT-2.7.0.11@GLUT-2.7.0.11-IP0PzJz4wI8KYXyKTnttpl:Graphics.UI.GLUT.Window c0c33dab0c4292a9b574db790dffba70
import  -/  OpenGL-3.0.1.0@OpenGL-3.0.1.0-BckrJgI63aX3I0VRJxU6fY:Graphics.Rendering.OpenGL.GL.CoordTrans 5948b50aa525e51a4531760dc565526f
import  -/  OpenGL-3.0.1.0@OpenGL-3.0.1.0-BckrJgI63aX3I0VRJxU6fY:Graphics.Rendering.OpenGL.GLU.Matrix f5145f497fe9bfee46a07aba022e9115
import  -/  StateVar-1.1.0.4@StateVar-1.1.0.4-5dJbnTVECtEAhfJXPZKdbO:Data.StateVar 3de57f021c56fd7e96dd85041f9d518e
import  -/  array-0.5.1.1@array-0.5.1.1:Data.Array.Base a1a813de21dd195f39f7a053a2142a3f
import  -/  array-0.5.1.1@array-0.5.1.1:Data.Array.IArray 606f8bb830eb2a88c29c91f27c77f304
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Fixed b80105ba94244c515fc7e741d2a7c501
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Function 7aca86bfbd92366def5f260e30cb2628
import  -/  base-4.9.1.0:Data.IORef 71c87b0b25a8bca3e3f4497725f5e543
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.String b34df69c7b6358cd40a379c8a0a78dcf
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.IO.Exception 5064be4c355632a1d1c4f2322f56ac52
import  -/  base-4.9.1.0:GHC.IO.Handle ba98a5b34d78cbf48b41fe58a3735c69
import  -/  base-4.9.1.0:GHC.IO.Handle.FD dbf0d0d4f42ab1465129a88ccf7880ff
import  -/  base-4.9.1.0:GHC.IO.Handle.Types 17aa0e2ab137800e3a31992d780c071f
import  -/  base-4.9.1.0:GHC.IO.IOMode 2f5782f93b12a0d860d6d661b9fb405c
import  -/  base-4.9.1.0:GHC.IORef 306bd532f2f3b000347cbe6316adc20e
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.Console.GetOpt cc31faf101a3ac67abb428b865bee7a2
import  -/  base-4.9.1.0:System.Environment 08cb808e8e6a7821e6f8cfa76a977431
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Char8 96177e283aa937da818ab1abb69421ca
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 20d4ffbee41965d03d6a989425473dc4
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  monad-parallel-0.7.2.2@monad-parallel-0.7.2.2-DgGZ1OYT6KM5SKZdJnC6sE:Control.Monad.Parallel 7ccf06726296cb7ccc244e31a651063e
import  -/  split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split c60198a427bfd51d9fb4562c059ec1d2
656a0687a0245244890624960e584e85
  $fEqFlag :: GHC.Classes.Eq Evolverbetert.Flag
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Evolverbetert.Flag
                  Evolverbetert.$fEqFlag_$c==
                  Evolverbetert.$fEqFlag_$c/= -}
656a0687a0245244890624960e584e85
  $fEqFlag_$c/= ::
    Evolverbetert.Flag -> Evolverbetert.Flag -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Evolverbetert.Flag) (b :: Evolverbetert.Flag) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert./=} True True} case Evolverbetert.$fEqFlag_$c==
                                                                                                          a
                                                                                                          b of wild {
                                                                                                     GHC.Types.False
                                                                                                     -> GHC.Types.True
                                                                                                     GHC.Types.True
                                                                                                     -> GHC.Types.False }) -}
656a0687a0245244890624960e584e85
  $fEqFlag_$c== ::
    Evolverbetert.Flag -> Evolverbetert.Flag -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Evolverbetert.Flag)
                   (ds1 :: Evolverbetert.Flag) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.==} True True} case ds of wild {
                                                                                                     Evolverbetert.Help
                                                                                                     -> case ds1 of wild1 {
                                                                                                          DEFAULT
                                                                                                          -> GHC.Types.False
                                                                                                          Evolverbetert.Help
                                                                                                          -> GHC.Types.True }
                                                                                                     Evolverbetert.OutputFile a1
                                                                                                     -> case ds1 of wild1 {
                                                                                                          DEFAULT
                                                                                                          -> GHC.Types.False
                                                                                                          Evolverbetert.OutputFile b1
                                                                                                          -> GHC.Base.eqString
                                                                                                               a1
                                                                                                               b1 }
                                                                                                     Evolverbetert.WorldSeed a1
                                                                                                     -> case ds1 of wild1 {
                                                                                                          DEFAULT
                                                                                                          -> GHC.Types.False
                                                                                                          Evolverbetert.WorldSeed b1
                                                                                                          -> GHC.Base.eqString
                                                                                                               a1
                                                                                                               b1 }
                                                                                                     Evolverbetert.AgentSeed a1
                                                                                                     -> case ds1 of wild1 {
                                                                                                          DEFAULT
                                                                                                          -> GHC.Types.False
                                                                                                          Evolverbetert.AgentSeed b1
                                                                                                          -> GHC.Base.eqString
                                                                                                               a1
                                                                                                               b1 }
                                                                                                     Evolverbetert.Graphics
                                                                                                     -> case ds1 of wild1 {
                                                                                                          DEFAULT
                                                                                                          -> GHC.Types.False
                                                                                                          Evolverbetert.Graphics
                                                                                                          -> GHC.Types.True } }) -}
656a0687a0245244890624960e584e85
  $fOrdFlag :: GHC.Classes.Ord Evolverbetert.Flag
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Evolverbetert.Flag
                  Evolverbetert.$fEqFlag
                  Evolverbetert.$fOrdFlag_$ccompare
                  Evolverbetert.$fOrdFlag_$c<
                  Evolverbetert.$fOrdFlag_$c<=
                  Evolverbetert.$fOrdFlag_$c>
                  Evolverbetert.$fOrdFlag_$c>=
                  Evolverbetert.$fOrdFlag_$cmax
                  Evolverbetert.$fOrdFlag_$cmin -}
656a0687a0245244890624960e584e85
  $fOrdFlag_$c< ::
    Evolverbetert.Flag -> Evolverbetert.Flag -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Evolverbetert.Flag) (y :: Evolverbetert.Flag) ->
                 case Evolverbetert.$fOrdFlag_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
656a0687a0245244890624960e584e85
  $fOrdFlag_$c<= ::
    Evolverbetert.Flag -> Evolverbetert.Flag -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Evolverbetert.Flag) (y :: Evolverbetert.Flag) ->
                 case Evolverbetert.$fOrdFlag_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
656a0687a0245244890624960e584e85
  $fOrdFlag_$c> ::
    Evolverbetert.Flag -> Evolverbetert.Flag -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Evolverbetert.Flag) (y :: Evolverbetert.Flag) ->
                 case Evolverbetert.$fOrdFlag_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
656a0687a0245244890624960e584e85
  $fOrdFlag_$c>= ::
    Evolverbetert.Flag -> Evolverbetert.Flag -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Evolverbetert.Flag) (y :: Evolverbetert.Flag) ->
                 case Evolverbetert.$fOrdFlag_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
656a0687a0245244890624960e584e85
  $fOrdFlag_$ccompare ::
    Evolverbetert.Flag -> Evolverbetert.Flag -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Evolverbetert.Flag)
                   (b :: Evolverbetert.Flag) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.compare} True True} case a of wild {
                                                                                                          Evolverbetert.Help
                                                                                                          -> case b of wild1 {
                                                                                                               DEFAULT
                                                                                                               -> GHC.Types.LT
                                                                                                               Evolverbetert.Help
                                                                                                               -> GHC.Types.EQ }
                                                                                                          Evolverbetert.OutputFile a1
                                                                                                          -> case b of wild1 {
                                                                                                               DEFAULT
                                                                                                               -> GHC.Types.LT
                                                                                                               Evolverbetert.Help
                                                                                                               -> GHC.Types.GT
                                                                                                               Evolverbetert.OutputFile b1
                                                                                                               -> GHC.Classes.$fOrd[]_$s$ccompare1
                                                                                                                    a1
                                                                                                                    b1 }
                                                                                                          Evolverbetert.WorldSeed a1
                                                                                                          -> case b of wild1 {
                                                                                                               DEFAULT
                                                                                                               -> GHC.Types.GT
                                                                                                               Evolverbetert.WorldSeed ds
                                                                                                               -> GHC.Classes.$fOrd[]_$s$ccompare1
                                                                                                                    a1
                                                                                                                    ds
                                                                                                               Evolverbetert.AgentSeed ds
                                                                                                               -> GHC.Types.LT
                                                                                                               Evolverbetert.Graphics
                                                                                                               -> GHC.Types.LT }
                                                                                                          Evolverbetert.AgentSeed a1
                                                                                                          -> case b of wild1 {
                                                                                                               DEFAULT
                                                                                                               -> GHC.Types.GT
                                                                                                               Evolverbetert.AgentSeed b1
                                                                                                               -> GHC.Classes.$fOrd[]_$s$ccompare1
                                                                                                                    a1
                                                                                                                    b1
                                                                                                               Evolverbetert.Graphics
                                                                                                               -> GHC.Types.LT }
                                                                                                          Evolverbetert.Graphics
                                                                                                          -> case b of wild1 {
                                                                                                               DEFAULT
                                                                                                               -> GHC.Types.GT
                                                                                                               Evolverbetert.Graphics
                                                                                                               -> GHC.Types.EQ } }) -}
656a0687a0245244890624960e584e85
  $fOrdFlag_$cmax ::
    Evolverbetert.Flag -> Evolverbetert.Flag -> Evolverbetert.Flag
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Evolverbetert.Flag) (y :: Evolverbetert.Flag) ->
                 case Evolverbetert.$fOrdFlag_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
656a0687a0245244890624960e584e85
  $fOrdFlag_$cmin ::
    Evolverbetert.Flag -> Evolverbetert.Flag -> Evolverbetert.Flag
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Evolverbetert.Flag) (y :: Evolverbetert.Flag) ->
                 case Evolverbetert.$fOrdFlag_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
656a0687a0245244890624960e584e85
  $fShowFlag :: GHC.Show.Show Evolverbetert.Flag
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Evolverbetert.Flag
                  Evolverbetert.$fShowFlag_$cshowsPrec
                  Evolverbetert.$fShowFlag_$cshow
                  Evolverbetert.$fShowFlag_$cshowList -}
656a0687a0245244890624960e584e85
  $fShowFlag1 :: Evolverbetert.Flag -> GHC.Show.ShowS
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.showList} False True} Evolverbetert.$fShowFlag_$cshowsPrec
                                                                                                            Evolverbetert.$fShowFlag2) -}
8cfdecb05043f6dcdd5316df332e86cb
  $fShowFlag2 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 0#) -}
09557dc93da0d8f8e15fc696dc773e70
  $fShowFlag3 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Evolverbetert.$fShowFlag4) -}
d737f4d72cbdede3390f65635d74ed21
  $fShowFlag4 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                             "Graphics"#) -}
14e72bc9b8e257463f8a2ccc2f720b86
  $fShowFlag5 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                             "AgentSeed "#) -}
3cc0c9542eeee670ecd975cc3625fec7
  $fShowFlag6 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                             "WorldSeed "#) -}
6fae2da0da2661d51bef74afa969939a
  $fShowFlag7 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                             "OutputFile "#) -}
650362108465f5c59b0a4ec93f9ab7ce
  $fShowFlag8 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Evolverbetert.$fShowFlag9) -}
ef74df38be3806126aa583e1d86af354
  $fShowFlag9 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                             "Help"#) -}
656a0687a0245244890624960e584e85
  $fShowFlag_$cshow :: Evolverbetert.Flag -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Evolverbetert.Flag) ->
                 ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.showsPrec} True True} case x of wild {
                                                                                                             Evolverbetert.Help
                                                                                                             -> Evolverbetert.$fShowFlag8
                                                                                                             Evolverbetert.OutputFile b1
                                                                                                             -> \ (x1 :: GHC.Base.String)[OneShot] ->
                                                                                                                GHC.Base.++
                                                                                                                  @ GHC.Types.Char
                                                                                                                  Evolverbetert.$fShowFlag7
                                                                                                                  (GHC.Types.:
                                                                                                                     @ GHC.Types.Char
                                                                                                                     GHC.Show.shows6
                                                                                                                     (GHC.Show.showLitString
                                                                                                                        b1
                                                                                                                        (GHC.Types.:
                                                                                                                           @ GHC.Types.Char
                                                                                                                           GHC.Show.shows6
                                                                                                                           x1)))
                                                                                                             Evolverbetert.WorldSeed b1
                                                                                                             -> \ (x1 :: GHC.Base.String)[OneShot] ->
                                                                                                                GHC.Base.++
                                                                                                                  @ GHC.Types.Char
                                                                                                                  Evolverbetert.$fShowFlag6
                                                                                                                  (GHC.Types.:
                                                                                                                     @ GHC.Types.Char
                                                                                                                     GHC.Show.shows6
                                                                                                                     (GHC.Show.showLitString
                                                                                                                        b1
                                                                                                                        (GHC.Types.:
                                                                                                                           @ GHC.Types.Char
                                                                                                                           GHC.Show.shows6
                                                                                                                           x1)))
                                                                                                             Evolverbetert.AgentSeed b1
                                                                                                             -> \ (x1 :: GHC.Base.String)[OneShot] ->
                                                                                                                GHC.Base.++
                                                                                                                  @ GHC.Types.Char
                                                                                                                  Evolverbetert.$fShowFlag5
                                                                                                                  (GHC.Types.:
                                                                                                                     @ GHC.Types.Char
                                                                                                                     GHC.Show.shows6
                                                                                                                     (GHC.Show.showLitString
                                                                                                                        b1
                                                                                                                        (GHC.Types.:
                                                                                                                           @ GHC.Types.Char
                                                                                                                           GHC.Show.shows6
                                                                                                                           x1)))
                                                                                                             Evolverbetert.Graphics
                                                                                                             -> Evolverbetert.$fShowFlag3 })
                   (GHC.Types.[] @ GHC.Types.Char)) -}
656a0687a0245244890624960e584e85
  $fShowFlag_$cshowList :: [Evolverbetert.Flag] -> GHC.Show.ShowS
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.showList} True True} GHC.Show.showList__
                                                                                                           @ Evolverbetert.Flag
                                                                                                           Evolverbetert.$fShowFlag1) -}
656a0687a0245244890624960e584e85
  $fShowFlag_$cshowsPrec ::
    GHC.Types.Int -> Evolverbetert.Flag -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ (ds :: GHC.Types.Int) (ds1 :: Evolverbetert.Flag) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.showsPrec} True True} case ds1 of wild {
                                                                                                            Evolverbetert.Help
                                                                                                            -> Evolverbetert.$fShowFlag8
                                                                                                            Evolverbetert.OutputFile b1
                                                                                                            -> case ds of wild1 { GHC.Types.I# x ->
                                                                                                               case GHC.Prim.tagToEnum#
                                                                                                                      @ GHC.Types.Bool
                                                                                                                      (GHC.Prim.>=#
                                                                                                                         x
                                                                                                                         11#) of wild2 {
                                                                                                                 GHC.Types.False
                                                                                                                 -> \ (x1 :: GHC.Base.String) ->
                                                                                                                    GHC.Base.++
                                                                                                                      @ GHC.Types.Char
                                                                                                                      Evolverbetert.$fShowFlag7
                                                                                                                      (GHC.Types.:
                                                                                                                         @ GHC.Types.Char
                                                                                                                         GHC.Show.shows6
                                                                                                                         (GHC.Show.showLitString
                                                                                                                            b1
                                                                                                                            (GHC.Types.:
                                                                                                                               @ GHC.Types.Char
                                                                                                                               GHC.Show.shows6
                                                                                                                               x1)))
                                                                                                                 GHC.Types.True
                                                                                                                 -> \ (x1 :: GHC.Base.String) ->
                                                                                                                    GHC.Types.:
                                                                                                                      @ GHC.Types.Char
                                                                                                                      GHC.Show.shows7
                                                                                                                      (GHC.Base.++
                                                                                                                         @ GHC.Types.Char
                                                                                                                         Evolverbetert.$fShowFlag7
                                                                                                                         (GHC.Types.:
                                                                                                                            @ GHC.Types.Char
                                                                                                                            GHC.Show.shows6
                                                                                                                            (GHC.Show.showLitString
                                                                                                                               b1
                                                                                                                               (GHC.Types.:
                                                                                                                                  @ GHC.Types.Char
                                                                                                                                  GHC.Show.shows6
                                                                                                                                  (GHC.Types.:
                                                                                                                                     @ GHC.Types.Char
                                                                                                                                     GHC.Show.shows4
                                                                                                                                     x1))))) } }
                                                                                                            Evolverbetert.WorldSeed b1
                                                                                                            -> case ds of wild1 { GHC.Types.I# x ->
                                                                                                               case GHC.Prim.tagToEnum#
                                                                                                                      @ GHC.Types.Bool
                                                                                                                      (GHC.Prim.>=#
                                                                                                                         x
                                                                                                                         11#) of wild2 {
                                                                                                                 GHC.Types.False
                                                                                                                 -> \ (x1 :: GHC.Base.String) ->
                                                                                                                    GHC.Base.++
                                                                                                                      @ GHC.Types.Char
                                                                                                                      Evolverbetert.$fShowFlag6
                                                                                                                      (GHC.Types.:
                                                                                                                         @ GHC.Types.Char
                                                                                                                         GHC.Show.shows6
                                                                                                                         (GHC.Show.showLitString
                                                                                                                            b1
                                                                                                                            (GHC.Types.:
                                                                                                                               @ GHC.Types.Char
                                                                                                                               GHC.Show.shows6
                                                                                                                               x1)))
                                                                                                                 GHC.Types.True
                                                                                                                 -> \ (x1 :: GHC.Base.String) ->
                                                                                                                    GHC.Types.:
                                                                                                                      @ GHC.Types.Char
                                                                                                                      GHC.Show.shows7
                                                                                                                      (GHC.Base.++
                                                                                                                         @ GHC.Types.Char
                                                                                                                         Evolverbetert.$fShowFlag6
                                                                                                                         (GHC.Types.:
                                                                                                                            @ GHC.Types.Char
                                                                                                                            GHC.Show.shows6
                                                                                                                            (GHC.Show.showLitString
                                                                                                                               b1
                                                                                                                               (GHC.Types.:
                                                                                                                                  @ GHC.Types.Char
                                                                                                                                  GHC.Show.shows6
                                                                                                                                  (GHC.Types.:
                                                                                                                                     @ GHC.Types.Char
                                                                                                                                     GHC.Show.shows4
                                                                                                                                     x1))))) } }
                                                                                                            Evolverbetert.AgentSeed b1
                                                                                                            -> case ds of wild1 { GHC.Types.I# x ->
                                                                                                               case GHC.Prim.tagToEnum#
                                                                                                                      @ GHC.Types.Bool
                                                                                                                      (GHC.Prim.>=#
                                                                                                                         x
                                                                                                                         11#) of wild2 {
                                                                                                                 GHC.Types.False
                                                                                                                 -> \ (x1 :: GHC.Base.String) ->
                                                                                                                    GHC.Base.++
                                                                                                                      @ GHC.Types.Char
                                                                                                                      Evolverbetert.$fShowFlag5
                                                                                                                      (GHC.Types.:
                                                                                                                         @ GHC.Types.Char
                                                                                                                         GHC.Show.shows6
                                                                                                                         (GHC.Show.showLitString
                                                                                                                            b1
                                                                                                                            (GHC.Types.:
                                                                                                                               @ GHC.Types.Char
                                                                                                                               GHC.Show.shows6
                                                                                                                               x1)))
                                                                                                                 GHC.Types.True
                                                                                                                 -> \ (x1 :: GHC.Base.String) ->
                                                                                                                    GHC.Types.:
                                                                                                                      @ GHC.Types.Char
                                                                                                                      GHC.Show.shows7
                                                                                                                      (GHC.Base.++
                                                                                                                         @ GHC.Types.Char
                                                                                                                         Evolverbetert.$fShowFlag5
                                                                                                                         (GHC.Types.:
                                                                                                                            @ GHC.Types.Char
                                                                                                                            GHC.Show.shows6
                                                                                                                            (GHC.Show.showLitString
                                                                                                                               b1
                                                                                                                               (GHC.Types.:
                                                                                                                                  @ GHC.Types.Char
                                                                                                                                  GHC.Show.shows6
                                                                                                                                  (GHC.Types.:
                                                                                                                                     @ GHC.Types.Char
                                                                                                                                     GHC.Show.shows4
                                                                                                                                     x1))))) } }
                                                                                                            Evolverbetert.Graphics
                                                                                                            -> Evolverbetert.$fShowFlag3 }) -}
4a6344bedd80f69d0f077eb7fd6054ae
  $s! ::
    GHC.Arr.Array (GHC.Types.Int, GHC.Types.Int) Types.Agent
    -> (GHC.Types.Int, GHC.Types.Int) -> Types.Agent
  {- Arity: 2,
     Strictness: <S(S(S(S)S(S))S(S(S)S(S))SS),1*U(U(1*U(U),1*U(U)),U(1*U(U),1*U(U)),U,U)><S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (arr :: GHC.Arr.Array
                             (GHC.Types.Int, GHC.Types.Int) Types.Agent)
                   (i1 :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case arr of wild { GHC.Arr.Array l u dt ds1 ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ GHC.Types.Int
                   @ Types.Agent
                   (\ (eta1 :: GHC.Types.Int) ->
                    case eta1 of wild1 { GHC.Types.I# i# ->
                    case GHC.Prim.indexArray#
                           @ Types.Agent
                           ds1
                           i# of ds4 { Unit# ipv ->
                    ipv } })
                   (let {
                      n :: GHC.Types.Int = GHC.Types.I# dt
                    } in
                    let {
                      i' :: GHC.Types.Int
                      = case l of wild1 { (,) l1 l2 ->
                        case u of wild2 { (,) u1 u2 ->
                        case i1 of wild3 { (,) i2 i3 ->
                        case l1 of wild4 { GHC.Types.I# m ->
                        case u1 of wild5 { GHC.Types.I# n1 ->
                        case i2 of wild6 { GHC.Types.I# i4 ->
                        case GHC.Classes.&&
                               (GHC.Classes.&&
                                  (GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# m i4))
                                  (GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# i4 n1)))
                               (case l2 of wild7 { GHC.Types.I# m1 ->
                                case u2 of wild8 { GHC.Types.I# n2 ->
                                case i3 of wild9 { GHC.Types.I# i5 ->
                                GHC.Classes.&&
                                  (GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# m1 i5))
                                  (GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.<=# i5 n2)) } } }) of wild7 {
                          GHC.Types.False -> GHC.Arr.hopelessIndexError
                          GHC.Types.True
                          -> GHC.Num.$fNumInt_$c+
                               (GHC.Num.$fNumInt_$c*
                                  (GHC.Num.$fNumInt_$c- wild6 wild4)
                                  (GHC.Arr.$fIx(,)_$cunsafeRangeSize (l2, u2)))
                               (GHC.Num.$fNumInt_$c- i3 l2) } } } } } } }
                    } in
                    case GHC.Classes.&&
                           (GHC.Classes.leInt (GHC.Types.I# 0#) i')
                           (GHC.Classes.ltInt i' n) of wild1 {
                      GHC.Types.False
                      -> GHC.Err.error
                           @ 'GHC.Types.PtrRepLifted
                           @ GHC.Types.Int
                           (GHC.Stack.Types.PushCallStack
                              (GHC.Base.build
                                 @ GHC.Types.Char
                                 (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                              (GHC.Stack.Types.SrcLoc
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b -> GHC.CString.unpackFoldrCString# @ b "array-0.5.1.1"#))
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b ->
                                     GHC.CString.unpackFoldrCString# @ b "Data.Array.Base"#))
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b ->
                                     GHC.CString.unpackFoldrCString#
                                       @ b
                                       "libraries/array/Data/Array/Base.hs"#))
                                 (GHC.Types.I# 87#)
                                 (GHC.Types.I# 31#)
                                 (GHC.Types.I# 88#)
                                 (GHC.Types.I# 76#))
                              GHC.Stack.Types.EmptyCallStack)
                             `cast`
                           (Sym (GHC.Classes.N:IP[0]
                                     <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                           (GHC.Base.build
                              @ GHC.Types.Char
                              (\ @ b
                                 (c :: GHC.Types.Char -> b -> b)[OneShot]
                                 (n1 :: b)[OneShot] ->
                               GHC.CString.unpackFoldrCString#
                                 @ b
                                 "Error in array index; "#
                                 c
                                 (GHC.Base.foldr
                                    @ GHC.Types.Char
                                    @ b
                                    c
                                    (GHC.CString.unpackFoldrCString#
                                       @ b
                                       " not in range [0.."#
                                       c
                                       (GHC.Base.foldr
                                          @ GHC.Types.Char
                                          @ b
                                          c
                                          (GHC.CString.unpackFoldrCString# @ b ")"# c n1)
                                          (GHC.Show.$fShowInt_$cshow n)))
                                    (GHC.Show.$fShowInt_$cshow i'))))
                      GHC.Types.True -> i' }) }) -}
b04467c09bc9553b790492e00476b08f
  $s^1 :: GHC.Types.Double
  {- Strictness: x -}
336eff995b932a20096e0a4fb8182e85
  $s^2 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 1.0##) -}
6e3d4497e2e602fc8ee998442420b9d6
  $tc'AgentSeed :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11845945558769014239##
                   1362871597912215946##
                   Evolverbetert.$trModule
                   Evolverbetert.$tc'AgentSeed1) -}
b655ccfc3051249d0aa486e85dde537c
  $tc'AgentSeed1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AgentSeed"#) -}
cf026001ad9e7f3722551bb87aab4237
  $tc'Graphics :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7145275935320614261##
                   3818950886840160905##
                   Evolverbetert.$trModule
                   Evolverbetert.$tc'Graphics1) -}
2000a335d7afff41f68fb5c0cbd23f25
  $tc'Graphics1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Graphics"#) -}
fe114ca78c1a5b478764058d12e517e8
  $tc'Help :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8961375130141207493##
                   15924758769338368740##
                   Evolverbetert.$trModule
                   Evolverbetert.$tc'Help1) -}
c7953cd2f25a496d8355fb6788dc4a21
  $tc'Help1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Help"#) -}
d2c13d1bc83af6331ecb4b0119771f5a
  $tc'OutputFile :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6936850840864859142##
                   2004179360165458226##
                   Evolverbetert.$trModule
                   Evolverbetert.$tc'OutputFile1) -}
775ac3c37892ff7e0830dd8386a73b94
  $tc'OutputFile1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'OutputFile"#) -}
6ef925be2747ab62d15178f4eb227eac
  $tc'WorldSeed :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   651415342536730509##
                   9204617633148199185##
                   Evolverbetert.$trModule
                   Evolverbetert.$tc'WorldSeed1) -}
001b9f539ffef9454cba2e5262b3c40a
  $tc'WorldSeed1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'WorldSeed"#) -}
ce253fb7d13407ba9781aaf8177fa4ca
  $tcFlag :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1605086873100995822##
                   13318768977517827376##
                   Evolverbetert.$trModule
                   Evolverbetert.$tcFlag1) -}
f1d9b122fcf4096264e4ca6bda869959
  $tcFlag1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Flag"#) -}
a9fdf79c7a27742bbc23bff52f3f8cd1
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Evolverbetert.$trModule2
                   Evolverbetert.$trModule1) -}
5ba1e2f36637701a1f28186d114892ef
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Evolverbetert"#) -}
9dca04ccc051bdaf7b67b3ed4a7d10fc
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT"#) -}
24f7a508b30ca76f38fb02493c79839c
  $wf :: GHC.Prim.Double# -> GHC.Prim.Int# -> GHC.Prim.Double#
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>, Inline: [0] -}
4d179c859159278be37a1e504a7dbbdc
  $wmainLoop ::
    GHC.IORef.IORef Types.World
    -> GHC.IO.Handle.Types.Handle -> GHC.Prim.Int# -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U(U)><L,U><S,U>, Inline: [0] -}
8f32cd08ee6d14465b7c294edd200b7d
  $wnewAssoc ::
    Types.World
    -> (GHC.Types.Int, GHC.Types.Int)
    -> MyRandom.Rand ((GHC.Types.Int, GHC.Types.Int), Types.Agent)
  {- Arity: 2,
     Strictness: <L,1*U(U(U(U(U),U(U)),U(U(U),U(U)),U,U),U(U))><L,U(U(U),U(U))>,
     Inline: [0],
     Unfolding: (\ (w1 :: Types.World)
                   (ww :: (GHC.Types.Int, GHC.Types.Int)) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.newAssoc} True True} let {
                                                                                                           m1 :: Control.Monad.Trans.State.Strict.StateT
                                                                                                                   System.Random.Mersenne.Pure64.Internal.PureMT
                                                                                                                   Data.Functor.Identity.Identity
                                                                                                                   Types.Agent
                                                                                                           = case w1 of ww1 { Types.World ww2 ww3 ->
                                                                                                             Evolverbetert.$wreproduceAgent
                                                                                                               ww2
                                                                                                               ww3
                                                                                                               ww }
                                                                                                         } in
                                                                                                         (\ (s1 :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                                                                                                          case (m1
                                                                                                                  `cast`
                                                                                                                (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                                                     <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                                                                                                                     <Data.Functor.Identity.Identity>_R
                                                                                                                     <Types.Agent>_N)
                                                                                                                  s1)
                                                                                                                 `cast`
                                                                                                               (Data.Functor.Identity.N:Identity[0]
                                                                                                                    <(Types.Agent,
                                                                                                                      System.Random.Mersenne.Pure64.Internal.PureMT)>_R) of wild { (,) a1 s' ->
                                                                                                          ((ww,
                                                                                                            a1),
                                                                                                           s')
                                                                                                            `cast`
                                                                                                          (Sym (Data.Functor.Identity.N:Identity[0]
                                                                                                                    <(((GHC.Types.Int,
                                                                                                                        GHC.Types.Int),
                                                                                                                       Types.Agent),
                                                                                                                      System.Random.Mersenne.Pure64.Internal.PureMT)>_R)) })
                                                                                                           `cast`
                                                                                                         (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                                                   <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                                                                                                                   <Data.Functor.Identity.Identity>_R
                                                                                                                   <((GHC.Types.Int,
                                                                                                                      GHC.Types.Int),
                                                                                                                     Types.Agent)>_N))) -}
00703196b7a7422ef6a4c7df4b9b45f9
  $woutputString ::
    Types.Agents -> Types.Env -> GHC.Prim.Int# -> GHC.Base.String
  {- Arity: 3, Strictness: <L,1*U(A,A,U,U)><L,1*U(U)><S,U>,
     Inline: [0] -}
4e50c236fd28c1f5bb882675af3a7162
  $wreproduceAgent ::
    Types.Agents
    -> Types.Env
    -> (GHC.Types.Int, GHC.Types.Int)
    -> MyRandom.Rand Types.Agent
  {- Arity: 3,
     Strictness: <L,U(U(U(U),U(U)),U(U(U),U(U)),U,U)><L,U(U)><L,U(U(U),U(U))>,
     Inline: [0] -}
656a0687a0245244890624960e584e85
  data Flag
    = Help
    | OutputFile GHC.Base.String
    | WorldSeed GHC.Base.String
    | AgentSeed GHC.Base.String
    | Graphics
9012e0e99b0ed9df5454238e1d394d12
  chEnv :: Types.Env -> MyRandom.Rand Types.Env
  {- Arity: 1, Strictness: <L,U(U)>,
     Unfolding: InlineRule (0, True, True)
                Evolverbetert.chEnv1
                  `cast`
                (<Types.Env>_R
                 ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                               <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                               <Data.Functor.Identity.Identity>_R
                               <Types.Env>_N)) -}
0155476dec1ca9320c59fa8aea31c8a1
  chEnv1 ::
    Types.Env
    -> System.Random.Mersenne.Pure64.Internal.PureMT
    -> Data.Functor.Identity.Identity
         (Types.Env, System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, Strictness: <L,U(U)>,
     Unfolding: (\ (e :: Types.Env) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.chEnv} True False} \ (s1 :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                                                                                                       {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.chEnv} False True} case ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.chEnv} False True} (({__scc {mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State.Class.state} True True} Control.Monad.Trans.State.Strict.state
                                                                                                                                                                                                                                                                                                                                                                                            @ Data.Functor.Identity.Identity
                                                                                                                                                                                                                                                                                                                                                                                            @ System.Random.Mersenne.Pure64.Internal.PureMT
                                                                                                                                                                                                                                                                                                                                                                                            @ GHC.Types.Int
                                                                                                                                                                                                                                                                                                                                                                                            Data.Functor.Identity.$fMonadIdentity)
                                                                                                                                                                                                                                                                                            Evolverbetert.chEnv2)
                                                                                                                                                                                                                                                                                           `cast`
                                                                                                                                                                                                                                                                                         (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                                                                                                                                                                                                                              <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                                                                                                                                                                                                                                                                                              <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                                                                                                              <GHC.Types.Int>_N)
                                                                                                                                                                                                                                                                                           s1)
                                                                                                                                                                                                    `cast`
                                                                                                                                                                                                  (Data.Functor.Identity.N:Identity[0]
                                                                                                                                                                                                       <(Types.Env,
                                                                                                                                                                                                         System.Random.Mersenne.Pure64.Internal.PureMT)>_R) of wild { (,) a1 s' ->
                                                                                                                                                                                             (Data.Fixed.mod'
                                                                                                                                                                                                @ Types.Env
                                                                                                                                                                                                GHC.Real.$fRealInt
                                                                                                                                                                                                (GHC.Num.$fNumInt_$c+
                                                                                                                                                                                                   e
                                                                                                                                                                                                   a1)
                                                                                                                                                                                                Parameters.nrEnv,
                                                                                                                                                                                              s')
                                                                                                                                                                                               `cast`
                                                                                                                                                                                             (Sym (Data.Functor.Identity.N:Identity[0]
                                                                                                                                                                                                       <(Types.Env,
                                                                                                                                                                                                         System.Random.Mersenne.Pure64.Internal.PureMT)>_R)) }) -}
4f2afd90f105e5717fd7180e108e92d6
  chEnv2 ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (GHC.Types.Int, System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, Strictness: <L,1*U(U,U,U(U))>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case Evolverbetert.chEnv4 of ww5 { GHC.Types.I# ww6 ->
                 case {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.chEnv} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:MyRandom.randomR} True False} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:MyRandom.randomR} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:MyRandom.randomR.r} True False} Evolverbetert.chEnv3 of wild { GHC.Types.I# x ->
                 case {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.chEnv} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:MyRandom.randomR} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:MyRandom.randomR.d} True False} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:MyRandom.randomR.(...)} True True} MyRandom.randomDouble
                                                                                                                                                                                                                                                                                                                                                                              w1 of wild1 { (,) d g' ->
                 case d of wild2 { GHC.Types.D# x1 ->
                 case {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.chEnv} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:MyRandom.randomR} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:MyRandom.randomR.r} False True} let {
                                                                                                                                                                                                                                                                                      x2 :: GHC.Prim.Double#
                                                                                                                                                                                                                                                                                      = GHC.Prim.*##
                                                                                                                                                                                                                                                                                          x1
                                                                                                                                                                                                                                                                                          (GHC.Prim.int2Double#
                                                                                                                                                                                                                                                                                             (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                (GHC.Prim.-#
                                                                                                                                                                                                                                                                                                   ww6
                                                                                                                                                                                                                                                                                                   x)
                                                                                                                                                                                                                                                                                                1#))
                                                                                                                                                                                                                                                                                    } in
                                                                                                                                                                                                                                                                                    let {
                                                                                                                                                                                                                                                                                      n :: GHC.Prim.Int#
                                                                                                                                                                                                                                                                                      = GHC.Prim.double2Int#
                                                                                                                                                                                                                                                                                          x2
                                                                                                                                                                                                                                                                                    } in
                                                                                                                                                                                                                                                                                    case GHC.Prim.tagToEnum#
                                                                                                                                                                                                                                                                                           @ GHC.Types.Bool
                                                                                                                                                                                                                                                                                           (GHC.Prim.<##
                                                                                                                                                                                                                                                                                              x2
                                                                                                                                                                                                                                                                                              (GHC.Prim.int2Double#
                                                                                                                                                                                                                                                                                                 n)) of wild3 {
                                                                                                                                                                                                                                                                                      GHC.Types.False
                                                                                                                                                                                                                                                                                      -> GHC.Types.I#
                                                                                                                                                                                                                                                                                           (GHC.Prim.+#
                                                                                                                                                                                                                                                                                              x
                                                                                                                                                                                                                                                                                              n)
                                                                                                                                                                                                                                                                                      GHC.Types.True
                                                                                                                                                                                                                                                                                      -> GHC.Types.I#
                                                                                                                                                                                                                                                                                           (GHC.Prim.+#
                                                                                                                                                                                                                                                                                              x
                                                                                                                                                                                                                                                                                              (GHC.Prim.-#
                                                                                                                                                                                                                                                                                                 n
                                                                                                                                                                                                                                                                                                 1#)) } of wild3 { GHC.Types.I# x2 ->
                 case {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.chEnv} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:MyRandom.randomR} False True} GHC.Prim.tagToEnum#
                                                                                                                                                                                                 @ GHC.Types.Bool
                                                                                                                                                                                                 (GHC.Prim.<#
                                                                                                                                                                                                    x2
                                                                                                                                                                                                    x) of wild4 {
                   GHC.Types.False
                   -> case {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.chEnv} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:MyRandom.randomR} False True} GHC.Prim.tagToEnum#
                                                                                                                                                                                                      @ GHC.Types.Bool
                                                                                                                                                                                                      (GHC.Prim.>#
                                                                                                                                                                                                         x2
                                                                                                                                                                                                         ww6) of wild5 {
                        GHC.Types.False
                        -> (wild3,
                            {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.chEnv} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:MyRandom.randomR} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:MyRandom.randomR.g'} True False} g')
                        GHC.Types.True
                        -> (wild,
                            {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.chEnv} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:MyRandom.randomR} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:MyRandom.randomR.g'} True False} g') }
                   GHC.Types.True
                   -> (wild,
                       {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.chEnv} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:MyRandom.randomR} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:MyRandom.randomR.g'} True False} g') } } } } } }) -}
26b786192b1ec96a081b21e8b2c35738
  chEnv3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
82c02216f674ce78eb7aab62c831bb2c
  chEnv4 :: GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.chEnv} False True} case Evolverbetert.chEnv5 of wild { GHC.Types.I# x ->
                                                                                                       GHC.Types.I#
                                                                                                         (GHC.Prim.-#
                                                                                                            x
                                                                                                            1#) }) -}
32219a1bd9c63614bc1c02b907d28dcb
  chEnv5 :: GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.chEnv} False True} case Parameters.nrEnv of wild1 { GHC.Types.I# y1 ->
                                                                                                       case GHC.Prim.tagToEnum#
                                                                                                              @ GHC.Types.Bool
                                                                                                              (GHC.Prim.<=#
                                                                                                                 1#
                                                                                                                 y1) of wild2 {
                                                                                                         GHC.Types.False
                                                                                                         -> Evolverbetert.chEnv3
                                                                                                         GHC.Types.True
                                                                                                         -> wild1 } }) -}
672f1a95d59502e2cb0bf09d1c3be7ff
  compilerOpts ::
    [GHC.Base.String]
    -> GHC.Types.IO ([Evolverbetert.Flag], [GHC.Base.String])
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (argv :: [GHC.Base.String]) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.compilerOpts} True True} case System.Console.GetOpt.$wgetOpt'
                                                                                                                    @ Evolverbetert.Flag
                                                                                                                    (System.Console.GetOpt.Permute
                                                                                                                       @ Evolverbetert.Flag)
                                                                                                                    Evolverbetert.options
                                                                                                                    argv of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                                                                                                             case GHC.Base.++
                                                                                                                    @ [GHC.Types.Char]
                                                                                                                    ww4
                                                                                                                    (GHC.Base.map
                                                                                                                       @ [GHC.Types.Char]
                                                                                                                       @ [GHC.Types.Char]
                                                                                                                       System.Console.GetOpt.errUnrec
                                                                                                                       ww3) of wild {
                                                                                                               []
                                                                                                               -> (\ (s :: GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld)[OneShot] ->
                                                                                                                   (# s,
                                                                                                                      (ww1,
                                                                                                                       ww2) #))
                                                                                                                    `cast`
                                                                                                                  (Sym (GHC.Types.N:IO[0]
                                                                                                                            <([Evolverbetert.Flag],
                                                                                                                              [GHC.Base.String])>_R))
                                                                                                               : ipv ipv1
                                                                                                               -> (\ (eta :: GHC.Prim.State#
                                                                                                                               GHC.Prim.RealWorld)[OneShot] ->
                                                                                                                   GHC.Prim.raiseIO#
                                                                                                                     @ GHC.Exception.SomeException
                                                                                                                     @ ([Evolverbetert.Flag],
                                                                                                                        [GHC.Base.String])
                                                                                                                     (GHC.IO.Exception.$fExceptionIOException_$ctoException
                                                                                                                        (GHC.IO.Exception.IOError
                                                                                                                           (GHC.Base.Nothing
                                                                                                                              @ GHC.IO.Handle.Types.Handle)
                                                                                                                           GHC.IO.Exception.UserError
                                                                                                                           (GHC.Types.[]
                                                                                                                              @ GHC.Types.Char)
                                                                                                                           (Evolverbetert.compilerOpts_go
                                                                                                                              wild)
                                                                                                                           (GHC.Base.Nothing
                                                                                                                              @ Foreign.C.Types.CInt)
                                                                                                                           (GHC.Base.Nothing
                                                                                                                              @ GHC.IO.FilePath)))
                                                                                                                     eta)
                                                                                                                    `cast`
                                                                                                                  (Sym (GHC.Types.N:IO[0]
                                                                                                                            <([Evolverbetert.Flag],
                                                                                                                              [GHC.Base.String])>_R)) } }) -}
bcf8703f9c2408106aad0dd628f82bc0
  compilerOpts_go :: [[GHC.Types.Char]] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
8d75c3f665fb01b23e0c3be611ae73e0
  initialize ::
    [Evolverbetert.Flag]
    -> GHC.Types.IO
         (GHC.IORef.IORef Types.World, GHC.IO.Handle.Types.Handle)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Evolverbetert.initialize1
                  `cast`
                (<[Evolverbetert.Flag]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <(GHC.IORef.IORef Types.World, GHC.IO.Handle.Types.Handle)>_R)) -}
18397302a2bbf7049fe9bedc3ad5ec96
  initialize1 ::
    [Evolverbetert.Flag]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.IORef.IORef Types.World, GHC.IO.Handle.Types.Handle) #)
  {- Arity: 1, Strictness: <L,U> -}
ce0e9ea047c0c351d03be8340158989a
  isAgentSeed :: Evolverbetert.Flag -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Evolverbetert.Flag) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.isAgentSeed} True True} case ds of wild {
                                                                                                              DEFAULT
                                                                                                              -> GHC.Types.False
                                                                                                              Evolverbetert.AgentSeed ds1
                                                                                                              -> GHC.Types.True }) -}
103f24cfee6152e99ed41fcccc8d944b
  isGraphics :: Evolverbetert.Flag -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Evolverbetert.Flag) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.isGraphics} True True} case ds of wild {
                                                                                                             DEFAULT
                                                                                                             -> GHC.Types.False
                                                                                                             Evolverbetert.Graphics
                                                                                                             -> GHC.Types.True }) -}
deb6c47b9e28a6ad10092e3eacb2adc8
  isHelp :: Evolverbetert.Flag -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Evolverbetert.Flag) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.isHelp} True True} case ds of wild {
                                                                                                         DEFAULT
                                                                                                         -> GHC.Types.False
                                                                                                         Evolverbetert.Help
                                                                                                         -> GHC.Types.True }) -}
2f6064d31533ab7f42c3ec9a71bac645
  isOutputFile :: Evolverbetert.Flag -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Evolverbetert.Flag) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.isOutputFile} True True} case ds of wild {
                                                                                                               DEFAULT
                                                                                                               -> GHC.Types.False
                                                                                                               Evolverbetert.OutputFile ds1
                                                                                                               -> GHC.Types.True }) -}
880c6a699b390526718f8a33c0575851
  isWorldSeed :: Evolverbetert.Flag -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Evolverbetert.Flag) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.isWorldSeed} True True} case ds of wild {
                                                                                                              DEFAULT
                                                                                                              -> GHC.Types.False
                                                                                                              Evolverbetert.WorldSeed ds1
                                                                                                              -> GHC.Types.True }) -}
fda2080677b32bb6721269444a161247
  main :: GHC.Types.IO ()
  {- Unfolding: InlineRule (0, True, True)
                Evolverbetert.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
200a3cd5ea2d362a72e7d7321fbe2256
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
e790740d526da509125fb2afd950cab1
  mainLoop ::
    GHC.IORef.IORef Types.World
    -> GHC.IO.Handle.Types.Handle -> Parameters.Time -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U(U)><L,U><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: GHC.IORef.IORef Types.World)
                   (w2 :: GHC.IO.Handle.Types.Handle)
                   (w3 :: Parameters.Time) ->
                 case w3 of ww { GHC.Types.I# ww1 ->
                 Evolverbetert.$wmainLoop w1 w2 ww1 }) -}
b1e3de6bd8ce3ac7f42c486a5fab66d7
  newAssoc ::
    Types.World
    -> ((GHC.Types.Int, GHC.Types.Int), Types.Agent)
    -> MyRandom.Rand ((GHC.Types.Int, GHC.Types.Int), Types.Agent)
  {- Arity: 2,
     Strictness: <L,1*U(U(U(U(U),U(U)),U(U(U),U(U)),U,U),U(U))><S,1*U(U(U(U),U(U)),A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: Types.World)
                   (w2 :: ((GHC.Types.Int, GHC.Types.Int), Types.Agent)) ->
                 case w2 of ww { (,) ww1 ww2 ->
                 Evolverbetert.$wnewAssoc w1 ww1 }) -}
19233491f76cbbcab1a962fa782186cc
  newWorld :: Types.World -> MyRandom.Rand Types.World
  {- Arity: 1,
     Strictness: <L,U(U(U(U(U),U(U)),U(U(U),U(U)),U,U),U(U))> -}
472935c8463ad18454529d7ffe075002
  options :: [System.Console.GetOpt.OptDescr Evolverbetert.Flag]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} True False} GHC.Types.:
                                                                                                           @ (System.Console.GetOpt.OptDescr
                                                                                                                Evolverbetert.Flag)
                                                                                                           Evolverbetert.options38
                                                                                                           Evolverbetert.options1) -}
1a6cab44a4d7f925f18b53c15197f50e
  options1 :: [System.Console.GetOpt.OptDescr Evolverbetert.Flag]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (System.Console.GetOpt.OptDescr Evolverbetert.Flag)
                   Evolverbetert.options30
                   Evolverbetert.options2) -}
20e45378b91fbee4a19f644898a7dbed
  options10 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Evolverbetert.options11
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2dae3795172ce7aa3391246a712050c6
  options11 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'g'#) -}
8804a251aa7ef1b8ee6121abd92be0da
  options12 :: System.Console.GetOpt.OptDescr Evolverbetert.Flag
  {- Strictness: m,
     Unfolding: (System.Console.GetOpt.Option
                   @ Evolverbetert.Flag
                   Evolverbetert.options19
                   Evolverbetert.options17
                   Evolverbetert.options14
                   Evolverbetert.options13) -}
81684798b18221463da280116e6bdef0
  options13 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} GHC.CString.unpackCString#
                                                                                                                                                                                                   "output file"#) -}
7671e4cacc60cb233aa7c85f4c959a23
  options14 :: System.Console.GetOpt.ArgDescr Evolverbetert.Flag
  {- Strictness: m2,
     Unfolding: (System.Console.GetOpt.ReqArg
                   @ Evolverbetert.Flag
                   Evolverbetert.options16
                   Evolverbetert.options15) -}
9984e6db207f242f4b6dee89e7fb324c
  options15 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} GHC.CString.unpackCString#
                                                                                                                                                                                                   "FILEPATH"#) -}
079d1554b4cdfb10070e1f913d319b4e
  options16 :: GHC.Base.String -> Evolverbetert.Flag
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} Evolverbetert.OutputFile) -}
a129183a5895f2c95b854fc0b0cf867a
  options17 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Evolverbetert.options18
                   (GHC.Types.[] @ GHC.Base.String)) -}
8d3b7ac0b09d509147886a8cb3df9f1d
  options18 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} GHC.CString.unpackCString#
                                                                                                                                                                                                                                                                                           "output-file"#) -}
a38398f0a14065f6069e8e095859358c
  options19 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Evolverbetert.options20
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ea8d87479669274a5ff186e45d614158
  options2 :: [System.Console.GetOpt.OptDescr Evolverbetert.Flag]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (System.Console.GetOpt.OptDescr Evolverbetert.Flag)
                   Evolverbetert.options21
                   Evolverbetert.options3) -}
7decf1ce2078c4916248e5a8817964e3
  options20 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'o'#) -}
05de2440dad43e4494ac10edc6d6734e
  options21 :: System.Console.GetOpt.OptDescr Evolverbetert.Flag
  {- Strictness: m,
     Unfolding: (System.Console.GetOpt.Option
                   @ Evolverbetert.Flag
                   Evolverbetert.options28
                   Evolverbetert.options26
                   Evolverbetert.options23
                   Evolverbetert.options22) -}
344b73df5f6e9a1c7c4f335203674bb4
  options22 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} GHC.CString.unpackCString#
                                                                                                                                                                                                   "give the seed for the first agent RNG (default: 420)"#) -}
0510a2563008d5fba94a7a7644bc2682
  options23 :: System.Console.GetOpt.ArgDescr Evolverbetert.Flag
  {- Strictness: m2,
     Unfolding: (System.Console.GetOpt.ReqArg
                   @ Evolverbetert.Flag
                   Evolverbetert.options25
                   Evolverbetert.options24) -}
9d0a4fb3c5158cc4c45d7e2518e71e47
  options24 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} GHC.CString.unpackCString#
                                                                                                                                                                                                   "INT"#) -}
4aa0b47ae5645428ed88b2d2bcb7fe51
  options25 :: GHC.Base.String -> Evolverbetert.Flag
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} Evolverbetert.AgentSeed) -}
ca6acb889784486ba2e285aec9902267
  options26 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Evolverbetert.options27
                   (GHC.Types.[] @ GHC.Base.String)) -}
c19654d3846c444056f338f0369b0d93
  options27 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} GHC.CString.unpackCString#
                                                                                                                                                                                                                                                                                           "agent-seed"#) -}
f168966894c8592e9e93d5c59c3d10e9
  options28 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Evolverbetert.options29
                   (GHC.Types.[] @ GHC.Types.Char)) -}
32dc1d11e13d2071dee979804e78a657
  options29 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'a'#) -}
607578d1cad675759a1e00ef8dc2156b
  options3 :: [System.Console.GetOpt.OptDescr Evolverbetert.Flag]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (System.Console.GetOpt.OptDescr Evolverbetert.Flag)
                   Evolverbetert.options12
                   Evolverbetert.options4) -}
a1de9215aead44de8fe585c52d0432c9
  options30 :: System.Console.GetOpt.OptDescr Evolverbetert.Flag
  {- Strictness: m,
     Unfolding: (System.Console.GetOpt.Option
                   @ Evolverbetert.Flag
                   Evolverbetert.options36
                   Evolverbetert.options34
                   Evolverbetert.options32
                   Evolverbetert.options31) -}
d5855c941cd7de959c56f265c598a7dd
  options31 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} GHC.CString.unpackCString#
                                                                                                                                                                                                   "give the seed for the world RNG (default: 420)"#) -}
040908e23ded9a463f29029c82a140dc
  options32 :: System.Console.GetOpt.ArgDescr Evolverbetert.Flag
  {- Strictness: m2,
     Unfolding: (System.Console.GetOpt.ReqArg
                   @ Evolverbetert.Flag
                   Evolverbetert.options33
                   Evolverbetert.options24) -}
fec6eb7ac340cf2c93fc73711dfdb243
  options33 :: GHC.Base.String -> Evolverbetert.Flag
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} Evolverbetert.WorldSeed) -}
35a8748db57b8eb95c0f040b9e148ed7
  options34 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Evolverbetert.options35
                   (GHC.Types.[] @ GHC.Base.String)) -}
5eea5a510ba3158cbbddbe54956e5091
  options35 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} GHC.CString.unpackCString#
                                                                                                                                                                                                                                                                                           "world-seed"#) -}
15d410319ef839a4fd8137c8435fbdf4
  options36 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Evolverbetert.options37
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9dd27dcc6d72a5dff56fc0951c8aa745
  options37 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'w'#) -}
04c2acf3cf6d0beed83eb766995b26a8
  options38 :: System.Console.GetOpt.OptDescr Evolverbetert.Flag
  {- Strictness: m,
     Unfolding: (System.Console.GetOpt.Option
                   @ Evolverbetert.Flag
                   Evolverbetert.options43
                   Evolverbetert.options41
                   Evolverbetert.options40
                   Evolverbetert.options39) -}
0d2d3bcd2205a139547b2ab231faf37c
  options39 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} GHC.CString.unpackCString#
                                                                                                                                                                                                   "display this help info"#) -}
d106e840d4c5c24dfc077229fd80b65f
  options4 :: [System.Console.GetOpt.OptDescr Evolverbetert.Flag]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (System.Console.GetOpt.OptDescr Evolverbetert.Flag)
                   Evolverbetert.options5
                   (GHC.Types.[]
                      @ (System.Console.GetOpt.OptDescr Evolverbetert.Flag))) -}
919ee9277f891f53ffa94a0f1437b482
  options40 :: System.Console.GetOpt.ArgDescr Evolverbetert.Flag
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (System.Console.GetOpt.NoArg
                   @ Evolverbetert.Flag
                   Evolverbetert.Help) -}
3695edb72ba8c3ac38d36504810fd2ba
  options41 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Evolverbetert.options42
                   (GHC.Types.[] @ GHC.Base.String)) -}
5dc3890fa6541e2cbdfbc10ac6f2ea31
  options42 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} GHC.CString.unpackCString#
                                                                                                                                                                                                                                                                                           "help"#) -}
8dc3667f47350b21755e16c871b780f4
  options43 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Evolverbetert.options44
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e6325b7adfc3213019e2eb80e5f55251
  options44 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'h'#) -}
bf6fab217b7bd44674982496e7bf83d7
  options5 :: System.Console.GetOpt.OptDescr Evolverbetert.Flag
  {- Strictness: m,
     Unfolding: (System.Console.GetOpt.Option
                   @ Evolverbetert.Flag
                   Evolverbetert.options10
                   Evolverbetert.options8
                   Evolverbetert.options7
                   Evolverbetert.options6) -}
f9aa383546903c019da39153857fe429
  options6 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} GHC.CString.unpackCString#
                                                                                                                                                                                                   "display CA in a window (Not yet working! Change the parameter file)"#) -}
96459a658dcf0bdb29bf155e619c43eb
  options7 :: System.Console.GetOpt.ArgDescr Evolverbetert.Flag
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (System.Console.GetOpt.NoArg
                   @ Evolverbetert.Flag
                   Evolverbetert.Graphics) -}
3d8a193a66498195f8793a93fdd5c63c
  options8 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Evolverbetert.options9
                   (GHC.Types.[] @ GHC.Base.String)) -}
b6e50fd3519f5bdb9a05125324e2d205
  options9 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Evolverbetert.options} False True} GHC.CString.unpackCString#
                                                                                                                                                                                                                                                                                           "graphics"#) -}
37c2b78621b4a8a2c52b9868c3d97dba
  outputString :: Types.World -> Parameters.Time -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U(1*U(A,A,U,U),1*U(U))><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: Types.World) (w2 :: Parameters.Time) ->
                 case w1 of ww { Types.World ww1 ww2 ->
                 case w2 of ww3 { GHC.Types.I# ww4 ->
                 Evolverbetert.$woutputString ww1 ww2 ww4 } }) -}
db5af11a901ead7778bc8c55df1977f3
  reproduceAgent ::
    Types.World
    -> (GHC.Types.Int, GHC.Types.Int) -> MyRandom.Rand Types.Agent
  {- Arity: 2,
     Strictness: <S,1*U(U(U(U(U),U(U)),U(U(U),U(U)),U,U),U(U))><L,U(U(U),U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: Types.World) (w2 :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case w1 of ww { Types.World ww1 ww2 ->
                 Evolverbetert.$wreproduceAgent ww1 ww2 w2 }) -}
instance GHC.Classes.Eq [Evolverbetert.Flag]
  = Evolverbetert.$fEqFlag
instance GHC.Classes.Ord [Evolverbetert.Flag]
  = Evolverbetert.$fOrdFlag
instance GHC.Show.Show [Evolverbetert.Flag]
  = Evolverbetert.$fShowFlag
"SPEC/Evolverbetert ! @ Array @ Agent @ (Int, Int)" [ALWAYS] forall ($dIx :: GHC.Arr.Ix
                                                                               (GHC.Types.Int,
                                                                                GHC.Types.Int))
                                                                    ($dIArray :: Data.Array.Base.IArray
                                                                                   GHC.Arr.Array
                                                                                   Types.Agent)
  Data.Array.Base.! @ GHC.Arr.Array
                    @ Types.Agent
                    @ (GHC.Types.Int, GHC.Types.Int)
                    $dIArray
                    $dIx
  = Evolverbetert.$s!
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

