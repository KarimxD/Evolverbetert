
==================== FINAL INTERFACE ====================
2017-04-18 14:38:16.035965 UTC

interface Evolverbetert-0.1.0.0-V8JIjv9qj8K8hV6s9LpTj:Evolverbetert 8002
  interface hash: f67a55b0fbb0e5a90def7f5cfac20494
  ABI hash: 8f19eec59f1463a3a41616b9df0ac983
  export-list hash: d92b7f418e53631b226aef630ad47c2d
  orphan hash: fdf0cf62696c8f23ed28de598e7346bb
  flag hash: ab396f11155bd696ab63895436e6f1df
  sig of: Nothing
  used TH splices: False
  where
exports:
  Evolverbetert.chEnv
  Evolverbetert.compilerOpts
  Evolverbetert.consoleOutput
  Evolverbetert.displayWorld
  Evolverbetert.fileOutput
  Evolverbetert.initialize
  Evolverbetert.isAgentSeed
  Evolverbetert.isGraphics
  Evolverbetert.isHelp
  Evolverbetert.isOutputFile
  Evolverbetert.isWorldSeed
  Evolverbetert.main
  Evolverbetert.mainLoop
  Evolverbetert.newAssoc
  Evolverbetert.newWorld
  Evolverbetert.options
  Evolverbetert.outputString
  Evolverbetert.reproduceAgent
  Evolverbetert.Flag{Evolverbetert.AgentSeed Evolverbetert.Graphics Evolverbetert.Help Evolverbetert.OutputFile Evolverbetert.WorldSeed}
module dependencies: Misc Mutations MyGraphics MyRandom Parameters
                     World
package dependencies: GLURaw-2.0.0.3@GLURaw-2.0.0.3-G12M6COyQIU5WfRlrIwPuj
                      GLUT-2.7.0.11@GLUT-2.7.0.11-IP0PzJz4wI8KYXyKTnttpl
                      MonadRandom-0.5.1@MonadRandom-0.5.1-IY6HiWu00vQLARukQW3KMH
                      ObjectName-1.1.0.1@ObjectName-1.1.0.1-EiFOWjUQWWuLyOhtrmuIWX
                      OpenGL-3.0.1.0@OpenGL-3.0.1.0-BckrJgI63aX3I0VRJxU6fY
                      OpenGLRaw-3.2.4.0@OpenGLRaw-3.2.4.0-JDyGgOXR61GG549SwmWm2Q
                      StateVar-1.1.0.4@StateVar-1.1.0.4-5dJbnTVECtEAhfJXPZKdbO
                      ansi-terminal-0.6.2.3@ansi-terminal-0.6.2.3-4HPxin1iv6RAndS8lH3nzo
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      data-inttrie-0.1.2@data-inttrie-0.1.2-LwMrrR1qHVOJfuoxOFd7lf
                      data-memocombinators-0.5.1@data-memocombinators-0.5.1-7Cm5blFlrBsIAp5LANmGFG
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      fixed-0.2.1.1@fixed-0.2.1.1-8Jr82l0kss5Gr4nEevmXlZ ghc-prim-0.5.0.0
                      half-0.2.2.3@half-0.2.2.3-GHJ372Ls7FBA3PAGtGHfOR
                      integer-gmp-1.0.0.1
                      mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV
                      monad-parallel-0.7.2.2@monad-parallel-0.7.2.2-DgGZ1OYT6KM5SKZdJnC6sE
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      parallel-3.2.1.0@parallel-3.2.1.0-CNlrARikHUx7Z7NHwpxRS3
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      random-shuffle-0.0.4@random-shuffle-0.0.4-97h14tPp7Ru21125sv6IMi
                      split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: Evolverbetert-0.1.0.0-V8JIjv9qj8K8hV6s9LpTj:MyRandom
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: MonadRandom-0.5.1@MonadRandom-0.5.1-IY6HiWu00vQLARukQW3KMH:Control.Monad.Trans.Random.Lazy
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity base-4.9.1.0:Data.List.NonEmpty
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Semigroup
                         base-4.9.1.0:Data.Type.Equality base-4.9.1.0:Data.Version
                         base-4.9.1.0:Data.Void base-4.9.1.0:GHC.Exts
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
import  -/  Misc 29c0d45b091ca7f5a721f96290bb9455
  exports: df091b8235b328934b9b8728c1f465fb
  maybeCh 1a9630d947adb4a07b7c632ebd0882d1
  moore8 be4380cc45f08afdd6a4c0b800b19d50
import  -/  Mutations 2065fd8b8b021558cd269bef7149a8e7
  exports: 0e01345b963a1c47fb6ec73e5129dfe0
  mutAg edb744153b0ceaf46b3a04dcbbb3abad
import  -/  MyGraphics df497fcfa9297e453a419c1b05e0b687
  exports: a4e4c6a7c15bfc500a76c9b21c37e6b6
  showWorld c2e703601b33e2eaf4043b94febc12ea
import  -/  MyRandom 33611e374b56347aadc8c80984a9fa4c
  exports: 3a660b6271794f39dcef688ebf3015a0
  Rand 5bdb0e7c20a2aaac077ba74e108f1933
  evalRand d4b9aaaf019c00220b05d0d3e775232d
  getDouble aa706b48619f6a2c2edf5a4d910d02d9
  getMyStdGen 865b01a7b5a21eece553be45cc40b243
  getRange b70440ca412e06c26db87dcbaf933855
  pureMT 4ee9c6c1220e0a0c7d0f1a4b39136a10
  runRand f509516ae62bcb6a9a6a150ce55516dc
  setMyStdGen 44401eaceabf73e6c44b0324fb083b9d
import  -/  Parameters 1a3da9d8014952d879e0f8fd570479a4
  exports: b8632a87381c85ddbef206a68a999a0a
  Console 24e049d2fc79b9908001cd8d549fc695
  File b27b42229b48bf6db5992ef0342b9e2c
  FileAndConsole c34b397089462b16cc68540920953faf
  Time 342f1c1599a9f1e047ba90ca247b566d
  deathRate 73b338fac641955f848d64f6a4c2aaf5
  defaultOutputFile 2d20ca737cb4fe80f14dd2fc388b0f3d
  display a91f85226445c9b349b8642019d2e2ab
  envSwitchProb 4273328b8a8efc97371487a956a7506a
  height b77b274a02d8a42e399cb6c8c27b26b7
  maxTime 6cfd971a5c8a33e0f408ee76c8b59d4a
  nrEnv f222d0efc2d376a68fe706e3fa87f0bc
  outputMode e44af2f155ed09359ed0da7f3e11625d
  outputStep 539b52004ce3d41acb7b36ba8c925089
  selectionPressure 97c770948c9930d6a2e87cd8ea545285
  width 9799286556681e36bcff44e7cba10f96
  worldBounds bba4f0fa54b9be7d0c6f888ffc03b47f
  worldCoods 1466637ba759d0c506559bee787190f9
import  -/  World c611f0fc10937d859e65676507443411
  exports: 9c4287b179a09b09a2ce1373edf801fa
  Agent 33d3cbd47b3db0634720d677b02c84f9
  Env 7242615a5a1d9433ad0c730140466ebf
  NoAgent 53483b611713e7ba33c89f607503b2d9
  World c0b172672dfb817afb7b3d5995003f8a
  devAg 0e26eed8c559f00c9effbac159fc9847
  fitnessAgent ae68dabf0f6c024e37fb146b713e47de
  hammDistAg e2958ec41796fbd1e34489ba6693c0c1
  randomAgent cd589d1cdba640fa6ccfc3ed5a1f3984
import  -/  GLUT-2.7.0.11@GLUT-2.7.0.11-IP0PzJz4wI8KYXyKTnttpl:Graphics.UI.GLUT 850ab735296960c40e0ec36d1d65a5d9
import  -/  GLUT-2.7.0.11@GLUT-2.7.0.11-IP0PzJz4wI8KYXyKTnttpl:Graphics.UI.GLUT.Begin 05dfd16366721fd6a3e5ed4e8d031496
import  -/  GLUT-2.7.0.11@GLUT-2.7.0.11-IP0PzJz4wI8KYXyKTnttpl:Graphics.UI.GLUT.Callbacks.Window 055811271b55e7da82a607ecad66f70a
import  -/  GLUT-2.7.0.11@GLUT-2.7.0.11-IP0PzJz4wI8KYXyKTnttpl:Graphics.UI.GLUT.Initialization 6f5c3e11cdffd203f733838209805df8
import  -/  GLUT-2.7.0.11@GLUT-2.7.0.11-IP0PzJz4wI8KYXyKTnttpl:Graphics.UI.GLUT.State 848d0bde398956b53d4fab9d4a4e203b
import  -/  GLUT-2.7.0.11@GLUT-2.7.0.11-IP0PzJz4wI8KYXyKTnttpl:Graphics.UI.GLUT.Window 050ef4cbfa70b612c77f709bb8027899
import  -/  OpenGL-3.0.1.0@OpenGL-3.0.1.0-BckrJgI63aX3I0VRJxU6fY:Graphics.Rendering.OpenGL.GL.CoordTrans 75f4b70189073bad57f60e018a98f091
import  -/  OpenGL-3.0.1.0@OpenGL-3.0.1.0-BckrJgI63aX3I0VRJxU6fY:Graphics.Rendering.OpenGL.GLU.Matrix 1fa9dbebfc155f30d7e38f0da0231759
import  -/  StateVar-1.1.0.4@StateVar-1.1.0.4-5dJbnTVECtEAhfJXPZKdbO:Data.StateVar 54a09cc28cf7d6ddcbd881e9786d7bbd
import  -/  ansi-terminal-0.6.2.3@ansi-terminal-0.6.2.3-4HPxin1iv6RAndS8lH3nzo:System.Console.ANSI e739319fbbd4966bdcd546dfbbe469b3
import  -/  array-0.5.1.1@array-0.5.1.1:Data.Array.Base a1a813de21dd195f39f7a053a2142a3f
import  -/  array-0.5.1.1@array-0.5.1.1:Data.Array.IArray 606f8bb830eb2a88c29c91f27c77f304
import  -/  base-4.9.1.0:Control.Concurrent 2ee6a0a58489520b9a96d8fef10380fa
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Fixed b80105ba94244c515fc7e741d2a7c501
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Function 7aca86bfbd92366def5f260e30cb2628
import  -/  base-4.9.1.0:Data.IORef 71c87b0b25a8bca3e3f4497725f5e543
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.IO.Exception 5064be4c355632a1d1c4f2322f56ac52
import  -/  base-4.9.1.0:GHC.IORef 306bd532f2f3b000347cbe6316adc20e
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.Console.GetOpt cc31faf101a3ac67abb428b865bee7a2
import  -/  base-4.9.1.0:System.Environment 08cb808e8e6a7821e6f8cfa76a977431
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 20d4ffbee41965d03d6a989425473dc4
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  monad-parallel-0.7.2.2@monad-parallel-0.7.2.2-DgGZ1OYT6KM5SKZdJnC6sE:Control.Monad.Parallel 3d5939245e33ac38d24f11e881f73827
import  -/  split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split c60198a427bfd51d9fb4562c059ec1d2
import  -/  split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals 25dced234ed01c9c803d678763a4d772
7b480d31e75e0b7aa90cf72fb057f42b
  $fEqFlag :: GHC.Classes.Eq Evolverbetert.Flag
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Evolverbetert.Flag
                  Evolverbetert.$fEqFlag_$c==
                  Evolverbetert.$fEqFlag_$c/= -}
7b480d31e75e0b7aa90cf72fb057f42b
  $fEqFlag_$c/= ::
    Evolverbetert.Flag -> Evolverbetert.Flag -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Evolverbetert.Flag) (b :: Evolverbetert.Flag) ->
                 case Evolverbetert.$fEqFlag_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
7b480d31e75e0b7aa90cf72fb057f42b
  $fEqFlag_$c== ::
    Evolverbetert.Flag -> Evolverbetert.Flag -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Evolverbetert.Flag)
                   (ds1 :: Evolverbetert.Flag) ->
                 case ds of wild {
                   Evolverbetert.Help
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Evolverbetert.Help -> GHC.Types.True }
                   Evolverbetert.OutputFile a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Evolverbetert.OutputFile b1 -> GHC.Base.eqString a1 b1 }
                   Evolverbetert.WorldSeed a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Evolverbetert.WorldSeed b1 -> GHC.Base.eqString a1 b1 }
                   Evolverbetert.AgentSeed a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Evolverbetert.AgentSeed b1 -> GHC.Base.eqString a1 b1 }
                   Evolverbetert.Graphics
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Evolverbetert.Graphics -> GHC.Types.True } }) -}
7b480d31e75e0b7aa90cf72fb057f42b
  $fOrdFlag :: GHC.Classes.Ord Evolverbetert.Flag
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Evolverbetert.Flag
                  Evolverbetert.$fEqFlag
                  Evolverbetert.$fOrdFlag_$ccompare
                  Evolverbetert.$fOrdFlag_$c<
                  Evolverbetert.$fOrdFlag_$c<=
                  Evolverbetert.$fOrdFlag_$c>
                  Evolverbetert.$fOrdFlag_$c>=
                  Evolverbetert.$fOrdFlag_$cmax
                  Evolverbetert.$fOrdFlag_$cmin -}
7b480d31e75e0b7aa90cf72fb057f42b
  $fOrdFlag_$c< ::
    Evolverbetert.Flag -> Evolverbetert.Flag -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Evolverbetert.Flag) (y :: Evolverbetert.Flag) ->
                 case Evolverbetert.$fOrdFlag_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
7b480d31e75e0b7aa90cf72fb057f42b
  $fOrdFlag_$c<= ::
    Evolverbetert.Flag -> Evolverbetert.Flag -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Evolverbetert.Flag) (y :: Evolverbetert.Flag) ->
                 case Evolverbetert.$fOrdFlag_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
7b480d31e75e0b7aa90cf72fb057f42b
  $fOrdFlag_$c> ::
    Evolverbetert.Flag -> Evolverbetert.Flag -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Evolverbetert.Flag) (y :: Evolverbetert.Flag) ->
                 case Evolverbetert.$fOrdFlag_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
7b480d31e75e0b7aa90cf72fb057f42b
  $fOrdFlag_$c>= ::
    Evolverbetert.Flag -> Evolverbetert.Flag -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Evolverbetert.Flag) (y :: Evolverbetert.Flag) ->
                 case Evolverbetert.$fOrdFlag_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
7b480d31e75e0b7aa90cf72fb057f42b
  $fOrdFlag_$ccompare ::
    Evolverbetert.Flag -> Evolverbetert.Flag -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Evolverbetert.Flag)
                   (b :: Evolverbetert.Flag) ->
                 case a of wild {
                   Evolverbetert.Help
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT Evolverbetert.Help -> GHC.Types.EQ }
                   Evolverbetert.OutputFile a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Evolverbetert.Help -> GHC.Types.GT
                        Evolverbetert.OutputFile b1
                        -> GHC.Classes.$fOrd[]_$s$ccompare1 a1 b1 }
                   Evolverbetert.WorldSeed a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Evolverbetert.WorldSeed ds
                        -> GHC.Classes.$fOrd[]_$s$ccompare1 a1 ds
                        Evolverbetert.AgentSeed ds -> GHC.Types.LT
                        Evolverbetert.Graphics -> GHC.Types.LT }
                   Evolverbetert.AgentSeed a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Evolverbetert.AgentSeed b1
                        -> GHC.Classes.$fOrd[]_$s$ccompare1 a1 b1
                        Evolverbetert.Graphics -> GHC.Types.LT }
                   Evolverbetert.Graphics
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Evolverbetert.Graphics -> GHC.Types.EQ } }) -}
7b480d31e75e0b7aa90cf72fb057f42b
  $fOrdFlag_$cmax ::
    Evolverbetert.Flag -> Evolverbetert.Flag -> Evolverbetert.Flag
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Evolverbetert.Flag) (y :: Evolverbetert.Flag) ->
                 case Evolverbetert.$fOrdFlag_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
7b480d31e75e0b7aa90cf72fb057f42b
  $fOrdFlag_$cmin ::
    Evolverbetert.Flag -> Evolverbetert.Flag -> Evolverbetert.Flag
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Evolverbetert.Flag) (y :: Evolverbetert.Flag) ->
                 case Evolverbetert.$fOrdFlag_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
7b480d31e75e0b7aa90cf72fb057f42b
  $fShowFlag :: GHC.Show.Show Evolverbetert.Flag
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Evolverbetert.Flag
                  Evolverbetert.$fShowFlag_$cshowsPrec
                  Evolverbetert.$fShowFlag_$cshow
                  Evolverbetert.$fShowFlag_$cshowList -}
7b480d31e75e0b7aa90cf72fb057f42b
  $fShowFlag1 :: Evolverbetert.Flag -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Evolverbetert.$fShowFlag_$cshowsPrec
                   Evolverbetert.$fShowFlag2) -}
16259fbb383c53643ce1d9e4b557903b
  $fShowFlag2 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 0#) -}
d19357ac76c424788ca573aa02aa2d76
  $fShowFlag3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Graphics"#) -}
f75b2a26943bc227a7878f68bf0c0536
  $fShowFlag4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AgentSeed "#) -}
704600e8fc1ba1f2ee3a2e526cd17cff
  $fShowFlag5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "WorldSeed "#) -}
55ebd25425a9c069a3abcf329472e89a
  $fShowFlag6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OutputFile "#) -}
7d8cdcd178ddcd91f93d92855e892847
  $fShowFlag7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Help"#) -}
05113ae08397232364705031318b75ef
  $fShowFlag8 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows6
                   (GHC.Types.[] @ GHC.Types.Char)) -}
7b480d31e75e0b7aa90cf72fb057f42b
  $fShowFlag_$cshow :: Evolverbetert.Flag -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Evolverbetert.Flag) ->
                 case x of wild {
                   Evolverbetert.Help -> Evolverbetert.$fShowFlag7
                   Evolverbetert.OutputFile b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Evolverbetert.$fShowFlag6
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString b1 Evolverbetert.$fShowFlag8))
                   Evolverbetert.WorldSeed b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Evolverbetert.$fShowFlag5
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString b1 Evolverbetert.$fShowFlag8))
                   Evolverbetert.AgentSeed b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Evolverbetert.$fShowFlag4
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString b1 Evolverbetert.$fShowFlag8))
                   Evolverbetert.Graphics -> Evolverbetert.$fShowFlag3 }) -}
7b480d31e75e0b7aa90cf72fb057f42b
  $fShowFlag_$cshowList :: [Evolverbetert.Flag] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Evolverbetert.Flag
                   Evolverbetert.$fShowFlag1) -}
7b480d31e75e0b7aa90cf72fb057f42b
  $fShowFlag_$cshowsPrec ::
    GHC.Types.Int -> Evolverbetert.Flag -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: Evolverbetert.Flag)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Evolverbetert.Help
                   -> GHC.Base.++ @ GHC.Types.Char Evolverbetert.$fShowFlag7 eta
                   Evolverbetert.OutputFile b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Evolverbetert.$fShowFlag6
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows6
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)))
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Evolverbetert.$fShowFlag6
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows6
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.shows6
                                         (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 eta))))) } }
                   Evolverbetert.WorldSeed b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Evolverbetert.$fShowFlag5
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows6
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)))
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Evolverbetert.$fShowFlag5
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows6
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.shows6
                                         (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 eta))))) } }
                   Evolverbetert.AgentSeed b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Evolverbetert.$fShowFlag4
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows6
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)))
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Evolverbetert.$fShowFlag4
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows6
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.shows6
                                         (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 eta))))) } }
                   Evolverbetert.Graphics
                   -> GHC.Base.++ @ GHC.Types.Char Evolverbetert.$fShowFlag3 eta }) -}
8c6877bb103067b0241e47a9957c196d
  $sconcat :: [[a]] -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (xs :: [[a]]) ->
                 GHC.Base.build
                   @ a
                   (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ [a]
                      @ b
                      (\ (x :: [a]) (y :: b)[OneShot] -> GHC.Base.foldr @ a @ b c y x)
                      n
                      xs)) -}
92ee4a37309a9757beb00af3f0a44fc5
  $tc'AgentSeed :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11862747253261239847##
                   10385155342322832108##
                   Evolverbetert.$trModule
                   Evolverbetert.$tc'AgentSeed1) -}
2e32cd5caf92d84c8e7e3253948fb5d6
  $tc'AgentSeed1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AgentSeed"#) -}
2a998c78572ebd00ea861ec9b401143b
  $tc'Graphics :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7317206437902067628##
                   12512447196355531696##
                   Evolverbetert.$trModule
                   Evolverbetert.$tc'Graphics1) -}
907361347b4990aa15c6d0f86b3f8f49
  $tc'Graphics1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Graphics"#) -}
9a37c098ceb74d8b1616fa9091f39c9c
  $tc'Help :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7423206474674868093##
                   17384931908592161117##
                   Evolverbetert.$trModule
                   Evolverbetert.$tc'Help1) -}
de8ef7d3fe49c2b9b968d88aa5649f51
  $tc'Help1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Help"#) -}
72ce9d29bdfc37a9ce9a37562769df91
  $tc'OutputFile :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8105621629316035677##
                   7414484184910203528##
                   Evolverbetert.$trModule
                   Evolverbetert.$tc'OutputFile1) -}
af060105aa0fdc14f959dc853049626a
  $tc'OutputFile1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'OutputFile"#) -}
400e02fafbf32817bab248be72bdc1e6
  $tc'WorldSeed :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7820496807441572469##
                   14915485693734324462##
                   Evolverbetert.$trModule
                   Evolverbetert.$tc'WorldSeed1) -}
4dfa5f88bc4e2444a88698c492d6fee6
  $tc'WorldSeed1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'WorldSeed"#) -}
1596c4f9070f0bb568fbbcf80a3686c6
  $tcFlag :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10600253425593220822##
                   2731841121587931612##
                   Evolverbetert.$trModule
                   Evolverbetert.$tcFlag1) -}
6047ecf80636523300995d485d1e9d57
  $tcFlag1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Flag"#) -}
87f61cfaa3adceccd22e2de493275805
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Evolverbetert.$trModule2
                   Evolverbetert.$trModule1) -}
397d8cf591a3328a55c63ff1e2e88e60
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Evolverbetert"#) -}
7d6b793b677e28ca186d085b468d5b8d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Evolverbetert-0.1.0.0-V8JIjv9qj8K8hV6s9LpTj"#) -}
547e228d10d1274bca4ca0bd1390806e
  $wchEnv ::
    World.Env
    -> System.Random.Mersenne.Pure64.Internal.PureMT
    -> (# World.Env, System.Random.Mersenne.Pure64.Internal.PureMT #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,1*U(U,U,U(U))>,
     Inline: [0],
     Unfolding: (\ (w :: World.Env)
                   (w1 :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 let {
                   ds :: (GHC.Types.Int,
                          System.Random.Mersenne.Pure64.Internal.PureMT)
                   = case w1 of ww5 { System.Random.Mersenne.Pure64.Internal.PureMT ww6 ww7 ww8 ->
                     case GHC.Prim.indexWord64Array# ww6 ww7 of wild2 { DEFAULT ->
                     case {__pkg_ccall mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV mix_bits GHC.Prim.Word#
                                                                                                                                     -> GHC.Prim.State#
                                                                                                                                          GHC.Prim.RealWorld
                                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                                             GHC.Prim.RealWorld,
                                                                                                                                           GHC.Prim.Word# #)}
                            wild2
                            GHC.Prim.realWorld# of wild { (#,#) ds3 ds4 ->
                     let {
                       x1 :: GHC.Prim.Double#
                       = GHC.Prim./##
                           (GHC.Prim.word2Double# (GHC.Prim.quotWord# ds4 2048##))
                           9.007199254740992e15##
                     } in
                     let {
                       n :: GHC.Prim.Int# = GHC.Prim.double2Int# x1
                     } in
                     let {
                       g' :: System.Random.Mersenne.Pure64.Internal.PureMT
                       = case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.<# ww7 311#) of wild3 {
                           GHC.Types.False
                           -> case ww8 of dt { System.Random.Mersenne.Pure64.Internal.MTBlock dt1 ->
                              System.Random.Mersenne.Pure64.Internal.PureMT
                                dt1
                                0#
                                (System.Random.Mersenne.Pure64.MTBlock.nextBlock dt) }
                           GHC.Types.True
                           -> System.Random.Mersenne.Pure64.Internal.PureMT
                                ww6
                                (GHC.Prim.+# ww7 1#)
                                ww8 }
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<## x1 (GHC.Prim.int2Double# n)) of wild3 {
                       GHC.Types.False
                       -> let {
                            x2 :: GHC.Prim.Int# = GHC.Prim.+# 1# n
                          } in
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<# x2 1#) of wild4 {
                            GHC.Types.False
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.># x2 1#) of wild5 {
                                 GHC.Types.False -> (GHC.Types.I# x2, g')
                                 GHC.Types.True -> (Evolverbetert.chEnv2, g') }
                            GHC.Types.True -> (Evolverbetert.chEnv2, g') }
                       GHC.Types.True
                       -> let {
                            x2 :: GHC.Prim.Int# = GHC.Prim.+# 1# (GHC.Prim.-# n 1#)
                          } in
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<# x2 1#) of wild4 {
                            GHC.Types.False
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.># x2 1#) of wild5 {
                                 GHC.Types.False -> (GHC.Types.I# x2, g')
                                 GHC.Types.True -> (Evolverbetert.chEnv2, g') }
                            GHC.Types.True -> (Evolverbetert.chEnv2, g') } } } } }
                 } in
                 (# case w of wild { GHC.Types.I# x ->
                    case ds of wild1 { (,) a1 s' ->
                    case a1 of wild2 { GHC.Types.I# y ->
                    case GHC.Classes.modInt# (GHC.Prim.+# x y) 2# of ww2 { DEFAULT ->
                    GHC.Types.I# ww2 } } } },
                    case ds of wild { (,) a1 s' -> s' } #)) -}
66c4f96edaaa726ed4fd1a72934518ce
  $wdisplayWorld ::
    World.Agents
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,1*U(A,A,U,U)><S,U>, Inline: [0],
     Unfolding: (\ (ww :: World.Agents)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (case ww of wild { GHC.Arr.Array ds1 ds2 dt ds3 ->
                    let {
                      y :: GHC.Prim.Int# = GHC.Prim.-# dt 1#
                    } in
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.># 0# y) of wild1 {
                      GHC.Types.False
                      -> letrec {
                           go3 :: GHC.Prim.Int# -> [[GHC.Types.Char]]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ (x :: GHC.Prim.Int#) ->
                             GHC.Types.:
                               @ [GHC.Types.Char]
                               (case GHC.Prim.indexArray#
                                       @ World.Agent
                                       ds3
                                       x of ds4 { Unit# ipv ->
                                case ipv of wild2 {
                                  World.Agent a1 a2 -> Evolverbetert.displayWorld6
                                  World.NoAgent -> Evolverbetert.displayWorld5 } })
                               (case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x y) of wild2 {
                                  GHC.Types.False -> go3 (GHC.Prim.+# x 1#)
                                  GHC.Types.True -> GHC.Types.[] @ [GHC.Types.Char] })
                         } in
                         Data.OldList.unlines
                           (GHC.Base.map
                              @ [[GHC.Types.Char]]
                              @ [GHC.Types.Char]
                              (Evolverbetert.$sconcat @ GHC.Types.Char)
                              (Data.List.Split.Internals.chunksOf
                                 @ [GHC.Types.Char]
                                 Parameters.width
                                 (go3 0#)))
                      GHC.Types.True -> Evolverbetert.displayWorld2 } })
                   GHC.Types.True
                   w) -}
9acb572a577d4b05a0a04fc7aa4c59f5
  $wf :: GHC.Prim.Double# -> GHC.Prim.Int# -> GHC.Prim.Double#
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>, Inline: [0] -}
bc16ecbec4825d6d892255b4ba85c816
  $wmainLoop ::
    GHC.IORef.IORef World.World
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,1*U(U)><S,U><S,U>, Inline: [0] -}
1e53bc7fc852bed6435463be40483fd1
  $wnewWorld ::
    World.Agents -> World.Env -> MyRandom.Rand World.World
  {- Arity: 2,
     Strictness: <L,U(U(U(U),U(U)),U(U(U),U(U)),U,U)><L,U(U)>,
     Inline: [0] -}
47910b1d344a1e6765085817d48f7065
  $woutputString ::
    World.Agents -> World.Env -> GHC.Prim.Int# -> GHC.Base.String
  {- Arity: 3, Strictness: <L,1*U(A,A,U,U)><L,1*U(U)><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: World.Agents)
                   (ww1 :: World.Env)
                   (ww2 :: GHC.Prim.Int#) ->
                 case GHC.Show.$wshowSignedInt
                        0#
                        ww2
                        (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                   (GHC.CString.unpackAppendCString#
                      " "#
                      (case ww1 of ww3 { GHC.Types.I# ww7 ->
                       case GHC.Show.$wshowSignedInt
                              0#
                              ww7
                              (GHC.Types.[] @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                       GHC.Base.++
                         @ GHC.Types.Char
                         (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                         (GHC.CString.unpackAppendCString#
                            " "#
                            (case ww of wild { GHC.Arr.Array ds1 ds2 dt ds3 ->
                             let {
                               y :: GHC.Prim.Int# = GHC.Prim.-# dt 1#
                             } in
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.># 0# y) of wild1 {
                               GHC.Types.False
                               -> letrec {
                                    go3 :: GHC.Prim.Int# -> [GHC.Types.Int]
                                      {- Arity: 1, Strictness: <L,U> -}
                                    = \ (x :: GHC.Prim.Int#) ->
                                      GHC.Types.:
                                        @ GHC.Types.Int
                                        (case GHC.Prim.indexArray#
                                                @ World.Agent
                                                ds3
                                                x of ds4 { Unit# ipv ->
                                         case World.$whammDistAg ipv ww3 of ww11 { DEFAULT ->
                                         GHC.Types.I# ww11 } })
                                        (case GHC.Prim.tagToEnum#
                                                @ GHC.Types.Bool
                                                (GHC.Prim.==# x y) of wild2 {
                                           GHC.Types.False -> go3 (GHC.Prim.+# x 1#)
                                           GHC.Types.True -> GHC.Types.[] @ GHC.Types.Int })
                                  } in
                                  case go3 0# of wild2 {
                                    [] -> case GHC.List.minimum2 ret_ty [GHC.Types.Char] of {}
                                    : ipv ipv1
                                    -> case ipv of ww11 { GHC.Types.I# ww12 ->
                                       case GHC.List.$wgo1 ipv1 ww12 of ww13 { DEFAULT ->
                                       case GHC.Show.$wshowSignedInt
                                              0#
                                              ww13
                                              (GHC.Types.[]
                                                 @ GHC.Types.Char) of ww14 { (#,#) ww15 ww16 ->
                                       GHC.Types.: @ GHC.Types.Char ww15 ww16 } } } }
                               GHC.Types.True
                               -> case GHC.List.minimum2
                                  ret_ty [GHC.Types.Char]
                                  of {} } })) } })) }) -}
df4dcaa0c22205c0759d580f68f4af19
  $wreproduceAgent ::
    World.Agents
    -> World.Env
    -> (GHC.Types.Int, GHC.Types.Int)
    -> System.Random.Mersenne.Pure64.Internal.PureMT
    -> (# World.Agent, System.Random.Mersenne.Pure64.Internal.PureMT #)
  {- Arity: 4,
     Strictness: <L,1*U(U(1*U(U),1*U(U)),U(1*U(U),1*U(U)),U,U)><L,U(U)><L,1*U(1*U(U),1*U(U))><L,1*U(U,U,U(U))>,
     Inline: [0] -}
7b480d31e75e0b7aa90cf72fb057f42b
  data Flag
    = Help
    | OutputFile GHC.Base.String
    | WorldSeed GHC.Base.String
    | AgentSeed GHC.Base.String
    | Graphics
7d4e09118393abcb02ae857fbcf12571
  chEnv :: World.Env -> MyRandom.Rand World.Env
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(U)><L,1*U(U,U,U(U))>m,
     Unfolding: InlineRule (0, True, True)
                Evolverbetert.chEnv1
                  `cast`
                (<World.Env>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                               <Data.Functor.Identity.Identity>_R
                               <World.Env>_N)) -}
da78bce9bec114195b0dd05944eb6ada
  chEnv1 ::
    World.Env
    -> System.Random.Mersenne.Pure64.Internal.PureMT
    -> Data.Functor.Identity.Identity
         (World.Env, System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(U)><L,1*U(U,U,U(U))>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Env)
                   (w1 :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case Evolverbetert.$wchEnv w w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <(World.Env,
                             System.Random.Mersenne.Pure64.Internal.PureMT)>_R)) }) -}
1f32ad7d6ed6aba2b6bf8c43a6dbc3f0
  chEnv2 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 1#) -}
fe0525b7e9c69b325c42992afe258009
  compilerOpts ::
    [GHC.Base.String]
    -> GHC.Types.IO ([Evolverbetert.Flag], [GHC.Base.String])
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Evolverbetert.compilerOpts1
                  `cast`
                (<[GHC.Base.String]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <([Evolverbetert.Flag], [GHC.Base.String])>_R)) -}
a70cc89e01447107cad3894c6eb297e6
  compilerOpts1 ::
    [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ([Evolverbetert.Flag], [GHC.Base.String]) #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (argv :: [GHC.Base.String])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Console.GetOpt.$wgetOpt'
                        @ Evolverbetert.Flag
                        (System.Console.GetOpt.Permute @ Evolverbetert.Flag)
                        Evolverbetert.options
                        argv of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                 case GHC.Base.++
                        @ [GHC.Types.Char]
                        ww4
                        (GHC.Base.map
                           @ [GHC.Types.Char]
                           @ [GHC.Types.Char]
                           System.Console.GetOpt.errUnrec
                           ww3) of wild {
                   [] -> (# eta, (ww1, ww2) #)
                   : ipv ipv1
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.SomeException
                        @ ([Evolverbetert.Flag], [GHC.Base.String])
                        (GHC.IO.Exception.$fExceptionIOException_$ctoException
                           (GHC.IO.Exception.IOError
                              (GHC.Base.Nothing @ GHC.IO.Handle.Types.Handle)
                              GHC.IO.Exception.UserError
                              (GHC.Types.[] @ GHC.Types.Char)
                              (Evolverbetert.compilerOpts_go wild)
                              (GHC.Base.Nothing @ Foreign.C.Types.CInt)
                              (GHC.Base.Nothing @ GHC.IO.FilePath)))
                        eta } }) -}
83201e1edd35fa84376c290a2323b778
  compilerOpts_go :: [[GHC.Types.Char]] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
1239fe88c91f199180083fa90b03d334
  consoleOutput :: World.World -> Parameters.Time -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <L,1*U(1*U(A,A,U,U),1*U(U))><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Evolverbetert.consoleOutput1
                  `cast`
                (<World.World>_R
                 ->_R <Parameters.Time>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
47fd5a3357b147ff93dd8beaffa90896
  consoleOutput1 ::
    World.World
    -> Parameters.Time
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <L,1*U(1*U(A,A,U,U),1*U(U))><L,1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (w :: World.World)
                   (t :: Parameters.Time)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (Evolverbetert.outputString w t)
                   GHC.Types.True
                   eta) -}
450f0c8a3b807507e2ae02a458ed8298
  displayWorld :: World.World -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S,1*U(1*U(A,A,U,U),A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Evolverbetert.displayWorld1
                  `cast`
                (<World.World>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
e0690d2f74096605f971a65a0eae85cb
  displayWorld1 ::
    World.World
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U(1*U(A,A,U,U),A)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.World)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { (,) ww1 ww2 ->
                 Evolverbetert.$wdisplayWorld ww1 w1 }) -}
960c52e4a91abac4a5596e6bb60dbaa1
  displayWorld2 :: GHC.Base.String
  {- Unfolding: (Data.OldList.unlines Evolverbetert.displayWorld3) -}
632fd492206d3a2e955e7184d63f9176
  displayWorld3 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Base.map
                   @ [[GHC.Types.Char]]
                   @ [GHC.Types.Char]
                   (Evolverbetert.$sconcat @ GHC.Types.Char)
                   Evolverbetert.displayWorld4) -}
94896f56f86ac7c16a4b6d14148161a2
  displayWorld4 :: [[[GHC.Types.Char]]]
  {- Unfolding: (Data.List.Split.Internals.chunksOf
                   @ [GHC.Types.Char]
                   Parameters.width
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
e895a9b3686a3e7122481e7dcd5adb39
  displayWorld5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " "#) -}
4a4693f6a0bf174af10991afea184ba5
  displayWorld6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "o"#) -}
38376e4ecdf81ee09391e31b21c88aeb
  fileOutput :: World.World -> Parameters.Time -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <L,1*U(1*U(A,A,U,U),1*U(U))><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Evolverbetert.fileOutput1
                  `cast`
                (<World.World>_R
                 ->_R <Parameters.Time>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
132148b590545c09e6a771bf875bc073
  fileOutput1 ::
    World.World
    -> Parameters.Time
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <L,1*U(1*U(A,A,U,U),1*U(U))><L,1*U(U)><S,U>,
     Unfolding: (\ (w :: World.World)
                   (t :: Parameters.Time)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 System.IO.appendFile1
                   Parameters.defaultOutputFile
                   (case w of ww { (,) ww1 ww2 ->
                    case t of ww3 { GHC.Types.I# ww4 ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      (Evolverbetert.$woutputString ww1 ww2 ww4)
                      Evolverbetert.fileOutput2 } })
                   eta) -}
6639942f70cd97dcf402dcd7e4aa1e21
  fileOutput2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\n"#) -}
15866dabcb3ba63e6282a355d486ae83
  initialize ::
    [Evolverbetert.Flag] -> GHC.Types.IO (GHC.IORef.IORef World.World)
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Evolverbetert.initialize1
                  `cast`
                (<[Evolverbetert.Flag]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.IORef.IORef World.World>_R)) -}
c332b530e0183dcbf67c311456fa1b11
  initialize1 ::
    [Evolverbetert.Flag]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.IORef.IORef World.World #)
  {- Arity: 2, Strictness: <S,U><S,U> -}
98e848e62fb0e59651df9f427bc3fafe
  isAgentSeed :: Evolverbetert.Flag -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Evolverbetert.Flag) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Evolverbetert.AgentSeed ds1 -> GHC.Types.True }) -}
9ae85f281430f772b7918490647f3ff6
  isGraphics :: Evolverbetert.Flag -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Evolverbetert.Flag) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Evolverbetert.Graphics -> GHC.Types.True }) -}
8e90bdc12b17b82691a27d7da8245fed
  isHelp :: Evolverbetert.Flag -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Evolverbetert.Flag) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Evolverbetert.Help -> GHC.Types.True }) -}
183943855811d6fcfede2d1b61ceac5a
  isOutputFile :: Evolverbetert.Flag -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Evolverbetert.Flag) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Evolverbetert.OutputFile ds1 -> GHC.Types.True }) -}
4c34a3d9bff2f9b838df30d817a57858
  isWorldSeed :: Evolverbetert.Flag -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Evolverbetert.Flag) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Evolverbetert.WorldSeed ds1 -> GHC.Types.True }) -}
0f99b413340373b238a1675131f71f73
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Evolverbetert.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
efef68b6de3296de70e2f122e9abd2d3
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Environment.getArgs1 s of ds1 { (#,#) ipv ipv1 ->
                 case Evolverbetert.compilerOpts1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild { (,) flags strings ->
                 case Evolverbetert.initialize1
                        flags
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Evolverbetert.main5
                        GHC.Types.True
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case Evolverbetert.$wmainLoop
                        ipv5
                        0#
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Evolverbetert.main2
                   GHC.Types.True
                   ipv8 } } } } } }) -}
4856bf14a5642338c69bbc6cb7c638ac
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows6
                   Evolverbetert.main3) -}
22ac96c1600d29a0b465a116c7866608
  main3 :: GHC.Base.String
  {- Unfolding: (GHC.Show.showLitString
                   Evolverbetert.main4
                   Evolverbetert.$fShowFlag8) -}
4d38c04a93b4a549a1a6c7f2fbaaf5c5
  main4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Goodbye World!"#) -}
032c4358f2972114ddfad48788fd53e1
  main5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows6
                   Evolverbetert.main6) -}
4741668e37c517a77eb62204c9eae761
  main6 :: GHC.Base.String
  {- Unfolding: (GHC.Show.showLitString
                   Evolverbetert.main7
                   Evolverbetert.$fShowFlag8) -}
70f8632775da03cef0cda96dc7187d43
  main7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Hello, World!"#) -}
93d6a0582c14a20b62750aff4b472204
  mainLoop ::
    GHC.IORef.IORef World.World -> Parameters.Time -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Evolverbetert.mainLoop1
                  `cast`
                (<GHC.IORef.IORef World.World>_R
                 ->_R <Parameters.Time>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
26e913d44fd87a999f44268756a8e9a3
  mainLoop1 ::
    GHC.IORef.IORef World.World
    -> Parameters.Time
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.IORef.IORef World.World)
                   (w1 :: Parameters.Time)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Evolverbetert.$wmainLoop w ww1 w2 }) -}
8525b8c59e320cd3ff82f7f7fe08cf18
  newAssoc ::
    World.World
    -> ((GHC.Types.Int, GHC.Types.Int), World.Agent)
    -> MyRandom.Rand ((GHC.Types.Int, GHC.Types.Int), World.Agent)
  {- Arity: 3,
     Strictness: <L,1*U(1*U(U(1*U(U),1*U(U)),U(1*U(U),1*U(U)),U,U),U(U))><S,1*U(U(U(U),U(U)),A)><L,1*U(U,U,U(U))>m,
     Unfolding: InlineRule (0, True, True)
                Evolverbetert.newAssoc1
                  `cast`
                (<World.World>_R
                 ->_R <((GHC.Types.Int, GHC.Types.Int), World.Agent)>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                               <Data.Functor.Identity.Identity>_R
                               <((GHC.Types.Int, GHC.Types.Int), World.Agent)>_N)) -}
2ca7620d9d88ecceed407955a0e273c0
  newAssoc1 ::
    World.World
    -> ((GHC.Types.Int, GHC.Types.Int), World.Agent)
    -> System.Random.Mersenne.Pure64.Internal.PureMT
    -> Data.Functor.Identity.Identity
         (((GHC.Types.Int, GHC.Types.Int), World.Agent),
          System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 3,
     Strictness: <L,1*U(1*U(U(1*U(U),1*U(U)),U(1*U(U),1*U(U)),U,U),U(U))><S,1*U(U(U(U),U(U)),A)><L,1*U(U,U,U(U))>m,
     Unfolding: InlineRule (3, True, False)
                (\ (w :: World.World)
                   (ds :: ((GHC.Types.Int, GHC.Types.Int), World.Agent))
                   (eta :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case ds of wild { (,) ix ag ->
                 let {
                   ds1 :: Data.Functor.Identity.Identity
                            (World.Agent, System.Random.Mersenne.Pure64.Internal.PureMT)
                   = Evolverbetert.newAssoc2 w ix eta
                 } in
                 ((ix,
                   case ds1
                          `cast`
                        (Data.Functor.Identity.N:Identity[0]
                             <(World.Agent,
                               System.Random.Mersenne.Pure64.Internal.PureMT)>_R) of wild1 { (,) a1 s' ->
                   a1 }),
                  case ds1
                         `cast`
                       (Data.Functor.Identity.N:Identity[0]
                            <(World.Agent,
                              System.Random.Mersenne.Pure64.Internal.PureMT)>_R) of wild1 { (,) a1 s' ->
                  s' })
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <(((GHC.Types.Int, GHC.Types.Int), World.Agent),
                             System.Random.Mersenne.Pure64.Internal.PureMT)>_R)) }) -}
7a4bbcdf1720b2911c5bd601c8fd5745
  newAssoc2 ::
    (World.Agents, World.Env)
    -> (GHC.Types.Int, GHC.Types.Int)
    -> System.Random.Mersenne.Pure64.Internal.PureMT
    -> Data.Functor.Identity.Identity
         (World.Agent, System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 3,
     Strictness: <S,1*U(1*U(U(1*U(U),1*U(U)),U(1*U(U),1*U(U)),U,U),U(U))><L,1*U(1*U(U),1*U(U))><L,1*U(U,U,U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: (World.Agents, World.Env))
                   (w1 :: (GHC.Types.Int, GHC.Types.Int))
                   (w2 :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case w of ww { (,) ww1 ww2 ->
                 case Evolverbetert.$wreproduceAgent
                        ww1
                        ww2
                        w1
                        w2 of ww3 { (#,#) ww4 ww5 ->
                 (ww4, ww5)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <(World.Agent,
                             System.Random.Mersenne.Pure64.Internal.PureMT)>_R)) } }) -}
d7725840fc5aec63d0d895ab71d79749
  newWorld :: World.World -> MyRandom.Rand World.World
  {- Arity: 1,
     Strictness: <S,1*U(U(U(U(U),U(U)),U(U(U),U(U)),U,U),U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: World.World) ->
                 case w of ww { (,) ww1 ww2 ->
                 Evolverbetert.$wnewWorld ww1 ww2 }) -}
78f694915dbe8110c6f3a1db95f970bd
  options :: [System.Console.GetOpt.OptDescr Evolverbetert.Flag]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (System.Console.GetOpt.OptDescr Evolverbetert.Flag)
                   Evolverbetert.options35
                   Evolverbetert.options1) -}
34847a00fa7d9f370b3aee699162dfda
  options1 :: [System.Console.GetOpt.OptDescr Evolverbetert.Flag]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (System.Console.GetOpt.OptDescr Evolverbetert.Flag)
                   Evolverbetert.options28
                   Evolverbetert.options2) -}
aae240edcb95e74ae06aec5f9d42e20f
  options10 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Evolverbetert.options11
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b91f44e4c3be763187954e73f769b059
  options11 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'g'#) -}
90ffdd5ac81b107cb68d24c900c644bd
  options12 :: System.Console.GetOpt.OptDescr Evolverbetert.Flag
  {- Strictness: m,
     Unfolding: (System.Console.GetOpt.Option
                   @ Evolverbetert.Flag
                   Evolverbetert.options18
                   Evolverbetert.options16
                   Evolverbetert.options14
                   Evolverbetert.options13) -}
b1cc45786d8e07246d10961105757de5
  options13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "output file"#) -}
15da3e980b19d81481898c7e902ec62f
  options14 :: System.Console.GetOpt.ArgDescr Evolverbetert.Flag
  {- Strictness: m2,
     Unfolding: (System.Console.GetOpt.ReqArg
                   @ Evolverbetert.Flag
                   Evolverbetert.OutputFile
                   Evolverbetert.options15) -}
2e8ade1b9c98347ae5d1520c8c8d5f5c
  options15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FILEPATH"#) -}
ff831001751a297504ede37a78aa13c6
  options16 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Evolverbetert.options17
                   (GHC.Types.[] @ GHC.Base.String)) -}
e7489b2a0b79e89b4d3908a903fa4ec5
  options17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "output-file"#) -}
c94aece687baeebd8387b350ca8995d2
  options18 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Evolverbetert.options19
                   (GHC.Types.[] @ GHC.Types.Char)) -}
35ccbf694bfc13e18583afb5980c20b9
  options19 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'o'#) -}
0d31c924e6fb50c0fa4c46cd17f1a2f1
  options2 :: [System.Console.GetOpt.OptDescr Evolverbetert.Flag]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (System.Console.GetOpt.OptDescr Evolverbetert.Flag)
                   Evolverbetert.options20
                   Evolverbetert.options3) -}
253e3f445eae14bffd7757858c7c32d4
  options20 :: System.Console.GetOpt.OptDescr Evolverbetert.Flag
  {- Strictness: m,
     Unfolding: (System.Console.GetOpt.Option
                   @ Evolverbetert.Flag
                   Evolverbetert.options26
                   Evolverbetert.options24
                   Evolverbetert.options22
                   Evolverbetert.options21) -}
551ab00b6649dd15ec1038b23f0a750b
  options21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "give the seed for the first agent RNG (default: 420)"#) -}
b273540ab455b29428039eabadab5962
  options22 :: System.Console.GetOpt.ArgDescr Evolverbetert.Flag
  {- Strictness: m2,
     Unfolding: (System.Console.GetOpt.ReqArg
                   @ Evolverbetert.Flag
                   Evolverbetert.AgentSeed
                   Evolverbetert.options23) -}
263ef6a5be229a53c8b7419842ed1b83
  options23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INT"#) -}
d1e13f01c2e7a6998c227f6a0acf0d4e
  options24 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Evolverbetert.options25
                   (GHC.Types.[] @ GHC.Base.String)) -}
e472f529c7d02409405be265f2726c53
  options25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "agent-seed"#) -}
adc19286b14c6d3ebbc7f9fb2819d15b
  options26 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Evolverbetert.options27
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2580437ae03659d75c8c767245bd1db5
  options27 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'a'#) -}
ec1f431093534f37e5fe17a80f337d6f
  options28 :: System.Console.GetOpt.OptDescr Evolverbetert.Flag
  {- Strictness: m,
     Unfolding: (System.Console.GetOpt.Option
                   @ Evolverbetert.Flag
                   Evolverbetert.options33
                   Evolverbetert.options31
                   Evolverbetert.options30
                   Evolverbetert.options29) -}
1b393f4e1217ec3e71d18be976546a09
  options29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "give the seed for the world RNG (default: 420)"#) -}
cf6e84b2e29f5b997bd0ee4d4c2190eb
  options3 :: [System.Console.GetOpt.OptDescr Evolverbetert.Flag]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (System.Console.GetOpt.OptDescr Evolverbetert.Flag)
                   Evolverbetert.options12
                   Evolverbetert.options4) -}
0eca9792f80c1f723094a002f0c53167
  options30 :: System.Console.GetOpt.ArgDescr Evolverbetert.Flag
  {- Strictness: m2,
     Unfolding: (System.Console.GetOpt.ReqArg
                   @ Evolverbetert.Flag
                   Evolverbetert.WorldSeed
                   Evolverbetert.options23) -}
bb7e5bde712ae5f68de86ed0f45e5f6f
  options31 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Evolverbetert.options32
                   (GHC.Types.[] @ GHC.Base.String)) -}
1c0ff86315369c8bcea6fc2766a72d23
  options32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "world-seed"#) -}
fd4a87fc1bbb888b3045ad120ac425ce
  options33 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Evolverbetert.options34
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d18483076a12d4c5209181e4c8002c49
  options34 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'w'#) -}
9090e9d85ffc022d0e7aee7457916c7e
  options35 :: System.Console.GetOpt.OptDescr Evolverbetert.Flag
  {- Strictness: m,
     Unfolding: (System.Console.GetOpt.Option
                   @ Evolverbetert.Flag
                   Evolverbetert.options40
                   Evolverbetert.options38
                   Evolverbetert.options37
                   Evolverbetert.options36) -}
a09baae0eea8183ec848a79b993fa23e
  options36 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "display this help info"#) -}
437d29dbad42b02a4c214aaad9ad7f3e
  options37 :: System.Console.GetOpt.ArgDescr Evolverbetert.Flag
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (System.Console.GetOpt.NoArg
                   @ Evolverbetert.Flag
                   Evolverbetert.Help) -}
5880ed273cd72c30bb9aa1f59e611505
  options38 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Evolverbetert.options39
                   (GHC.Types.[] @ GHC.Base.String)) -}
f003fb133411b7dc48c8b16b4b2cdb9a
  options39 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "help"#) -}
61b005a90820e9a764f1edc63dfccb93
  options4 :: [System.Console.GetOpt.OptDescr Evolverbetert.Flag]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (System.Console.GetOpt.OptDescr Evolverbetert.Flag)
                   Evolverbetert.options5
                   (GHC.Types.[]
                      @ (System.Console.GetOpt.OptDescr Evolverbetert.Flag))) -}
eee3f3ad5fd1b999a697cf7bb6f98574
  options40 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Evolverbetert.options41
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e323a33112dd0b95e9f85ac0233c2f8b
  options41 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'h'#) -}
d1ce0cc0f5cc796950f3f8a4988a7341
  options5 :: System.Console.GetOpt.OptDescr Evolverbetert.Flag
  {- Strictness: m,
     Unfolding: (System.Console.GetOpt.Option
                   @ Evolverbetert.Flag
                   Evolverbetert.options10
                   Evolverbetert.options8
                   Evolverbetert.options7
                   Evolverbetert.options6) -}
f20622806ad4b4e9da402426a630d808
  options6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "display CA in a window"#) -}
d2788b225431a25643f7c9c6425effa7
  options7 :: System.Console.GetOpt.ArgDescr Evolverbetert.Flag
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (System.Console.GetOpt.NoArg
                   @ Evolverbetert.Flag
                   Evolverbetert.Graphics) -}
ccece1a7424121e64f43e83486a39133
  options8 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Evolverbetert.options9
                   (GHC.Types.[] @ GHC.Base.String)) -}
45e0438e0173432aca6c942541b70f45
  options9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "graphics"#) -}
6a4c415379310f9a14d899e660c882bb
  outputString :: World.World -> Parameters.Time -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U(1*U(A,A,U,U),1*U(U))><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.World) (w1 :: Parameters.Time) ->
                 case w of ww { (,) ww1 ww2 ->
                 case w1 of ww3 { GHC.Types.I# ww4 ->
                 Evolverbetert.$woutputString ww1 ww2 ww4 } }) -}
1b19d5b642c385f19561fc7fa74fb7bd
  reproduceAgent ::
    World.World
    -> (GHC.Types.Int, GHC.Types.Int) -> MyRandom.Rand World.Agent
  {- Arity: 3,
     Strictness: <S,1*U(1*U(U(1*U(U),1*U(U)),U(1*U(U),1*U(U)),U,U),U(U))><L,1*U(1*U(U),1*U(U))><L,1*U(U,U,U(U))>m,
     Unfolding: InlineRule (0, True, True)
                Evolverbetert.newAssoc2
                  `cast`
                (<(World.Agents, World.Env)>_R
                 ->_R <(GHC.Types.Int, GHC.Types.Int)>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                               <Data.Functor.Identity.Identity>_R
                               <World.Agent>_N)) -}
instance GHC.Classes.Eq [Evolverbetert.Flag]
  = Evolverbetert.$fEqFlag
instance GHC.Classes.Ord [Evolverbetert.Flag]
  = Evolverbetert.$fOrdFlag
instance GHC.Show.Show [Evolverbetert.Flag]
  = Evolverbetert.$fShowFlag
"SPEC/Evolverbetert concat @ [] _" [ALWAYS] forall @ a
                                                   ($dFoldable :: Data.Foldable.Foldable [])
  Data.Foldable.concat @ [] @ a $dFoldable
  = Evolverbetert.$sconcat @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

