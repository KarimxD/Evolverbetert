
==================== FINAL INTERFACE ====================
2017-04-18 14:25:47.407303 UTC

interface Evolverbetert-0.1.0.0-V8JIjv9qj8K8hV6s9LpTj:MyRandom [orphan module] 8002
  interface hash: 416bfec34eabf6d7c9a43422c20f9abd
  ABI hash: 33611e374b56347aadc8c80984a9fa4c
  export-list hash: 3a660b6271794f39dcef688ebf3015a0
  orphan hash: c31f58e96e6489722cb88a68618a7380
  flag hash: ab396f11155bd696ab63895436e6f1df
  sig of: Nothing
  used TH splices: False
  where
exports:
  MyRandom.evalRand
  MyRandom.getBool
  MyRandom.getDouble
  MyRandom.getModifyRand
  MyRandom.getMyStdGen
  MyRandom.getMyStdRandom
  MyRandom.getRange
  MyRandom.pureMT
  MyRandom.randomBool
  MyRandom.runRand
  MyRandom.setMyStdGen
  MyRandom.Rand
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.IORef 71c87b0b25a8bca3e3f4497725f5e543
import  -/  base-4.9.1.0:Data.Int 07f5a36c488acfe0ac32e81c7536b8ff
import  -/  base-4.9.1.0:Data.Word 77f42e01d0fb6b071f1ea2176d87fa6c
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.IO.Unsafe 1c057c642b0e201f55a24585d3d94564
import  -/  base-4.9.1.0:GHC.IORef 306bd532f2f3b000347cbe6316adc20e
import  -/  base-4.9.1.0:GHC.Int e6f85fcab22769385fba2b5fce0acb40
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Word 2f8cb4e909eeef2f95e1563807dd9268
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO.Unsafe 1e3c5b8dd8cf6850ae43cce967bb46cd
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV:System.Random.Mersenne.Pure64.Base d1453b58a2613d9dcc6601dc89046ef9
import  -/  mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV:System.Random.Mersenne.Pure64.Internal bb3ed118165b97070d684375c016de56
import  -/  mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV:System.Random.Mersenne.Pure64.MTBlock a859128aff3c78db6db1843a6587e4f7
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State 749dca8ca0e6625b32091d445bd92b01
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State.Class 6d31234b0a911b56412061943d18b89e
import  -/  random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog:System.Random b21db0c0ea43dc1ad218556cd0b064c7
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.State.Lazy 371607e50dde46b5f4103b3ab334a497
61dd9c539466293e15bbaeda381b4642
  $fRandomGenPureMT ::
    System.Random.RandomGen
      System.Random.Mersenne.Pure64.Internal.PureMT
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ System.Random.Mersenne.Pure64.Internal.PureMT
                  MyRandom.$fRandomGenPureMT_$cnext
                  MyRandom.$fRandomGenPureMT_$s$dmgenRange
                  MyRandom.$fRandomGenPureMT_$csplit -}
33de406b261ace82632ddafa15b3c892
  $fRandomGenPureMT_$cnext ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (GHC.Types.Int, System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U,U,U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case MyRandom.$w$cnext w of ww { (#,#) ww1 ww2 -> (ww1, ww2) }) -}
d9ba96fa2fd0ac7c364ab8ecf4e20432
  $fRandomGenPureMT_$csplit ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (System.Random.Mersenne.Pure64.Internal.PureMT,
        System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U,U,U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case MyRandom.$w$csplit w of ww { (#,#) ww1 ww2 -> (ww1, ww2) }) -}
448dc5736731cc64a822099ccddba41a
  $fRandomGenPureMT_$s$dmgenRange ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (-1, True, False)
                (\ (ds :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 (GHC.Base.minInt, GHC.Base.maxInt)) -}
27f1a6be040272b952e31b4989a8f9ff
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   MyRandom.$trModule2
                   MyRandom.$trModule1) -}
7698e1d6abb9fe06a9d670cacd92ff9a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "MyRandom"#) -}
54655101848c5cda92f2e6113c248485
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Evolverbetert-0.1.0.0-V8JIjv9qj8K8hV6s9LpTj"#) -}
c4049ffd95bed5f9ca98c83cbb3a91ed
  $w$cnext ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (# GHC.Types.Int,
          System.Random.Mersenne.Pure64.Internal.PureMT #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U,U,U(U))>,
     Inline: [0],
     Unfolding: (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 let {
                   ds :: (GHC.Word.Word64,
                          System.Random.Mersenne.Pure64.Internal.PureMT)
                   = case w of wild { System.Random.Mersenne.Pure64.Internal.PureMT dt dt1 nxt ->
                     (case GHC.Prim.indexWord64Array# dt dt1 of wild2 { DEFAULT ->
                      case {__pkg_ccall mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV mix_bits GHC.Prim.Word#
                                                                                                                                      -> GHC.Prim.State#
                                                                                                                                           GHC.Prim.RealWorld
                                                                                                                                      -> (# GHC.Prim.State#
                                                                                                                                              GHC.Prim.RealWorld,
                                                                                                                                            GHC.Prim.Word# #)}
                             wild2
                             GHC.Prim.realWorld# of wild1 { (#,#) ds3 ds4 ->
                      GHC.Word.W64# ds4 } },
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# dt1 311#) of wild1 {
                        GHC.Types.False
                        -> case nxt of dt2 { System.Random.Mersenne.Pure64.Internal.MTBlock dt3 ->
                           System.Random.Mersenne.Pure64.Internal.PureMT
                             dt3
                             0#
                             (System.Random.Mersenne.Pure64.MTBlock.nextBlock dt2) }
                        GHC.Types.True
                        -> System.Random.Mersenne.Pure64.Internal.PureMT
                             dt
                             (GHC.Prim.+# dt1 1#)
                             nxt }) }
                 } in
                 (# case ds of wild { (,) i g' ->
                    case i of wild1 { GHC.Word.W64# x# ->
                    GHC.Types.I# (GHC.Prim.word2Int# x#) } },
                    case ds of wild { (,) i g' -> g' } #)) -}
04f31db105e09ebc25d3cbe378dffc66
  $w$csplit ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (# System.Random.Mersenne.Pure64.Internal.PureMT,
          System.Random.Mersenne.Pure64.Internal.PureMT #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U,U,U(U))>,
     Inline: [0],
     Unfolding: (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 let {
                   ds :: (GHC.Word.Word64,
                          System.Random.Mersenne.Pure64.Internal.PureMT)
                   = case w of wild { System.Random.Mersenne.Pure64.Internal.PureMT dt dt1 nxt ->
                     (case GHC.Prim.indexWord64Array# dt dt1 of wild2 { DEFAULT ->
                      case {__pkg_ccall mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV mix_bits GHC.Prim.Word#
                                                                                                                                      -> GHC.Prim.State#
                                                                                                                                           GHC.Prim.RealWorld
                                                                                                                                      -> (# GHC.Prim.State#
                                                                                                                                              GHC.Prim.RealWorld,
                                                                                                                                            GHC.Prim.Word# #)}
                             wild2
                             GHC.Prim.realWorld# of wild1 { (#,#) ds3 ds4 ->
                      GHC.Word.W64# ds4 } },
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# dt1 311#) of wild1 {
                        GHC.Types.False
                        -> case nxt of dt2 { System.Random.Mersenne.Pure64.Internal.MTBlock dt3 ->
                           System.Random.Mersenne.Pure64.Internal.PureMT
                             dt3
                             0#
                             (System.Random.Mersenne.Pure64.MTBlock.nextBlock dt2) }
                        GHC.Types.True
                        -> System.Random.Mersenne.Pure64.Internal.PureMT
                             dt
                             (GHC.Prim.+# dt1 1#)
                             nxt }) }
                 } in
                 (# case ds of wild { (,) s g' ->
                    case System.Random.Mersenne.Pure64.MTBlock.seedBlock
                           s of dt { System.Random.Mersenne.Pure64.Internal.MTBlock dt1 ->
                    System.Random.Mersenne.Pure64.Internal.PureMT
                      dt1
                      0#
                      (System.Random.Mersenne.Pure64.MTBlock.nextBlock dt) } },
                    case ds of wild { (,) s g' ->
                    case g' of wild1 { System.Random.Mersenne.Pure64.Internal.PureMT dt dt1 nxt ->
                    case GHC.Prim.indexWord64Array# dt dt1 of wild2 { DEFAULT ->
                    case {__pkg_ccall mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV mix_bits GHC.Prim.Word#
                                                                                                                                    -> GHC.Prim.State#
                                                                                                                                         GHC.Prim.RealWorld
                                                                                                                                    -> (# GHC.Prim.State#
                                                                                                                                            GHC.Prim.RealWorld,
                                                                                                                                          GHC.Prim.Word# #)}
                           wild2
                           GHC.Prim.realWorld# of wild3 { (#,#) ds3 ds4 ->
                    case System.Random.Mersenne.Pure64.MTBlock.seedBlock
                           (GHC.Word.W64#
                              ds4) of dt2 { System.Random.Mersenne.Pure64.Internal.MTBlock dt3 ->
                    System.Random.Mersenne.Pure64.Internal.PureMT
                      dt3
                      0#
                      (System.Random.Mersenne.Pure64.MTBlock.nextBlock
                         dt2) } } } } } #)) -}
a362232d4892c7fedfc5aa2945de3095
  $wgetDouble ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (# GHC.Types.Double,
          System.Random.Mersenne.Pure64.Internal.PureMT #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U,U,U(U))>,
     Inline: [0],
     Unfolding: (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 let {
                   ds :: (GHC.Word.Word64,
                          System.Random.Mersenne.Pure64.Internal.PureMT)
                   = case w of wild { System.Random.Mersenne.Pure64.Internal.PureMT dt dt1 nxt ->
                     (case GHC.Prim.indexWord64Array# dt dt1 of wild2 { DEFAULT ->
                      case {__pkg_ccall mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV mix_bits GHC.Prim.Word#
                                                                                                                                      -> GHC.Prim.State#
                                                                                                                                           GHC.Prim.RealWorld
                                                                                                                                      -> (# GHC.Prim.State#
                                                                                                                                              GHC.Prim.RealWorld,
                                                                                                                                            GHC.Prim.Word# #)}
                             wild2
                             GHC.Prim.realWorld# of wild1 { (#,#) ds3 ds4 ->
                      GHC.Word.W64# ds4 } },
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# dt1 311#) of wild1 {
                        GHC.Types.False
                        -> case nxt of dt2 { System.Random.Mersenne.Pure64.Internal.MTBlock dt3 ->
                           System.Random.Mersenne.Pure64.Internal.PureMT
                             dt3
                             0#
                             (System.Random.Mersenne.Pure64.MTBlock.nextBlock dt2) }
                        GHC.Types.True
                        -> System.Random.Mersenne.Pure64.Internal.PureMT
                             dt
                             (GHC.Prim.+# dt1 1#)
                             nxt }) }
                 } in
                 (# case ds of wild { (,) i g' ->
                    case i of wild1 { GHC.Word.W64# x# ->
                    GHC.Types.D#
                      (GHC.Prim./##
                         (GHC.Prim.word2Double# (GHC.Prim.quotWord# x# 2048##))
                         9.007199254740992e15##) } },
                    case ds of wild { (,) i g' -> g' } #)) -}
00ec9eab06d0917e6828ac41907282f3
  $wrandomBool ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (# GHC.Types.Bool,
          System.Random.Mersenne.Pure64.Internal.PureMT #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U,U,U(U))>,
     Inline: [0],
     Unfolding: (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 let {
                   ds :: (GHC.Word.Word64,
                          System.Random.Mersenne.Pure64.Internal.PureMT)
                   = case w of wild { System.Random.Mersenne.Pure64.Internal.PureMT dt dt1 nxt ->
                     (case GHC.Prim.indexWord64Array# dt dt1 of wild2 { DEFAULT ->
                      case {__pkg_ccall mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV mix_bits GHC.Prim.Word#
                                                                                                                                      -> GHC.Prim.State#
                                                                                                                                           GHC.Prim.RealWorld
                                                                                                                                      -> (# GHC.Prim.State#
                                                                                                                                              GHC.Prim.RealWorld,
                                                                                                                                            GHC.Prim.Word# #)}
                             wild2
                             GHC.Prim.realWorld# of wild1 { (#,#) ds3 ds4 ->
                      GHC.Word.W64# ds4 } },
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# dt1 311#) of wild1 {
                        GHC.Types.False
                        -> case nxt of dt2 { System.Random.Mersenne.Pure64.Internal.MTBlock dt3 ->
                           System.Random.Mersenne.Pure64.Internal.PureMT
                             dt3
                             0#
                             (System.Random.Mersenne.Pure64.MTBlock.nextBlock dt2) }
                        GHC.Types.True
                        -> System.Random.Mersenne.Pure64.Internal.PureMT
                             dt
                             (GHC.Prim.+# dt1 1#)
                             nxt }) }
                 } in
                 (# case ds of wild { (,) i g' ->
                    case i of wild1 { GHC.Word.W64# x# ->
                    GHC.Prim.tagToEnum#
                      @ GHC.Types.Bool
                      (GHC.Prim.<##
                         0.5##
                         (GHC.Prim./##
                            (GHC.Prim.word2Double# (GHC.Prim.quotWord# x# 2048##))
                            9.007199254740992e15##)) } },
                    case ds of wild { (,) i g' -> g' } #)) -}
5bdb0e7c20a2aaac077ba74e108f1933
  type Rand =
    Control.Monad.Trans.State.Lazy.State
      System.Random.Mersenne.Pure64.Internal.PureMT
    :: * -> *
d4b9aaaf019c00220b05d0d3e775232d
  evalRand ::
    Control.Monad.Trans.State.Lazy.State
      System.Random.Mersenne.Pure64.Internal.PureMT a
    -> System.Random.Mersenne.Pure64.Internal.PureMT -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S(SL)),1*C1(U(1*U,A))><L,U>,
     Unfolding: InlineRule (0, True, True)
                (Control.Monad.Trans.State.Lazy.evalState
                   @ System.Random.Mersenne.Pure64.Internal.PureMT) -}
1a83f5d5e1545201d5db565b4bddf60c
  getBool :: MyRandom.Rand GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U,U,U(U))>m,
     Unfolding: InlineRule (0, True, True)
                MyRandom.randomBool
                  `cast`
                (Trans
                     (<System.Random.Mersenne.Pure64.Internal.PureMT>_R
                      ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                    <(GHC.Types.Bool,
                                      System.Random.Mersenne.Pure64.Internal.PureMT)>_R))
                     (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                               <Data.Functor.Identity.Identity>_R
                               <GHC.Types.Bool>_N))) -}
aa706b48619f6a2c2edf5a4d910d02d9
  getDouble :: MyRandom.Rand GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U,U,U(U))>m,
     Unfolding: InlineRule (0, True, True)
                MyRandom.getDouble1
                  `cast`
                (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                          <Data.Functor.Identity.Identity>_R
                          <GHC.Types.Double>_N)) -}
0f0cab1e0e51453cb52c2773418761c3
  getDouble1 ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> Data.Functor.Identity.Identity
         (GHC.Types.Double, System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U,U,U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case MyRandom.$wgetDouble w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <(GHC.Types.Double,
                             System.Random.Mersenne.Pure64.Internal.PureMT)>_R)) }) -}
ebb9fad01ba9034377592f90823937cd
  getModifyRand ::
    MyRandom.Rand System.Random.Mersenne.Pure64.Internal.PureMT
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,U,U(U))>m,
     Unfolding: InlineRule (0, True, True)
                MyRandom.getModifyRand1
                  `cast`
                (Trans
                     (<System.Random.Mersenne.Pure64.Internal.PureMT>_R
                      ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                    <(System.Random.Mersenne.Pure64.Internal.PureMT,
                                      System.Random.Mersenne.Pure64.Internal.PureMT)>_R))
                     (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                               <Data.Functor.Identity.Identity>_R
                               <System.Random.Mersenne.Pure64.Internal.PureMT>_N))) -}
3b6a395998bd3c1a0fa6a9c66044a50f
  getModifyRand1 ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (System.Random.Mersenne.Pure64.Internal.PureMT,
        System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,U,U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 (w,
                  case w of wild { System.Random.Mersenne.Pure64.Internal.PureMT dt dt1 nxt ->
                  case GHC.Prim.tagToEnum#
                         @ GHC.Types.Bool
                         (GHC.Prim.<# dt1 311#) of wild1 {
                    GHC.Types.False
                    -> case nxt of dt2 { System.Random.Mersenne.Pure64.Internal.MTBlock dt3 ->
                       System.Random.Mersenne.Pure64.Internal.PureMT
                         dt3
                         0#
                         (System.Random.Mersenne.Pure64.MTBlock.nextBlock dt2) }
                    GHC.Types.True
                    -> System.Random.Mersenne.Pure64.Internal.PureMT
                         dt
                         (GHC.Prim.+# dt1 1#)
                         nxt } })) -}
865b01a7b5a21eece553be45cc40b243
  getMyStdGen ::
    GHC.Types.IO System.Random.Mersenne.Pure64.Internal.PureMT
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                MyRandom.getMyStdGen1
                  `cast`
                (Sym (GHC.Types.N:IO[0]
                          <System.Random.Mersenne.Pure64.Internal.PureMT>_R)) -}
0618d94bd811f290baa4c658877e10ce
  getMyStdGen1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          System.Random.Mersenne.Pure64.Internal.PureMT #)
  {- Arity: 1,
     Unfolding: (GHC.STRef.readSTRef1
                   @ GHC.Prim.RealWorld
                   @ System.Random.Mersenne.Pure64.Internal.PureMT
                   MyRandom.theMyStdGen
                     `cast`
                   (GHC.IORef.N:IORef[0] <System.Random.Mersenne.Pure64.Internal.PureMT>_N)) -}
ad3816afee55affa4b218d18e161276c
  getMyStdRandom ::
    (System.Random.Mersenne.Pure64.Internal.PureMT
     -> (a, System.Random.Mersenne.Pure64.Internal.PureMT))
    -> GHC.Types.IO a
  {- Arity: 2, Strictness: <L,C(U(U,1*U(U,U,U)))><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyRandom.getMyStdRandom1
                  `cast`
                (forall (a :: <*>_N).
                 <System.Random.Mersenne.Pure64.Internal.PureMT
                  -> (a, System.Random.Mersenne.Pure64.Internal.PureMT)>_R
                 ->_R Sym (GHC.Types.N:IO[0] <a>_R)) -}
dda123768a6713102ee3e4e9607a250c
  getMyStdRandom1 ::
    (System.Random.Mersenne.Pure64.Internal.PureMT
     -> (a, System.Random.Mersenne.Pure64.Internal.PureMT))
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 2, Strictness: <L,C(U(U,1*U(U,U,U)))><S,U>,
     Unfolding: (\ @ a
                   (f :: System.Random.Mersenne.Pure64.Internal.PureMT
                         -> (a, System.Random.Mersenne.Pure64.Internal.PureMT))
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case MyRandom.theMyStdGen
                        `cast`
                      (GHC.IORef.N:IORef[0] <System.Random.Mersenne.Pure64.Internal.PureMT>_N) of wild { GHC.STRef.STRef r# ->
                 case GHC.Prim.atomicModifyMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.Mersenne.Pure64.Internal.PureMT
                        @ (System.Random.Mersenne.Pure64.Internal.PureMT, a)
                        @ a
                        r#
                        (\ (a1 :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                         case f a1 of wild1 { (,) v g ->
                         case g of a'1 { System.Random.Mersenne.Pure64.Internal.PureMT ipv ipv1 ipv2 ->
                         (a'1, v) } })
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of b1 { DEFAULT -> ds1 } } }) -}
b70440ca412e06c26db87dcbaf933855
  getRange ::
    (GHC.Types.Int, GHC.Types.Int) -> MyRandom.Rand GHC.Types.Int
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U(U),1*U(U))><S(SSL),1*U(U,U,U(U))>m,
     Unfolding: InlineRule (0, True, True)
                MyRandom.randomR
                  `cast`
                (<(GHC.Types.Int, GHC.Types.Int)>_R
                 ->_R Trans
                          (<System.Random.Mersenne.Pure64.Internal.PureMT>_R
                           ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                         <(GHC.Types.Int,
                                           System.Random.Mersenne.Pure64.Internal.PureMT)>_R))
                          (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                    <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                                    <Data.Functor.Identity.Identity>_R
                                    <GHC.Types.Int>_N))) -}
4ee9c6c1220e0a0c7d0f1a4b39136a10
  pureMT ::
    GHC.Real.Integral a =>
    a -> System.Random.Mersenne.Pure64.Internal.PureMT
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLLLC(S)),1*U(A,A,A,A,A,A,A,A,1*C1(U))><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Real.Integral a) (w1 :: a) ->
                 case GHC.Integer.Type.integerToWord
                        (GHC.Real.toInteger @ a w w1) of wild { DEFAULT ->
                 case System.Random.Mersenne.Pure64.MTBlock.seedBlock
                        (GHC.Word.W64#
                           wild) of dt { System.Random.Mersenne.Pure64.Internal.MTBlock dt1 ->
                 System.Random.Mersenne.Pure64.Internal.PureMT
                   dt1
                   0#
                   (System.Random.Mersenne.Pure64.MTBlock.nextBlock dt) } }) -}
0e4306d8ef95067bc542e278dfc6234f
  randomBool ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (GHC.Types.Bool, System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U,U,U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case MyRandom.$wrandomBool w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
f377d46cb6e8b3c2b4db315123860519
  randomR ::
    (GHC.Types.Int, GHC.Types.Int)
    -> System.Random.Mersenne.Pure64.Internal.PureMT
    -> (GHC.Types.Int, System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U(U),1*U(U))><S(SSL),1*U(U,U,U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int))
                   (w1 :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { System.Random.Mersenne.Pure64.Internal.PureMT ww6 ww7 ww8 ->
                 case GHC.Prim.indexWord64Array# ww6 ww7 of wild2 { DEFAULT ->
                 case {__pkg_ccall mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV mix_bits GHC.Prim.Word#
                                                                                                                                 -> GHC.Prim.State#
                                                                                                                                      GHC.Prim.RealWorld
                                                                                                                                 -> (# GHC.Prim.State#
                                                                                                                                         GHC.Prim.RealWorld,
                                                                                                                                       GHC.Prim.Word# #)}
                        wild2
                        GHC.Prim.realWorld# of wild { (#,#) ds3 ds4 ->
                 case ww2 of wild1 { GHC.Types.I# x ->
                 let {
                   x1 :: GHC.Prim.Double#
                   = GHC.Prim.*##
                       (GHC.Prim./##
                          (GHC.Prim.word2Double# (GHC.Prim.quotWord# ds4 2048##))
                          9.007199254740992e15##)
                       (GHC.Prim.int2Double# (GHC.Prim.+# (GHC.Prim.-# x ww4) 1#))
                 } in
                 let {
                   n :: GHC.Prim.Int# = GHC.Prim.double2Int# x1
                 } in
                 let {
                   g' :: System.Random.Mersenne.Pure64.Internal.PureMT
                   = case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<# ww7 311#) of wild3 {
                       GHC.Types.False
                       -> case ww8 of dt { System.Random.Mersenne.Pure64.Internal.MTBlock dt1 ->
                          System.Random.Mersenne.Pure64.Internal.PureMT
                            dt1
                            0#
                            (System.Random.Mersenne.Pure64.MTBlock.nextBlock dt) }
                       GHC.Types.True
                       -> System.Random.Mersenne.Pure64.Internal.PureMT
                            ww6
                            (GHC.Prim.+# ww7 1#)
                            ww8 }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<## x1 (GHC.Prim.int2Double# n)) of wild3 {
                   GHC.Types.False
                   -> let {
                        x2 :: GHC.Prim.Int# = GHC.Prim.+# ww4 n
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# x2 ww4) of wild4 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.># x2 x) of wild5 {
                             GHC.Types.False -> (GHC.Types.I# x2, g')
                             GHC.Types.True -> (GHC.Types.I# ww4, g') }
                        GHC.Types.True -> (GHC.Types.I# ww4, g') }
                   GHC.Types.True
                   -> let {
                        x2 :: GHC.Prim.Int# = GHC.Prim.+# ww4 (GHC.Prim.-# n 1#)
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# x2 ww4) of wild4 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.># x2 x) of wild5 {
                             GHC.Types.False -> (GHC.Types.I# x2, g')
                             GHC.Types.True -> (GHC.Types.I# ww4, g') }
                        GHC.Types.True -> (GHC.Types.I# ww4, g') } } } } } } } }) -}
f509516ae62bcb6a9a6a150ce55516dc
  runRand ::
    Control.Monad.Trans.State.Lazy.State
      System.Random.Mersenne.Pure64.Internal.PureMT a
    -> System.Random.Mersenne.Pure64.Internal.PureMT
    -> (a, System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U(U,U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                (Control.Monad.Trans.State.Lazy.runState
                   @ System.Random.Mersenne.Pure64.Internal.PureMT) -}
44401eaceabf73e6c44b0324fb083b9d
  setMyStdGen ::
    System.Random.Mersenne.Pure64.Internal.PureMT -> GHC.Types.IO ()
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                MyRandom.setMyStdGen1
                  `cast`
                (<System.Random.Mersenne.Pure64.Internal.PureMT>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
11b48b6f8a41461701e71b12378d870f
  setMyStdGen1 ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2,
     Unfolding: (GHC.STRef.writeSTRef1
                   @ GHC.Prim.RealWorld
                   @ System.Random.Mersenne.Pure64.Internal.PureMT
                   MyRandom.theMyStdGen
                     `cast`
                   (GHC.IORef.N:IORef[0] <System.Random.Mersenne.Pure64.Internal.PureMT>_N)) -}
f9c235d7d5564ee4a63714ad11d783e0
  theMyStdGen ::
    GHC.IORef.IORef System.Random.Mersenne.Pure64.Internal.PureMT
  {- Inline: NOINLINE -}
instance System.Random.RandomGen [System.Random.Mersenne.Pure64.Internal.PureMT]
  = MyRandom.$fRandomGenPureMT
"SPEC/MyRandom $dmgenRange @ PureMT" [ALWAYS] forall ($dRandomGen :: System.Random.RandomGen
                                                                       System.Random.Mersenne.Pure64.Internal.PureMT)
  System.Random.$dmgenRange @ System.Random.Mersenne.Pure64.Internal.PureMT
                            $dRandomGen
  = MyRandom.$fRandomGenPureMT_$s$dmgenRange
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

