
==================== FINAL INTERFACE ====================
2017-05-02 07:04:58.077203 UTC

interface Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom [orphan module] [hpc] 8002
  interface hash: 8d9ae8305b8cb40ffd1acc452217d20c
  ABI hash: 0dcc6c91c6e70d06c08b5b82a04f1337
  export-list hash: 7821f15d6cc2cc02e9e8abba923ea43b
  orphan hash: 06d85251694c421ba4f567f5ee10150b
  flag hash: d25d19a7b2a6306b9602a256a49f18a2
  sig of: Nothing
  used TH splices: False
  where
exports:
  MyRandom.evalRand
  MyRandom.getBool
  MyRandom.getDouble
  MyRandom.getModifyRand
  MyRandom.getMyStdGen
  MyRandom.getMyStdRandom
  MyRandom.getRange
  MyRandom.pureMT
  MyRandom.randomBool
  MyRandom.runRand
  MyRandom.setMyStdGen
  MyRandom.Rand
  System.Random.Mersenne.Pure64.Internal.PureMT
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.IORef 71c87b0b25a8bca3e3f4497725f5e543
import  -/  base-4.9.1.0:Data.Int 07f5a36c488acfe0ac32e81c7536b8ff
import  -/  base-4.9.1.0:Data.Word 77f42e01d0fb6b071f1ea2176d87fa6c
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.IO.Unsafe 1c057c642b0e201f55a24585d3d94564
import  -/  base-4.9.1.0:GHC.IORef 306bd532f2f3b000347cbe6316adc20e
import  -/  base-4.9.1.0:GHC.Int e6f85fcab22769385fba2b5fce0acb40
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Word 2f8cb4e909eeef2f95e1563807dd9268
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO.Unsafe 1e3c5b8dd8cf6850ae43cce967bb46cd
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV:System.Random.Mersenne.Pure64.Base 6d426160f867e4d0ba28a6cf9cfbf241
import  -/  mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV:System.Random.Mersenne.Pure64.Internal d11444fded960b9a92dc327f3629bcb0
import  -/  mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV:System.Random.Mersenne.Pure64.MTBlock 7652456ced891686fc9f8f4c49316ea1
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State.Class 39ab58f80dddc3770a0d1d20049a08ce
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State.Strict eff0af50b9ed40c32939885d02cca72b
import  -/  random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog:System.Random 217fae725b9503dc7354ec466d3ff899
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.State.Strict 978f397cc30fa26d55cf117e3751a6ed
bb6026771284ce797ff6a55d94ba95cc
  $fRandomGenPureMT ::
    System.Random.RandomGen
      System.Random.Mersenne.Pure64.Internal.PureMT
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ System.Random.Mersenne.Pure64.Internal.PureMT
                  MyRandom.$fRandomGenPureMT_$cnext
                  MyRandom.$fRandomGenPureMT_$cgenRange
                  MyRandom.$fRandomGenPureMT_$csplit -}
15dcfb4a2f7ab3cb919e96d1315b779f
  $fRandomGenPureMT1 :: GHC.Word.Word64 -> GHC.Word.Word64
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ (x :: GHC.Word.Word64) -> x) -}
8466119f5cb6b4276c42df9b5c13ad1d
  $fRandomGenPureMT_$cgenRange ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds1 :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 {__scc {random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog:System.Random.genRange} True False} (GHC.Base.minInt,
                                                                                                           GHC.Base.maxInt)) -}
2970427a3cd786ffd698c45ad7d8e4aa
  $fRandomGenPureMT_$cnext ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (GHC.Types.Int, System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.next} True True} MyRandom.randomInt) -}
05e5e2998fbfa72d201e77fd0d079a19
  $fRandomGenPureMT_$csplit ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (System.Random.Mersenne.Pure64.Internal.PureMT,
        System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.split} True True} MyRandom.splitPureMT) -}
5f80ee9b55ff783353958910d5523716
  $fRandomGenPureMT_$spureMT ::
    GHC.Word.Word64 -> System.Random.Mersenne.Pure64.Internal.PureMT
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.pureMT} True False} \ (x :: GHC.Word.Word64) ->
                                                                                                  {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.pureMT} False True} case ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.pureMT} False True} System.Random.Mersenne.Pure64.MTBlock.seedBlock)
                                                                                                                                                                                          (({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.pureMT} False True} MyRandom.$fRandomGenPureMT1)
                                                                                                                                                                                             x) of ww { System.Random.Mersenne.Pure64.Internal.MTBlock ww1 ->
                                                                                                                                                                                   {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.mkPureMT} True False} System.Random.Mersenne.Pure64.Internal.PureMT
                                                                                                                                                                                                                                                                        ww1
                                                                                                                                                                                                                                                                        0#
                                                                                                                                                                                                                                                                        ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.mkPureMT} False True} System.Random.Mersenne.Pure64.MTBlock.nextBlock
                                                                                                                                                                                                                                                                                                                                                              ww) }) -}
73c622c3dfd91f6287ba2f040e725b30
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   MyRandom.$trModule2
                   MyRandom.$trModule1) -}
984bfb4d0d3cceac23b6986aadb3acd8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "MyRandom"#) -}
152cee191b7a4ec0f5a90b2fccd9e1dc
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF"#) -}
be2fad1d93d95a6572cbae1737b62005
  $wsplitPureMT ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (# System.Random.Mersenne.Pure64.Internal.PureMT,
          System.Random.Mersenne.Pure64.Internal.PureMT #)
  {- Arity: 1, Strictness: <L,1*U(U,U,U(U))>, Inline: [0],
     Unfolding: (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.splitPureMT} True True} let {
                                                                                                             ds :: (GHC.Word.Word64,
                                                                                                                    System.Random.Mersenne.Pure64.Internal.PureMT)
                                                                                                             = {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.splitPureMT.(...)} True True} MyRandom.randomWord64
                                                                                                                                                                                                            w
                                                                                                           } in
                                                                                                           (MyRandom.$fRandomGenPureMT_$spureMT
                                                                                                              ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.splitPureMT.s} True True} case ds of wild { (,) s g' ->
                                                                                                                                                                                                      s }),
                                                                                                            MyRandom.$fRandomGenPureMT_$spureMT
                                                                                                              ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.splitPureMT.g'} True False} case ds of wild { (,) s g' ->
                                                                                                                                                                                                        case g' of ww { System.Random.Mersenne.Pure64.Internal.PureMT ww1 ww2 ww3 ->
                                                                                                                                                                                                        {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.splitPureMT.(...)} True False} {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.splitPureMT.s'} True False} {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.splitPureMT.(...)} False True} System.Random.Mersenne.Pure64.MTBlock.mixWord64
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ({__scc {mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV:System.Random.Mersenne.Pure64.MTBlock.lookupBlock} True True} case GHC.Prim.indexWord64Array#
ww1
ww2 of wild2 { DEFAULT ->
ord.W64#
wild2 }) } })) of ww { (,) ww1 ww2 ->
                 (# ww1, ww2 #) }) -}
0b4ec93ad64459693414d10d5fef2098
  type Rand =
    Control.Monad.Trans.State.Strict.State
      System.Random.Mersenne.Pure64.Internal.PureMT
    :: * -> *
005b2f5612137ed5f90f09bc3d5c4f6b
  evalRand ::
    Control.Monad.Trans.State.Strict.State
      System.Random.Mersenne.Pure64.Internal.PureMT a
    -> System.Random.Mersenne.Pure64.Internal.PureMT -> a
  {- Unfolding: (({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.evalRand} True False} Control.Monad.Trans.State.Strict.evalState)
                   @ System.Random.Mersenne.Pure64.Internal.PureMT) -}
785f01b937b6781166fcdd69af059cbd
  getBool :: MyRandom.Rand GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.getBool} True True} ({__scc {mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State.Class.state} True True} Control.Monad.Trans.State.Strict.state
                                                                                                                                                                                                    @ Data.Functor.Identity.Identity
                                                                                                                                                                                                    @ System.Random.Mersenne.Pure64.Internal.PureMT
                                                                                                                                                                                                    @ GHC.Types.Bool
                                                                                                                                                                                                    Data.Functor.Identity.$fMonadIdentity)
                                                                                                    MyRandom.randomBool) -}
612c32438a8ddd95508bbe0c732fad78
  getDouble :: MyRandom.Rand GHC.Types.Double
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.getDouble} True True} ({__scc {mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State.Class.state} True True} Control.Monad.Trans.State.Strict.state
                                                                                                                                                                                                      @ Data.Functor.Identity.Identity
                                                                                                                                                                                                      @ System.Random.Mersenne.Pure64.Internal.PureMT
                                                                                                                                                                                                      @ GHC.Types.Double
                                                                                                                                                                                                      Data.Functor.Identity.$fMonadIdentity)
                                                                                                      MyRandom.randomDouble) -}
2c64c3525e46d45d8d48f93e165e46b5
  getModifyRand ::
    MyRandom.Rand System.Random.Mersenne.Pure64.Internal.PureMT
  {- Unfolding: InlineRule (0, True, True)
                MyRandom.getModifyRand1
                  `cast`
                (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                          <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                          <Data.Functor.Identity.Identity>_R
                          <System.Random.Mersenne.Pure64.Internal.PureMT>_N)) -}
92185a9ffa6ad48fc9b5b83d8f4c9404
  getModifyRand1 ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> Data.Functor.Identity.Identity
         (System.Random.Mersenne.Pure64.Internal.PureMT,
          System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.getModifyRand} True False} \ (s1 :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                                                                                                         {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.getModifyRand} False True} case MyRandom.getModifyRand2
                                                                                                                                                                                                        s1 of wild { (,) a1 s' ->
                                                                                                                                                                                                 ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.getModifyRand} False True} {__scc {mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State.Class.put} True False} (a1,
                                                                                                                                                                                                                                                                                                                                                                                         case {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.getModifyRand.(...)} True True} MyRandom.$fRandomGenPureMT_$cnext
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             a1 of ww { (,) ww1 ww2 ->
                                                                                                                                                                                                                                                                                                                                                                                         {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.getModifyRand.new} True False} ww2 }))
                                                                                                                                                                                                   `cast`
                                                                                                                                                                                                 (Sym (Data.Functor.Identity.N:Identity[0]
                                                                                                                                                                                                           <(System.Random.Mersenne.Pure64.Internal.PureMT,
                                                                                                                                                                                                             System.Random.Mersenne.Pure64.Internal.PureMT)>_R)) }) -}
0198578d8c2ecaed80819e75a5558269
  getModifyRand2 ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (System.Random.Mersenne.Pure64.Internal.PureMT,
        System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.getModifyRand} False True} {__scc {mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State.Class.get} True False} \ (eta :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                                                                                                                                                                                                       (eta,
                                                                                                                                                                                                        eta)) -}
bcb8e4a29de5ce8f0e9febd7158962bd
  getMyStdGen ::
    GHC.Types.IO System.Random.Mersenne.Pure64.Internal.PureMT
  {- Unfolding: InlineRule (0, True, True)
                MyRandom.getMyStdGen1
                  `cast`
                (Sym (GHC.Types.N:IO[0]
                          <System.Random.Mersenne.Pure64.Internal.PureMT>_R)) -}
2d781d1c600ffbd5eafe0f81a7ba79d2
  getMyStdGen1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          System.Random.Mersenne.Pure64.Internal.PureMT #)
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.getMyStdGen} True True} GHC.STRef.readSTRef1
                                                                                                        @ GHC.Prim.RealWorld
                                                                                                        @ System.Random.Mersenne.Pure64.Internal.PureMT
                                                                                                        MyRandom.theMyStdGen
                                                                                                          `cast`
                                                                                                        (GHC.IORef.N:IORef[0] <System.Random.Mersenne.Pure64.Internal.PureMT>_N)) -}
6e26889cbab43cb74b90fa6440d41310
  getMyStdRandom ::
    (System.Random.Mersenne.Pure64.Internal.PureMT
     -> (a, System.Random.Mersenne.Pure64.Internal.PureMT))
    -> GHC.Types.IO a
  {- Arity: 1, Strictness: <L,C(U(U,1*U(U,U,U)))>,
     Unfolding: InlineRule (0, True, True)
                MyRandom.getMyStdRandom1
                  `cast`
                (forall (a :: <*>_N).
                 <System.Random.Mersenne.Pure64.Internal.PureMT
                  -> (a, System.Random.Mersenne.Pure64.Internal.PureMT)>_R
                 ->_R Sym (GHC.Types.N:IO[0] <a>_R)) -}
46d6475de0b44e492b2b89d5668de9da
  getMyStdRandom1 ::
    (System.Random.Mersenne.Pure64.Internal.PureMT
     -> (a, System.Random.Mersenne.Pure64.Internal.PureMT))
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 1, Strictness: <L,C(U(U,1*U(U,U,U)))>,
     Unfolding: (\ @ a
                   (f :: System.Random.Mersenne.Pure64.Internal.PureMT
                         -> (a, System.Random.Mersenne.Pure64.Internal.PureMT)) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.getMyStdRandom} True False} \ (s :: GHC.Prim.State#
                                                                                                                    GHC.Prim.RealWorld)[OneShot] ->
                                                                                                          {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.getMyStdRandom} False True} case MyRandom.theMyStdGen
                                                                                                                                                                                                          `cast`
                                                                                                                                                                                                        (GHC.IORef.N:IORef[0] <System.Random.Mersenne.Pure64.Internal.PureMT>_N) of wild { GHC.STRef.STRef r# ->
                                                                                                                                                                                                   case GHC.Prim.atomicModifyMutVar#
                                                                                                                                                                                                          @ GHC.Prim.RealWorld
                                                                                                                                                                                                          @ System.Random.Mersenne.Pure64.Internal.PureMT
                                                                                                                                                                                                          @ (System.Random.Mersenne.Pure64.Internal.PureMT,
                                                                                                                                                                                                             a)
                                                                                                                                                                                                          @ a
                                                                                                                                                                                                          r#
                                                                                                                                                                                                          (\ (a1 :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                                                                                                                                                                                                           {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.getMyStdRandom.swap} True False} case f a1 of wild1 { (,) v g ->
                                                                                                                                                                                                                                                                                                         case g of a'1 { System.Random.Mersenne.Pure64.Internal.PureMT ipv ipv1 ipv2 ->
                                                                                                                                                                                                                                                                                                         (a'1,
                                                                                                                                                                                                                                                                                                          v) } })
                                                                                                                                                                                                          s of ds1 { (#,#) ipv ipv1 ->
                                                                                                                                                                                                   case ipv1 of b1 { DEFAULT ->
                                                                                                                                                                                                   ds1 } } }) -}
bf86d5d1dcbef991a4fc47a8b9797b1f
  getRange ::
    GHC.Real.Integral a =>
    (GHC.Types.Int, GHC.Types.Int) -> MyRandom.Rand a
  {- Arity: 1, Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ a ($dIntegral :: GHC.Real.Integral a) ->
                 let {
                   $dNum :: GHC.Real.Real a = GHC.Real.$p1Integral @ a $dIntegral
                 } in
                 let {
                   $dNum1 :: GHC.Num.Num a = GHC.Real.$p1Real @ a $dNum
                 } in
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.getRange} True False} \ (x :: (GHC.Types.Int,
                                                                                                             GHC.Types.Int)) ->
                                                                                                    {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.getRange} False True} let {
                                                                                                                                                                                         m1 :: Control.Monad.Trans.State.Strict.StateT
                                                                                                                                                                                                 System.Random.Mersenne.Pure64.Internal.PureMT
                                                                                                                                                                                                 Data.Functor.Identity.Identity
                                                                                                                                                                                                 GHC.Types.Int
                                                                                                                                                                                         = ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.getRange} False True} MyRandom.getRange1)
                                                                                                                                                                                             (({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.getRange} False True} MyRandom.randomR)
                                                                                                                                                                                                x)
                                                                                                                                                                                       } in
                                                                                                                                                                                       (\ (s1 :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                                                                                                                                                                                        case (m1
                                                                                                                                                                                                `cast`
                                                                                                                                                                                              (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                                                                                                                                   <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                                                                                                                                                                                                   <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                   <GHC.Types.Int>_N)
                                                                                                                                                                                                s1)
                                                                                                                                                                                               `cast`
                                                                                                                                                                                             (Data.Functor.Identity.N:Identity[0]
                                                                                                                                                                                                  <(GHC.Types.Int,
                                                                                                                                                                                                    System.Random.Mersenne.Pure64.Internal.PureMT)>_R) of wild { (,) a1 s' ->
                                                                                                                                                                                        (GHC.Num.fromInteger
                                                                                                                                                                                           @ a
                                                                                                                                                                                           $dNum1
                                                                                                                                                                                           (case a1 of wild1 { GHC.Types.I# i ->
                                                                                                                                                                                            GHC.Integer.Type.smallInteger
                                                                                                                                                                                              i }),
                                                                                                                                                                                         s')
                                                                                                                                                                                          `cast`
                                                                                                                                                                                        (Sym (Data.Functor.Identity.N:Identity[0]
                                                                                                                                                                                                  <(a,
                                                                                                                                                                                                    System.Random.Mersenne.Pure64.Internal.PureMT)>_R)) })
                                                                                                                                                                                         `cast`
                                                                                                                                                                                       (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                                                                                                                                 <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                                                                                                                                                                                                 <Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                 <a>_N))) -}
bf12e3134ddae3543a3da4ff150dd770
  getRange1 ::
    (System.Random.Mersenne.Pure64.Internal.PureMT
     -> (GHC.Types.Int, System.Random.Mersenne.Pure64.Internal.PureMT))
    -> Control.Monad.Trans.State.Strict.StateT
         System.Random.Mersenne.Pure64.Internal.PureMT
         Data.Functor.Identity.Identity
         GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.getRange} False True} {__scc {mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State.Class.state} True True} Control.Monad.Trans.State.Strict.state
                                                                                                                                                                                                     @ Data.Functor.Identity.Identity
                                                                                                                                                                                                     @ System.Random.Mersenne.Pure64.Internal.PureMT
                                                                                                                                                                                                     @ GHC.Types.Int
                                                                                                                                                                                                     Data.Functor.Identity.$fMonadIdentity) -}
2a06c8f5497ab4bfdb194079e6276360
  mkPureMT ::
    System.Random.Mersenne.Pure64.Internal.MTBlock
    -> System.Random.Mersenne.Pure64.Internal.PureMT
  {- Arity: 1, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (block :: System.Random.Mersenne.Pure64.Internal.MTBlock) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.mkPureMT} True True} case block of dt { System.Random.Mersenne.Pure64.Internal.MTBlock dt1 ->
                                                                                                   System.Random.Mersenne.Pure64.Internal.PureMT
                                                                                                     dt1
                                                                                                     0#
                                                                                                     (System.Random.Mersenne.Pure64.MTBlock.nextBlock
                                                                                                        dt) }) -}
abde5aacd5baedca0bfb2783d708598b
  pureMT ::
    GHC.Real.Integral a =>
    a -> System.Random.Mersenne.Pure64.Internal.PureMT
  {- Arity: 1, Strictness: <L,U(A,A,A,A,A,A,A,A,C(U))>,
     Unfolding: (\ @ a ($dIntegral :: GHC.Real.Integral a) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.pureMT} True False} \ (x :: a) ->
                                                                                                  {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.pureMT} False True} case System.Random.Mersenne.Pure64.MTBlock.seedBlock
                                                                                                                                                                                          (case GHC.Integer.Type.integerToWord
                                                                                                                                                                                                  (GHC.Real.toInteger
                                                                                                                                                                                                     @ a
                                                                                                                                                                                                     $dIntegral
                                                                                                                                                                                                     x) of wild { DEFAULT ->
                                                                                                                                                                                           GHC.Word.W64#
                                                                                                                                                                                             wild }) of ww { System.Random.Mersenne.Pure64.Internal.MTBlock ww1 ->
                                                                                                                                                                                   {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.mkPureMT} True False} System.Random.Mersenne.Pure64.Internal.PureMT
                                                                                                                                                                                                                                                                        ww1
                                                                                                                                                                                                                                                                        0#
                                                                                                                                                                                                                                                                        ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.mkPureMT} False True} System.Random.Mersenne.Pure64.MTBlock.nextBlock
                                                                                                                                                                                                                                                                                                                                                              ww) }) -}
a8cfab8003f42ffac9fb26cd5c85c1df
  pureMT1 :: GHC.Integer.Type.Integer -> GHC.Word.Word64
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.integerToWord x of wild { DEFAULT ->
                 GHC.Word.W64# wild }) -}
ad305f11d7f4ca7a55a71c80ee1a74cc
  randomBool ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (GHC.Types.Bool, System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, Strictness: <L,1*U(U,U,U(U))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (g :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 let {
                   ds :: (GHC.Word.Word64,
                          System.Random.Mersenne.Pure64.Internal.PureMT)
                   = case g of wild { System.Random.Mersenne.Pure64.Internal.PureMT dt dt1 nxt ->
                     let {
                       i :: GHC.Types.Int = GHC.Types.I# dt1
                     } in
                     (System.Random.Mersenne.Pure64.MTBlock.mixWord64
                        (System.Random.Mersenne.Pure64.MTBlock.lookupBlock
                           (System.Random.Mersenne.Pure64.Internal.MTBlock dt)
                           i),
                      case GHC.Classes.ltInt
                             i
                             (GHC.Num.$fNumInt_$c-
                                System.Random.Mersenne.Pure64.Base.blockLen
                                (GHC.Types.I# 1#)) of wild1 {
                        GHC.Types.False -> MyRandom.mkPureMT nxt
                        GHC.Types.True
                        -> case GHC.Num.$fNumInt_$c+
                                  i
                                  (GHC.Types.I# 1#) of dt2 { GHC.Types.I# dt3 ->
                           System.Random.Mersenne.Pure64.Internal.PureMT dt dt3 nxt } }) }
                 } in
                 (case ds of wild { (,) i g' ->
                  case GHC.Word.$fIntegralWord64_$cquot
                         i
                         (GHC.Word.$fBitsWord64_$cfromInteger
                            2048) of wild1 { GHC.Word.W64# x# ->
                  GHC.Classes.$fOrdDouble_$c<
                    (GHC.Types.D# 0.5##)
                    (GHC.Float.$fFractionalDouble_$c/
                       (GHC.Float.word2Double (GHC.Types.W# x#))
                       (GHC.Types.D# 9.007199254740992e15##)) } },
                  case ds of wild { (,) i g' -> g' })) -}
087fa56326fe5f30323d2851a0ba1930
  randomDouble ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (GHC.Types.Double,
        System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, Strictness: <L,1*U(U,U,U(U))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (g :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 let {
                   ds :: (GHC.Word.Word64,
                          System.Random.Mersenne.Pure64.Internal.PureMT)
                   = case g of wild { System.Random.Mersenne.Pure64.Internal.PureMT dt dt1 nxt ->
                     let {
                       i :: GHC.Types.Int = GHC.Types.I# dt1
                     } in
                     (System.Random.Mersenne.Pure64.MTBlock.mixWord64
                        (System.Random.Mersenne.Pure64.MTBlock.lookupBlock
                           (System.Random.Mersenne.Pure64.Internal.MTBlock dt)
                           i),
                      case GHC.Classes.ltInt
                             i
                             (GHC.Num.$fNumInt_$c-
                                System.Random.Mersenne.Pure64.Base.blockLen
                                (GHC.Types.I# 1#)) of wild1 {
                        GHC.Types.False -> MyRandom.mkPureMT nxt
                        GHC.Types.True
                        -> case GHC.Num.$fNumInt_$c+
                                  i
                                  (GHC.Types.I# 1#) of dt2 { GHC.Types.I# dt3 ->
                           System.Random.Mersenne.Pure64.Internal.PureMT dt dt3 nxt } }) }
                 } in
                 (case ds of wild { (,) i g' ->
                  case GHC.Word.$fIntegralWord64_$cquot
                         i
                         (GHC.Word.$fBitsWord64_$cfromInteger
                            2048) of wild1 { GHC.Word.W64# x# ->
                  GHC.Float.$fFractionalDouble_$c/
                    (GHC.Float.word2Double (GHC.Types.W# x#))
                    (GHC.Types.D# 9.007199254740992e15##) } },
                  case ds of wild { (,) i g' -> g' })) -}
397845c51ba0decdf21e09bc48910eab
  randomInt ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (GHC.Types.Int, System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, Strictness: <L,1*U(U,U,U(U))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (g :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 let {
                   ds :: (GHC.Word.Word64,
                          System.Random.Mersenne.Pure64.Internal.PureMT)
                   = case g of wild { System.Random.Mersenne.Pure64.Internal.PureMT dt dt1 nxt ->
                     let {
                       i :: GHC.Types.Int = GHC.Types.I# dt1
                     } in
                     (System.Random.Mersenne.Pure64.MTBlock.mixWord64
                        (System.Random.Mersenne.Pure64.MTBlock.lookupBlock
                           (System.Random.Mersenne.Pure64.Internal.MTBlock dt)
                           i),
                      case GHC.Classes.ltInt
                             i
                             (GHC.Num.$fNumInt_$c-
                                System.Random.Mersenne.Pure64.Base.blockLen
                                (GHC.Types.I# 1#)) of wild1 {
                        GHC.Types.False -> MyRandom.mkPureMT nxt
                        GHC.Types.True
                        -> case GHC.Num.$fNumInt_$c+
                                  i
                                  (GHC.Types.I# 1#) of dt2 { GHC.Types.I# dt3 ->
                           System.Random.Mersenne.Pure64.Internal.PureMT dt dt3 nxt } }) }
                 } in
                 (case ds of wild { (,) i g' ->
                  case i of wild1 { GHC.Word.W64# x# ->
                  GHC.Types.I# (GHC.Prim.word2Int# x#) } },
                  case ds of wild { (,) i g' -> g' })) -}
3f8c3e61bed12c69d14b060e245bf70d
  randomR ::
    (GHC.Types.Int, GHC.Types.Int)
    -> System.Random.Mersenne.Pure64.Internal.PureMT
    -> (GHC.Types.Int, System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 2,
     Strictness: <S(S(S)S(S)),1*U(1*U(U),1*U(U))><L,1*U(U,U,U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int))
                   (w1 :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case ww2 of ww5 { GHC.Types.I# ww6 ->
                 let {
                   ds :: GHC.Types.Int = GHC.Types.I# ww4
                 } in
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.randomR} True False} case {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.randomR} False True} {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.randomR.r} True False} ds of wild { GHC.Types.I# x ->
                                                                                                   case {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.randomR} False True} {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.randomR.d} True False} {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.randomR.(...)} True True} MyRandom.randomDouble
                                                                                                                                                                                                                                                                                                                                                                       w1 of wild1 { (,) d g' ->
                                                                                                   case d of wild2 { GHC.Types.D# x1 ->
                                                                                                   case {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.randomR} False True} {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.randomR.r} False True} let {
                                                                                                                                                                                                                                                                                x2 :: GHC.Prim.Double#
                                                                                                                                                                                                                                                                                = GHC.Prim.*##
                                                                                                                                                                                                                                                                                    x1
                                                                                                                                                                                                                                                                                    (GHC.Prim.int2Double#
                                                                                                                                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                                                                                                                                          (GHC.Prim.-#
                                                                                                                                                                                                                                                                                             ww6
                                                                                                                                                                                                                                                                                             x)
                                                                                                                                                                                                                                                                                          1#))
                                                                                                                                                                                                                                                                              } in
                                                                                                                                                                                                                                                                              let {
                                                                                                                                                                                                                                                                                n :: GHC.Prim.Int#
                                                                                                                                                                                                                                                                                = GHC.Prim.double2Int#
                                                                                                                                                                                                                                                                                    x2
                                                                                                                                                                                                                                                                              } in
                                                                                                                                                                                                                                                                              case GHC.Prim.tagToEnum#
                                                                                                                                                                                                                                                                                     @ GHC.Types.Bool
                                                                                                                                                                                                                                                                                     (GHC.Prim.<##
                                                                                                                                                                                                                                                                                        x2
                                                                                                                                                                                                                                                                                        (GHC.Prim.int2Double#
                                                                                                                                                                                                                                                                                           n)) of wild3 {
                                                                                                                                                                                                                                                                                GHC.Types.False
                                                                                                                                                                                                                                                                                -> GHC.Types.I#
                                                                                                                                                                                                                                                                                     (GHC.Prim.+#
                                                                                                                                                                                                                                                                                        x
                                                                                                                                                                                                                                                                                        n)
                                                                                                                                                                                                                                                                                GHC.Types.True
                                                                                                                                                                                                                                                                                -> GHC.Types.I#
                                                                                                                                                                                                                                                                                     (GHC.Prim.+#
                                                                                                                                                                                                                                                                                        x
                                                                                                                                                                                                                                                                                        (GHC.Prim.-#
                                                                                                                                                                                                                                                                                           n
                                                                                                                                                                                                                                                                                           1#)) } of wild3 { GHC.Types.I# x2 ->
                                                                                                   case {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.randomR} False True} GHC.Prim.tagToEnum#
                                                                                                                                                                                            @ GHC.Types.Bool
                                                                                                                                                                                            (GHC.Prim.<#
                                                                                                                                                                                               x2
                                                                                                                                                                                               x) of wild4 {
                                                                                                     GHC.Types.False
                                                                                                     -> case {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.randomR} False True} GHC.Prim.tagToEnum#
                                                                                                                                                                                                 @ GHC.Types.Bool
                                                                                                                                                                                                 (GHC.Prim.>#
                                                                                                                                                                                                    x2
                                                                                                                                                                                                    ww6) of wild5 {
                                                                                                          GHC.Types.False
                                                                                                          -> (wild3,
                                                                                                              {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.randomR} False True} {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.randomR.g'} True False} g')
                                                                                                          GHC.Types.True
                                                                                                          -> (wild,
                                                                                                              {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.randomR} False True} {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.randomR.g'} True False} g') }
                                                                                                     GHC.Types.True
                                                                                                     -> (wild,
                                                                                                         {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.randomR} False True} {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.randomR.g'} True False} g') } } } } } } } }) -}
018b22ab339a84067233be7527e59df8
  randomWord64 ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (GHC.Word.Word64, System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, Strictness: <S,1*U(U,U,U(U))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case ds of wild { System.Random.Mersenne.Pure64.Internal.PureMT dt dt1 nxt ->
                 let {
                   i :: GHC.Types.Int = GHC.Types.I# dt1
                 } in
                 (System.Random.Mersenne.Pure64.MTBlock.mixWord64
                    (System.Random.Mersenne.Pure64.MTBlock.lookupBlock
                       (System.Random.Mersenne.Pure64.Internal.MTBlock dt)
                       i),
                  case GHC.Classes.ltInt
                         i
                         (GHC.Num.$fNumInt_$c-
                            System.Random.Mersenne.Pure64.Base.blockLen
                            (GHC.Types.I# 1#)) of wild1 {
                    GHC.Types.False -> MyRandom.mkPureMT nxt
                    GHC.Types.True
                    -> case GHC.Num.$fNumInt_$c+
                              i
                              (GHC.Types.I# 1#) of dt2 { GHC.Types.I# dt3 ->
                       System.Random.Mersenne.Pure64.Internal.PureMT dt dt3 nxt } }) }) -}
6ec2f10167352dc21197fd78a6dd20fe
  runRand ::
    Control.Monad.Trans.State.Strict.State
      System.Random.Mersenne.Pure64.Internal.PureMT a
    -> System.Random.Mersenne.Pure64.Internal.PureMT
    -> (a, System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Unfolding: (({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.runRand} True False} Control.Monad.Trans.State.Strict.runState)
                   @ System.Random.Mersenne.Pure64.Internal.PureMT) -}
5bbb7dddcda2a2dd93de6f0fd635082d
  setMyStdGen ::
    System.Random.Mersenne.Pure64.Internal.PureMT -> GHC.Types.IO ()
  {- Unfolding: InlineRule (0, True, True)
                MyRandom.setMyStdGen1
                  `cast`
                (<System.Random.Mersenne.Pure64.Internal.PureMT>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
21f7ff288c158c7215a836f6f74923dd
  setMyStdGen1 ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom.setMyStdGen} True True} GHC.STRef.writeSTRef1
                                                                                                        @ GHC.Prim.RealWorld
                                                                                                        @ System.Random.Mersenne.Pure64.Internal.PureMT
                                                                                                        MyRandom.theMyStdGen
                                                                                                          `cast`
                                                                                                        (GHC.IORef.N:IORef[0] <System.Random.Mersenne.Pure64.Internal.PureMT>_N)) -}
83a159548c1c381b740d1250746a5e8d
  splitPureMT ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (System.Random.Mersenne.Pure64.Internal.PureMT,
        System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, Strictness: <L,1*U(U,U,U(U))>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case MyRandom.$wsplitPureMT w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
26a31dce0daa0ce5c8b621e3a341a773
  theMyStdGen ::
    GHC.IORef.IORef System.Random.Mersenne.Pure64.Internal.PureMT
  {- Inline: NOINLINE -}
instance System.Random.RandomGen [System.Random.Mersenne.Pure64.Internal.PureMT]
  = MyRandom.$fRandomGenPureMT
"SPEC pureMT @ Word64" [ALWAYS] forall ($dIntegral :: GHC.Real.Integral
                                                        GHC.Word.Word64)
  MyRandom.pureMT @ GHC.Word.Word64 $dIntegral
  = MyRandom.$fRandomGenPureMT_$spureMT
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

