
==================== FINAL INTERFACE ====================
2017-04-28 16:31:32.520407 UTC

interface Evolverbetert-0.1.0.0-JVauai24MmC4VMIOpFCRwG:MyRandom [orphan module] 8002
  interface hash: 4880a479c0fa54120a1972c59ab579a9
  ABI hash: ac5c3d52b691d9aaae5b1bb647af66bd
  export-list hash: dd9a89ae07df5f4335cfca7f1ea96343
  orphan hash: 1f820a31088708e6895e2368ea2532c7
  flag hash: ab396f11155bd696ab63895436e6f1df
  sig of: Nothing
  used TH splices: False
  where
exports:
  MyRandom.evalRand
  MyRandom.getBool
  MyRandom.getDouble
  MyRandom.getModifyRand
  MyRandom.getMyStdGen
  MyRandom.getMyStdRandom
  MyRandom.getRange
  MyRandom.pureMT
  MyRandom.randomBool
  MyRandom.runRand
  MyRandom.setMyStdGen
  MyRandom.Rand
  System.Random.Mersenne.Pure64.Internal.PureMT
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.IORef 71c87b0b25a8bca3e3f4497725f5e543
import  -/  base-4.9.1.0:Data.Int 07f5a36c488acfe0ac32e81c7536b8ff
import  -/  base-4.9.1.0:Data.Word 77f42e01d0fb6b071f1ea2176d87fa6c
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.IO.Unsafe 1c057c642b0e201f55a24585d3d94564
import  -/  base-4.9.1.0:GHC.IORef 306bd532f2f3b000347cbe6316adc20e
import  -/  base-4.9.1.0:GHC.Int e6f85fcab22769385fba2b5fce0acb40
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Word 2f8cb4e909eeef2f95e1563807dd9268
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO.Unsafe 1e3c5b8dd8cf6850ae43cce967bb46cd
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV:System.Random.Mersenne.Pure64.Base d1453b58a2613d9dcc6601dc89046ef9
import  -/  mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV:System.Random.Mersenne.Pure64.Internal bb3ed118165b97070d684375c016de56
import  -/  mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV:System.Random.Mersenne.Pure64.MTBlock a859128aff3c78db6db1843a6587e4f7
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State.Class 6d31234b0a911b56412061943d18b89e
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State.Strict eff0af50b9ed40c32939885d02cca72b
import  -/  random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog:System.Random b21db0c0ea43dc1ad218556cd0b064c7
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.State.Strict 978f397cc30fa26d55cf117e3751a6ed
b39942d44330fcd4aff83607ecc0b696
  $fRandomGenPureMT ::
    System.Random.RandomGen
      System.Random.Mersenne.Pure64.Internal.PureMT
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ System.Random.Mersenne.Pure64.Internal.PureMT
                  MyRandom.randomInt
                  MyRandom.$fRandomGenPureMT_$s$dmgenRange
                  MyRandom.$fRandomGenPureMT_$csplit -}
60f649dc898af38a178fd9124fdba2b4
  $fRandomGenPureMT_$csplit ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (System.Random.Mersenne.Pure64.Internal.PureMT,
        System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U,U,U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case MyRandom.$w$csplit w of ww { (#,#) ww1 ww2 -> (ww1, ww2) }) -}
9a9548de6064872ce6605c44892b933b
  $fRandomGenPureMT_$s$dmgenRange ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (-1, True, False)
                (\ (ds :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 (GHC.Base.minInt, GHC.Base.maxInt)) -}
37fac31249330715660131a06662f521
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   MyRandom.$trModule2
                   MyRandom.$trModule1) -}
a3338d3bf9f2abc041ab17758631c714
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "MyRandom"#) -}
d163f5da56b2a5935ea062da9f2e514c
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Evolverbetert-0.1.0.0-JVauai24MmC4VMIOpFCRwG"#) -}
997643324310de997a09a9b79156f9e4
  $w$csplit ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (# System.Random.Mersenne.Pure64.Internal.PureMT,
          System.Random.Mersenne.Pure64.Internal.PureMT #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U,U,U(U))>,
     Inline: [0],
     Unfolding: (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 let {
                   ds :: (GHC.Word.Word64,
                          System.Random.Mersenne.Pure64.Internal.PureMT)
                   = case w of wild { System.Random.Mersenne.Pure64.Internal.PureMT dt dt1 nxt ->
                     (case GHC.Prim.indexWord64Array# dt dt1 of wild2 { DEFAULT ->
                      case {__pkg_ccall mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV mix_bits GHC.Prim.Word#
                                                                                                                                      -> GHC.Prim.State#
                                                                                                                                           GHC.Prim.RealWorld
                                                                                                                                      -> (# GHC.Prim.State#
                                                                                                                                              GHC.Prim.RealWorld,
                                                                                                                                            GHC.Prim.Word# #)}
                             wild2
                             GHC.Prim.realWorld# of wild1 { (#,#) ds3 ds4 ->
                      GHC.Word.W64# ds4 } },
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# dt1 311#) of wild1 {
                        GHC.Types.False -> MyRandom.mkPureMT nxt
                        GHC.Types.True
                        -> System.Random.Mersenne.Pure64.Internal.PureMT
                             dt
                             (GHC.Prim.+# dt1 1#)
                             nxt }) }
                 } in
                 (# case ds of wild { (,) s g' ->
                    case System.Random.Mersenne.Pure64.MTBlock.seedBlock
                           s of dt { System.Random.Mersenne.Pure64.Internal.MTBlock dt1 ->
                    System.Random.Mersenne.Pure64.Internal.PureMT
                      dt1
                      0#
                      (System.Random.Mersenne.Pure64.MTBlock.nextBlock dt) } },
                    case ds of wild { (,) s g' ->
                    case g' of wild1 { System.Random.Mersenne.Pure64.Internal.PureMT dt dt1 nxt ->
                    case GHC.Prim.indexWord64Array# dt dt1 of wild2 { DEFAULT ->
                    case {__pkg_ccall mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV mix_bits GHC.Prim.Word#
                                                                                                                                    -> GHC.Prim.State#
                                                                                                                                         GHC.Prim.RealWorld
                                                                                                                                    -> (# GHC.Prim.State#
                                                                                                                                            GHC.Prim.RealWorld,
                                                                                                                                          GHC.Prim.Word# #)}
                           wild2
                           GHC.Prim.realWorld# of wild3 { (#,#) ds3 ds4 ->
                    case System.Random.Mersenne.Pure64.MTBlock.seedBlock
                           (GHC.Word.W64#
                              ds4) of dt2 { System.Random.Mersenne.Pure64.Internal.MTBlock dt3 ->
                    System.Random.Mersenne.Pure64.Internal.PureMT
                      dt3
                      0#
                      (System.Random.Mersenne.Pure64.MTBlock.nextBlock
                         dt2) } } } } } #)) -}
77a7b41e87da21a90246e9795bb3258f
  $wrandomR ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> System.Random.Mersenne.Pure64.Internal.MTBlock
    -> (# GHC.Types.Int,
          System.Random.Mersenne.Pure64.Internal.PureMT #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U><L,1*U(U)><S,U><S,U><L,U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Prim.ByteArray#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: System.Random.Mersenne.Pure64.Internal.MTBlock) ->
                 case GHC.Prim.indexWord64Array# ww2 ww3 of wild2 { DEFAULT ->
                 case {__pkg_ccall mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV mix_bits GHC.Prim.Word#
                                                                                                                                 -> GHC.Prim.State#
                                                                                                                                      GHC.Prim.RealWorld
                                                                                                                                 -> (# GHC.Prim.State#
                                                                                                                                         GHC.Prim.RealWorld,
                                                                                                                                       GHC.Prim.Word# #)}
                        wild2
                        GHC.Prim.realWorld# of wild { (#,#) ds3 ds4 ->
                 case ww1 of wild1 { GHC.Types.I# x ->
                 let {
                   x1 :: GHC.Prim.Double#
                   = GHC.Prim.*##
                       (GHC.Prim./##
                          (GHC.Prim.word2Double# (GHC.Prim.quotWord# ds4 2048##))
                          9.007199254740992e15##)
                       (GHC.Prim.int2Double# (GHC.Prim.+# (GHC.Prim.-# x ww) 1#))
                 } in
                 let {
                   n :: GHC.Prim.Int# = GHC.Prim.double2Int# x1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<## x1 (GHC.Prim.int2Double# n)) of wild3 {
                   GHC.Types.False
                   -> let {
                        x2 :: GHC.Prim.Int# = GHC.Prim.+# ww n
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# x2 ww) of wild4 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.># x2 x) of wild5 {
                             GHC.Types.False
                             -> (# GHC.Types.I# x2,
                                   case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.<# ww3 311#) of wild6 {
                                     GHC.Types.False -> MyRandom.mkPureMT ww4
                                     GHC.Types.True
                                     -> System.Random.Mersenne.Pure64.Internal.PureMT
                                          ww2
                                          (GHC.Prim.+# ww3 1#)
                                          ww4 } #)
                             GHC.Types.True
                             -> (# GHC.Types.I# ww,
                                   case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.<# ww3 311#) of wild6 {
                                     GHC.Types.False -> MyRandom.mkPureMT ww4
                                     GHC.Types.True
                                     -> System.Random.Mersenne.Pure64.Internal.PureMT
                                          ww2
                                          (GHC.Prim.+# ww3 1#)
                                          ww4 } #) }
                        GHC.Types.True
                        -> (# GHC.Types.I# ww,
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.<# ww3 311#) of wild5 {
                                GHC.Types.False -> MyRandom.mkPureMT ww4
                                GHC.Types.True
                                -> System.Random.Mersenne.Pure64.Internal.PureMT
                                     ww2
                                     (GHC.Prim.+# ww3 1#)
                                     ww4 } #) }
                   GHC.Types.True
                   -> let {
                        x2 :: GHC.Prim.Int# = GHC.Prim.+# ww (GHC.Prim.-# n 1#)
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# x2 ww) of wild4 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.># x2 x) of wild5 {
                             GHC.Types.False
                             -> (# GHC.Types.I# x2,
                                   case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.<# ww3 311#) of wild6 {
                                     GHC.Types.False -> MyRandom.mkPureMT ww4
                                     GHC.Types.True
                                     -> System.Random.Mersenne.Pure64.Internal.PureMT
                                          ww2
                                          (GHC.Prim.+# ww3 1#)
                                          ww4 } #)
                             GHC.Types.True
                             -> (# GHC.Types.I# ww,
                                   case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.<# ww3 311#) of wild6 {
                                     GHC.Types.False -> MyRandom.mkPureMT ww4
                                     GHC.Types.True
                                     -> System.Random.Mersenne.Pure64.Internal.PureMT
                                          ww2
                                          (GHC.Prim.+# ww3 1#)
                                          ww4 } #) }
                        GHC.Types.True
                        -> (# GHC.Types.I# ww,
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.<# ww3 311#) of wild5 {
                                GHC.Types.False -> MyRandom.mkPureMT ww4
                                GHC.Types.True
                                -> System.Random.Mersenne.Pure64.Internal.PureMT
                                     ww2
                                     (GHC.Prim.+# ww3 1#)
                                     ww4 } #) } } } } }) -}
15dbc98a9547e867366d8bad46ff1e94
  type Rand =
    Control.Monad.Trans.State.Strict.State
      System.Random.Mersenne.Pure64.Internal.PureMT
    :: * -> *
3f6bf9002409028265d15437ce04f073
  evalRand ::
    Control.Monad.Trans.State.Strict.State
      System.Random.Mersenne.Pure64.Internal.PureMT a
    -> System.Random.Mersenne.Pure64.Internal.PureMT -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S(SL)),1*C1(U(1*U,A))><L,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                (Control.Monad.Trans.State.Strict.evalState
                   @ System.Random.Mersenne.Pure64.Internal.PureMT) -}
1a401c69c4d6a084aa7fd7a3fab0ef94
  getBool :: MyRandom.Rand GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U,U,U(U))>m,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Control.Monad.State.Class.$fMonadStatesStateT_$cstate
                   @ Data.Functor.Identity.Identity
                   @ System.Random.Mersenne.Pure64.Internal.PureMT
                   Data.Functor.Identity.$fMonadIdentity
                   @ GHC.Types.Bool
                   MyRandom.randomBool) -}
5c31e5f2eec7293d9b501acd10440062
  getDouble :: MyRandom.Rand GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U,U,U(U))>m,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Control.Monad.State.Class.$fMonadStatesStateT_$cstate
                   @ Data.Functor.Identity.Identity
                   @ System.Random.Mersenne.Pure64.Internal.PureMT
                   Data.Functor.Identity.$fMonadIdentity
                   @ GHC.Types.Double
                   MyRandom.randomDouble) -}
42b51d370ba582df43ed004a89b1cb45
  getModifyRand ::
    MyRandom.Rand System.Random.Mersenne.Pure64.Internal.PureMT
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,U,U(U))>m,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (let {
                   m1 :: Control.Monad.Trans.State.Strict.StateT
                           System.Random.Mersenne.Pure64.Internal.PureMT
                           Data.Functor.Identity.Identity
                           System.Random.Mersenne.Pure64.Internal.PureMT
                   = GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (System.Random.Mersenne.Pure64.Internal.PureMT
                          -> (System.Random.Mersenne.Pure64.Internal.PureMT,
                              System.Random.Mersenne.Pure64.Internal.PureMT))
                       @ (Control.Monad.Trans.State.Strict.StateT
                            System.Random.Mersenne.Pure64.Internal.PureMT
                            Data.Functor.Identity.Identity
                            System.Random.Mersenne.Pure64.Internal.PureMT)
                       (Control.Monad.Trans.State.Strict.state
                          @ Data.Functor.Identity.Identity
                          @ System.Random.Mersenne.Pure64.Internal.PureMT
                          @ System.Random.Mersenne.Pure64.Internal.PureMT
                          Data.Functor.Identity.$fMonadIdentity)
                       (\ (s1 :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                        (s1, s1))
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (System.Random.Mersenne.Pure64.Internal.PureMT
                      -> Data.Functor.Identity.Identity
                           (System.Random.Mersenne.Pure64.Internal.PureMT,
                            System.Random.Mersenne.Pure64.Internal.PureMT))
                   @ (Control.Monad.Trans.State.Strict.StateT
                        System.Random.Mersenne.Pure64.Internal.PureMT
                        Data.Functor.Identity.Identity
                        System.Random.Mersenne.Pure64.Internal.PureMT)
                   (\ (tpl :: System.Random.Mersenne.Pure64.Internal.PureMT
                              -> Data.Functor.Identity.Identity
                                   (System.Random.Mersenne.Pure64.Internal.PureMT,
                                    System.Random.Mersenne.Pure64.Internal.PureMT)) ->
                    tpl)
                     `cast`
                   (<System.Random.Mersenne.Pure64.Internal.PureMT
                     -> Data.Functor.Identity.Identity
                          (System.Random.Mersenne.Pure64.Internal.PureMT,
                           System.Random.Mersenne.Pure64.Internal.PureMT)>_R
                    ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                  <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                                  <Data.Functor.Identity.Identity>_R
                                  <System.Random.Mersenne.Pure64.Internal.PureMT>_N))
                   (\ (s1 :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                    Data.Functor.Identity.$fMonadIdentity_$c>>=
                      @ (System.Random.Mersenne.Pure64.Internal.PureMT,
                         System.Random.Mersenne.Pure64.Internal.PureMT)
                      @ (System.Random.Mersenne.Pure64.Internal.PureMT,
                         System.Random.Mersenne.Pure64.Internal.PureMT)
                      (Control.Monad.Trans.State.Strict.runStateT
                         @ System.Random.Mersenne.Pure64.Internal.PureMT
                         @ Data.Functor.Identity.Identity
                         @ System.Random.Mersenne.Pure64.Internal.PureMT
                         m1
                         s1)
                      (\ (ds :: (System.Random.Mersenne.Pure64.Internal.PureMT,
                                 System.Random.Mersenne.Pure64.Internal.PureMT))[OneShot] ->
                       case ds of wild { (,) a1 s' ->
                       let {
                         m2 :: Control.Monad.Trans.State.Strict.StateT
                                 System.Random.Mersenne.Pure64.Internal.PureMT
                                 Data.Functor.Identity.Identity
                                 ()
                         = let {
                             s2 :: System.Random.Mersenne.Pure64.Internal.PureMT
                             = case a1 of wild1 { System.Random.Mersenne.Pure64.Internal.PureMT dt dt1 nxt ->
                               let {
                                 i :: GHC.Types.Int = GHC.Types.I# dt1
                               } in
                               case GHC.Classes.ltInt
                                      i
                                      (GHC.Num.$fNumInt_$c-
                                         System.Random.Mersenne.Pure64.Base.blockLen
                                         (GHC.Types.I# 1#)) of wild2 {
                                 GHC.Types.False -> MyRandom.mkPureMT nxt
                                 GHC.Types.True
                                 -> case GHC.Num.$fNumInt_$c+
                                           i
                                           (GHC.Types.I# 1#) of dt2 { GHC.Types.I# dt3 ->
                                    System.Random.Mersenne.Pure64.Internal.PureMT dt dt3 nxt } } }
                           } in
                           GHC.Base.$
                             @ 'GHC.Types.PtrRepLifted
                             @ (System.Random.Mersenne.Pure64.Internal.PureMT
                                -> ((), System.Random.Mersenne.Pure64.Internal.PureMT))
                             @ (Control.Monad.Trans.State.Strict.StateT
                                  System.Random.Mersenne.Pure64.Internal.PureMT
                                  Data.Functor.Identity.Identity
                                  ())
                             (Control.Monad.Trans.State.Strict.state
                                @ Data.Functor.Identity.Identity
                                @ System.Random.Mersenne.Pure64.Internal.PureMT
                                @ ()
                                Data.Functor.Identity.$fMonadIdentity)
                             (\ (ds1 :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                              (GHC.Tuple.(), s2))
                       } in
                       let {
                         k :: Control.Monad.Trans.State.Strict.StateT
                                System.Random.Mersenne.Pure64.Internal.PureMT
                                Data.Functor.Identity.Identity
                                System.Random.Mersenne.Pure64.Internal.PureMT
                           {- Arity: 1 -}
                         = Control.Monad.Trans.State.Strict.$fMonadStateT_$creturn
                             @ Data.Functor.Identity.Identity
                             @ System.Random.Mersenne.Pure64.Internal.PureMT
                             Data.Functor.Identity.$fMonadIdentity
                             @ System.Random.Mersenne.Pure64.Internal.PureMT
                             a1
                       } in
                       Control.Monad.Trans.State.Strict.runStateT
                         @ System.Random.Mersenne.Pure64.Internal.PureMT
                         @ Data.Functor.Identity.Identity
                         @ System.Random.Mersenne.Pure64.Internal.PureMT
                         (GHC.Base.$
                            @ 'GHC.Types.PtrRepLifted
                            @ (System.Random.Mersenne.Pure64.Internal.PureMT
                               -> Data.Functor.Identity.Identity
                                    (System.Random.Mersenne.Pure64.Internal.PureMT,
                                     System.Random.Mersenne.Pure64.Internal.PureMT))
                            @ (Control.Monad.Trans.State.Strict.StateT
                                 System.Random.Mersenne.Pure64.Internal.PureMT
                                 Data.Functor.Identity.Identity
                                 System.Random.Mersenne.Pure64.Internal.PureMT)
                            (\ (tpl :: System.Random.Mersenne.Pure64.Internal.PureMT
                                       -> Data.Functor.Identity.Identity
                                            (System.Random.Mersenne.Pure64.Internal.PureMT,
                                             System.Random.Mersenne.Pure64.Internal.PureMT)) ->
                             tpl)
                              `cast`
                            (<System.Random.Mersenne.Pure64.Internal.PureMT
                              -> Data.Functor.Identity.Identity
                                   (System.Random.Mersenne.Pure64.Internal.PureMT,
                                    System.Random.Mersenne.Pure64.Internal.PureMT)>_R
                             ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                           <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                                           <Data.Functor.Identity.Identity>_R
                                           <System.Random.Mersenne.Pure64.Internal.PureMT>_N))
                            (\ (s2 :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                             Data.Functor.Identity.$fMonadIdentity_$c>>=
                               @ ((), System.Random.Mersenne.Pure64.Internal.PureMT)
                               @ (System.Random.Mersenne.Pure64.Internal.PureMT,
                                  System.Random.Mersenne.Pure64.Internal.PureMT)
                               (Control.Monad.Trans.State.Strict.runStateT
                                  @ System.Random.Mersenne.Pure64.Internal.PureMT
                                  @ Data.Functor.Identity.Identity
                                  @ ()
                                  m2
                                  s2)
                               (\ (ds1 :: ((),
                                           System.Random.Mersenne.Pure64.Internal.PureMT))[OneShot] ->
                                case ds1 of wild1 { (,) a2 s'1 ->
                                Control.Monad.Trans.State.Strict.runStateT
                                  @ System.Random.Mersenne.Pure64.Internal.PureMT
                                  @ Data.Functor.Identity.Identity
                                  @ System.Random.Mersenne.Pure64.Internal.PureMT
                                  k
                                  s'1 })))
                         s' }))) -}
4e961113d2d2c12c900916721f0904f8
  getMyStdGen ::
    GHC.Types.IO System.Random.Mersenne.Pure64.Internal.PureMT
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                MyRandom.getMyStdGen1
                  `cast`
                (Sym (GHC.Types.N:IO[0]
                          <System.Random.Mersenne.Pure64.Internal.PureMT>_R)) -}
8d2390fe235a214a40bcb94caa389305
  getMyStdGen1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          System.Random.Mersenne.Pure64.Internal.PureMT #)
  {- Arity: 1,
     Unfolding: (GHC.STRef.readSTRef1
                   @ GHC.Prim.RealWorld
                   @ System.Random.Mersenne.Pure64.Internal.PureMT
                   MyRandom.theMyStdGen
                     `cast`
                   (GHC.IORef.N:IORef[0] <System.Random.Mersenne.Pure64.Internal.PureMT>_N)) -}
35b0ec84ae8d440a78142a90928be14c
  getMyStdRandom ::
    (System.Random.Mersenne.Pure64.Internal.PureMT
     -> (a, System.Random.Mersenne.Pure64.Internal.PureMT))
    -> GHC.Types.IO a
  {- Arity: 2, Strictness: <L,C(U(U,1*U(U,U,U)))><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyRandom.getMyStdRandom1
                  `cast`
                (forall (a :: <*>_N).
                 <System.Random.Mersenne.Pure64.Internal.PureMT
                  -> (a, System.Random.Mersenne.Pure64.Internal.PureMT)>_R
                 ->_R Sym (GHC.Types.N:IO[0] <a>_R)) -}
adb2ace3e075a12eeccd5d8007cd12f8
  getMyStdRandom1 ::
    (System.Random.Mersenne.Pure64.Internal.PureMT
     -> (a, System.Random.Mersenne.Pure64.Internal.PureMT))
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 2, Strictness: <L,C(U(U,1*U(U,U,U)))><S,U>,
     Unfolding: (\ @ a
                   (f :: System.Random.Mersenne.Pure64.Internal.PureMT
                         -> (a, System.Random.Mersenne.Pure64.Internal.PureMT))
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case MyRandom.theMyStdGen
                        `cast`
                      (GHC.IORef.N:IORef[0] <System.Random.Mersenne.Pure64.Internal.PureMT>_N) of wild { GHC.STRef.STRef r# ->
                 case GHC.Prim.atomicModifyMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.Mersenne.Pure64.Internal.PureMT
                        @ (System.Random.Mersenne.Pure64.Internal.PureMT, a)
                        @ a
                        r#
                        (\ (a1 :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                         case f a1 of wild1 { (,) v g ->
                         case g of a'1 { System.Random.Mersenne.Pure64.Internal.PureMT ipv ipv1 ipv2 ->
                         (a'1, v) } })
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of b1 { DEFAULT -> ds1 } } }) -}
9711cfb1121bda13507439d09b30ac7c
  getRange ::
    GHC.Real.Integral a =>
    (GHC.Types.Int, GHC.Types.Int) -> MyRandom.Rand a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*U(1*U(A,A,A,A,A,A,1*C1(U)),A,A),A,A,A,A,A,A,A,A)><S(SL),1*U(1*U(U),1*U(U))><S(SSL),1*U(U,U,U(U))>m,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ a
                   ($dIntegral :: GHC.Real.Integral a)
                   (eta :: (GHC.Types.Int, GHC.Types.Int)) ->
                 let {
                   f :: GHC.Real.Real a = GHC.Real.$p1Integral @ a $dIntegral
                 } in
                 let {
                   f1 :: GHC.Num.Num a = GHC.Real.$p1Real @ a f
                 } in
                 let {
                   m1 :: System.Random.Mersenne.Pure64.Internal.PureMT
                         -> (GHC.Types.Int, System.Random.Mersenne.Pure64.Internal.PureMT)
                     {- Arity: 1 -}
                   = MyRandom.randomR eta
                 } in
                 let {
                   m2 :: Control.Monad.Trans.State.Strict.StateT
                           System.Random.Mersenne.Pure64.Internal.PureMT
                           Data.Functor.Identity.Identity
                           GHC.Types.Int
                     {- Arity: 1 -}
                   = Control.Monad.State.Class.$fMonadStatesStateT_$cstate
                       @ Data.Functor.Identity.Identity
                       @ System.Random.Mersenne.Pure64.Internal.PureMT
                       Data.Functor.Identity.$fMonadIdentity
                       @ GHC.Types.Int
                       m1
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (System.Random.Mersenne.Pure64.Internal.PureMT
                      -> Data.Functor.Identity.Identity
                           (a, System.Random.Mersenne.Pure64.Internal.PureMT))
                   @ (Control.Monad.Trans.State.Strict.StateT
                        System.Random.Mersenne.Pure64.Internal.PureMT
                        Data.Functor.Identity.Identity
                        a)
                   (\ (tpl :: System.Random.Mersenne.Pure64.Internal.PureMT
                              -> Data.Functor.Identity.Identity
                                   (a, System.Random.Mersenne.Pure64.Internal.PureMT)) ->
                    tpl)
                     `cast`
                   (<System.Random.Mersenne.Pure64.Internal.PureMT
                     -> Data.Functor.Identity.Identity
                          (a, System.Random.Mersenne.Pure64.Internal.PureMT)>_R
                    ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                  <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                                  <Data.Functor.Identity.Identity>_R
                                  <a>_N))
                   (\ (s1 :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (Data.Functor.Identity.Identity
                           (GHC.Types.Int, System.Random.Mersenne.Pure64.Internal.PureMT))
                      @ (Data.Functor.Identity.Identity
                           (a, System.Random.Mersenne.Pure64.Internal.PureMT))
                      (Data.Functor.Identity.$fFunctorIdentity_$cfmap
                         @ (GHC.Types.Int, System.Random.Mersenne.Pure64.Internal.PureMT)
                         @ (a, System.Random.Mersenne.Pure64.Internal.PureMT)
                         (\ (ds :: (GHC.Types.Int,
                                    System.Random.Mersenne.Pure64.Internal.PureMT)) ->
                          case ds of wild { (,) a1 s' ->
                          (GHC.Real.fromIntegral
                             @ GHC.Types.Int
                             @ a
                             GHC.Real.$fIntegralInt
                             f1
                             a1,
                           s') }))
                      (Control.Monad.Trans.State.Strict.runStateT
                         @ System.Random.Mersenne.Pure64.Internal.PureMT
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Int
                         m2
                         s1))) -}
3030b2191895218947eab11b18ce1b6a
  mkPureMT ::
    System.Random.Mersenne.Pure64.Internal.MTBlock
    -> System.Random.Mersenne.Pure64.Internal.PureMT
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (block :: System.Random.Mersenne.Pure64.Internal.MTBlock) ->
                 case block of dt { System.Random.Mersenne.Pure64.Internal.MTBlock dt1 ->
                 System.Random.Mersenne.Pure64.Internal.PureMT
                   dt1
                   0#
                   (System.Random.Mersenne.Pure64.MTBlock.nextBlock dt) }) -}
c26aaf9fab7c1bb4b9465a8d235023b8
  pureMT ::
    GHC.Real.Integral a =>
    a -> System.Random.Mersenne.Pure64.Internal.PureMT
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLLLC(S)),1*U(A,A,A,A,A,A,A,A,1*C1(U))><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Real.Integral a) (w1 :: a) ->
                 case GHC.Integer.Type.integerToWord
                        (GHC.Real.toInteger @ a w w1) of wild { DEFAULT ->
                 case System.Random.Mersenne.Pure64.MTBlock.seedBlock
                        (GHC.Word.W64#
                           wild) of dt { System.Random.Mersenne.Pure64.Internal.MTBlock dt1 ->
                 System.Random.Mersenne.Pure64.Internal.PureMT
                   dt1
                   0#
                   (System.Random.Mersenne.Pure64.MTBlock.nextBlock dt) } }) -}
8e72015f311299ed65f101edffcf8f37
  randomBool ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (GHC.Types.Bool, System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U,U,U(U))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (g :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 let {
                   ds :: (GHC.Word.Word64,
                          System.Random.Mersenne.Pure64.Internal.PureMT)
                   = case g of wild { System.Random.Mersenne.Pure64.Internal.PureMT dt dt1 nxt ->
                     let {
                       i :: GHC.Types.Int = GHC.Types.I# dt1
                     } in
                     (System.Random.Mersenne.Pure64.MTBlock.mixWord64
                        (System.Random.Mersenne.Pure64.MTBlock.lookupBlock
                           (System.Random.Mersenne.Pure64.Internal.MTBlock dt)
                           i),
                      case GHC.Classes.ltInt
                             i
                             (GHC.Num.$fNumInt_$c-
                                System.Random.Mersenne.Pure64.Base.blockLen
                                (GHC.Types.I# 1#)) of wild1 {
                        GHC.Types.False -> MyRandom.mkPureMT nxt
                        GHC.Types.True
                        -> case GHC.Num.$fNumInt_$c+
                                  i
                                  (GHC.Types.I# 1#) of dt2 { GHC.Types.I# dt3 ->
                           System.Random.Mersenne.Pure64.Internal.PureMT dt dt3 nxt } }) }
                 } in
                 (case ds of wild { (,) i g' ->
                  case GHC.Word.$fIntegralWord64_$cquot
                         i
                         (GHC.Word.$fBitsWord64_$cfromInteger
                            2048) of wild1 { GHC.Word.W64# x# ->
                  GHC.Classes.$fOrdDouble_$c<
                    (GHC.Types.D# 0.5##)
                    (GHC.Float.$fFractionalDouble_$c/
                       (GHC.Float.word2Double (GHC.Types.W# x#))
                       (GHC.Types.D# 9.007199254740992e15##)) } },
                  case ds of wild { (,) i g' -> g' })) -}
ba7d44802e436b98b59344451945d709
  randomDouble ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (GHC.Types.Double,
        System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U,U,U(U))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (g :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 let {
                   ds :: (GHC.Word.Word64,
                          System.Random.Mersenne.Pure64.Internal.PureMT)
                   = case g of wild { System.Random.Mersenne.Pure64.Internal.PureMT dt dt1 nxt ->
                     let {
                       i :: GHC.Types.Int = GHC.Types.I# dt1
                     } in
                     (System.Random.Mersenne.Pure64.MTBlock.mixWord64
                        (System.Random.Mersenne.Pure64.MTBlock.lookupBlock
                           (System.Random.Mersenne.Pure64.Internal.MTBlock dt)
                           i),
                      case GHC.Classes.ltInt
                             i
                             (GHC.Num.$fNumInt_$c-
                                System.Random.Mersenne.Pure64.Base.blockLen
                                (GHC.Types.I# 1#)) of wild1 {
                        GHC.Types.False -> MyRandom.mkPureMT nxt
                        GHC.Types.True
                        -> case GHC.Num.$fNumInt_$c+
                                  i
                                  (GHC.Types.I# 1#) of dt2 { GHC.Types.I# dt3 ->
                           System.Random.Mersenne.Pure64.Internal.PureMT dt dt3 nxt } }) }
                 } in
                 (case ds of wild { (,) i g' ->
                  case GHC.Word.$fIntegralWord64_$cquot
                         i
                         (GHC.Word.$fBitsWord64_$cfromInteger
                            2048) of wild1 { GHC.Word.W64# x# ->
                  GHC.Float.$fFractionalDouble_$c/
                    (GHC.Float.word2Double (GHC.Types.W# x#))
                    (GHC.Types.D# 9.007199254740992e15##) } },
                  case ds of wild { (,) i g' -> g' })) -}
e7281c2061a831a5c73a8f3e77f8e639
  randomInt ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (GHC.Types.Int, System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U,U,U(U))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (g :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 let {
                   ds :: (GHC.Word.Word64,
                          System.Random.Mersenne.Pure64.Internal.PureMT)
                   = case g of wild { System.Random.Mersenne.Pure64.Internal.PureMT dt dt1 nxt ->
                     let {
                       i :: GHC.Types.Int = GHC.Types.I# dt1
                     } in
                     (System.Random.Mersenne.Pure64.MTBlock.mixWord64
                        (System.Random.Mersenne.Pure64.MTBlock.lookupBlock
                           (System.Random.Mersenne.Pure64.Internal.MTBlock dt)
                           i),
                      case GHC.Classes.ltInt
                             i
                             (GHC.Num.$fNumInt_$c-
                                System.Random.Mersenne.Pure64.Base.blockLen
                                (GHC.Types.I# 1#)) of wild1 {
                        GHC.Types.False -> MyRandom.mkPureMT nxt
                        GHC.Types.True
                        -> case GHC.Num.$fNumInt_$c+
                                  i
                                  (GHC.Types.I# 1#) of dt2 { GHC.Types.I# dt3 ->
                           System.Random.Mersenne.Pure64.Internal.PureMT dt dt3 nxt } }) }
                 } in
                 (case ds of wild { (,) i g' ->
                  case i of wild1 { GHC.Word.W64# x# ->
                  GHC.Types.I# (GHC.Prim.word2Int# x#) } },
                  case ds of wild { (,) i g' -> g' })) -}
7b032ab61c89cc23bec057147765092a
  randomR ::
    (GHC.Types.Int, GHC.Types.Int)
    -> System.Random.Mersenne.Pure64.Internal.PureMT
    -> (GHC.Types.Int, System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U(U),1*U(U))><S(SSL),1*U(U,U,U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int))
                   (w1 :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { System.Random.Mersenne.Pure64.Internal.PureMT ww6 ww7 ww8 ->
                 case MyRandom.$wrandomR
                        ww4
                        ww2
                        ww6
                        ww7
                        ww8 of ww9 { (#,#) ww10 ww11 ->
                 (ww10, ww11) } } } }) -}
ff752c417ceea785c2f2d9674787ff44
  runRand ::
    Control.Monad.Trans.State.Strict.State
      System.Random.Mersenne.Pure64.Internal.PureMT a
    -> System.Random.Mersenne.Pure64.Internal.PureMT
    -> (a, System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U(U,U))><L,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                (Control.Monad.Trans.State.Strict.runState
                   @ System.Random.Mersenne.Pure64.Internal.PureMT) -}
6730a11040d4b3d9d67fb14d8bebb2c1
  setMyStdGen ::
    System.Random.Mersenne.Pure64.Internal.PureMT -> GHC.Types.IO ()
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                MyRandom.setMyStdGen1
                  `cast`
                (<System.Random.Mersenne.Pure64.Internal.PureMT>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
ed39f5841e47b0f13121b74e6d6b8c9e
  setMyStdGen1 ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2,
     Unfolding: (GHC.STRef.writeSTRef1
                   @ GHC.Prim.RealWorld
                   @ System.Random.Mersenne.Pure64.Internal.PureMT
                   MyRandom.theMyStdGen
                     `cast`
                   (GHC.IORef.N:IORef[0] <System.Random.Mersenne.Pure64.Internal.PureMT>_N)) -}
c541bf856df9c0f35e7235b04ec32479
  theMyStdGen ::
    GHC.IORef.IORef System.Random.Mersenne.Pure64.Internal.PureMT
  {- Inline: NOINLINE -}
instance System.Random.RandomGen [System.Random.Mersenne.Pure64.Internal.PureMT]
  = MyRandom.$fRandomGenPureMT
"SPEC/MyRandom $dmgenRange @ PureMT" [ALWAYS] forall ($dRandomGen :: System.Random.RandomGen
                                                                       System.Random.Mersenne.Pure64.Internal.PureMT)
  System.Random.$dmgenRange @ System.Random.Mersenne.Pure64.Internal.PureMT
                            $dRandomGen
  = MyRandom.$fRandomGenPureMT_$s$dmgenRange
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

