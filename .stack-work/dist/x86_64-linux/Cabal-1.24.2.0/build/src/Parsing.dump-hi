
==================== FINAL INTERFACE ====================
2017-04-28 16:31:36.381613 UTC

interface Evolverbetert-0.1.0.0-JVauai24MmC4VMIOpFCRwG:Parsing 8002
  interface hash: f3c448fd1708a2567a0305f848d75620
  ABI hash: 369ede456b3ac7c6aa1829ba5dbfffc2
  export-list hash: ac8d1adfd936b9666d54ccb43ba99290
  orphan hash: 0e72dfe593673e1e3a05e8783a2188f5
  flag hash: 0ffea4b86a7d632aec14361a41b8af4a
  sig of: Nothing
  used TH splices: False
  where
exports:
  Parsing.parseAgent
  Parsing.MyRead{Parsing.myRead}
  Parsing.MyShow{Parsing.myShow}
module dependencies: Misc MyRandom Parameters Types World
package dependencies: MonadRandom-0.5.1@MonadRandom-0.5.1-IY6HiWu00vQLARukQW3KMH
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      random-shuffle-0.0.4@random-shuffle-0.0.4-97h14tPp7Ru21125sv6IMi
                      split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: Evolverbetert-0.1.0.0-JVauai24MmC4VMIOpFCRwG:MyRandom
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: MonadRandom-0.5.1@MonadRandom-0.5.1-IY6HiWu00vQLARukQW3KMH:Control.Monad.Trans.Random.Lazy
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity base-4.9.1.0:Data.List.NonEmpty
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Semigroup
                         base-4.9.1.0:Data.Type.Equality base-4.9.1.0:Data.Version
                         base-4.9.1.0:Data.Void base-4.9.1.0:GHC.Exts
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
import  -/  Types 1d3d1e1d433c54e7bfb57452891f64d7
  exports: f90e62a4294bef8d4adecbf5aeb850c0
  Agent a1955434041c0ddcdec14b68adc5a3f1
  Agent d84ba5f3c206a79fef889ed9cdb2a757
  CGene 680029b02a23350830aad4d9f0e2089c
  CTfbs 5916ad2c7072433425c96231e7b8b1a8
  Chromosome be9bd89ddc70313c7284e6f9911e9f7a
  GS 57b8e15c603ed31446c18a568a6ef96e
  Gene 68ede29c9044f65efd71e0cd3c3e9014
  GeneState 0624c050dd249dc6c3c731ed15bbb84e
  GeneStateTable b57ec13db02500ae63d5b8235621c662
  Genome 701a6b59afaf6ac71673981e36ee7744
  ID 0d673b2a916b10c9dd854ba8ee53f405
  ID 24834833634867f6607836b0def3fd48
  Locus d285aff914c3fb093dd4ccf9b68f4d3b
  NoAgent 6206322b95deab4ed7ee3e59b287efbd
  Tfbs 5bceda15efcd159a3b066bf330bd57ff
  Thres 595efcbdc5ff6915e7a48be8eea108c3
  Thres 5a251f27da2af8e6b9b6ed5817065a7d
  Transposon 1f4961210b91c31c169266978dac5def
  Weight e5fcecaaec5ca7cf4f104fb020a43a2f
  Weight 8df82395b7d8e0c5f66b28a03088eed9
  geneStateTable 5fb01753af7756874617d8ee409e09ce
  genome 6a038ef7e18e49a94a93f1667308bb65
import  -/  World 3e7e2a4072f3caa69daebccfb176ef08
  exports: e67d5e73efc3ddbb195eae358efd5ab7
  gSTFromGenome 733a75bbb4e9e111a659144805a69954
import  -/  array-0.5.1.1@array-0.5.1.1:Data.Array.IArray 606f8bb830eb2a88c29c91f27c77f304
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 20d4ffbee41965d03d6a989425473dc4
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base d432f6875983131473086af8cb290590
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split c60198a427bfd51d9fb4562c059ec1d2
import  -/  split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals 25dced234ed01c9c803d678763a4d772
7a10c13f1caa4ba21e4b9046d6c42dad
  $fMyReadGeneState :: Parsing.MyRead Types.GeneState
  DFunId
  {- Arity: 1, Strictness: <L,U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyReadGeneState_$cmyRead
                  `cast`
                (Sym (Parsing.N:MyRead[0]) <Types.GeneState>_N) -}
0735c09816c3b1116077271d2030c2a3
  $fMyReadGeneState1 :: GHC.Base.String -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 case Text.Read.readEither6
                        @ GHC.Integer.Type.Integer
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Integer.Type.Integer
                           Parsing.$fMyReadGeneState4
                           s) of wild {
                   [] -> Parsing.$fMyReadGeneState3
                   : x ds
                   -> case ds of wild1 {
                        [] -> x : ipv ipv1 -> Parsing.$fMyReadGeneState2 } }) -}
5e60a5d884c1e78ad076a875d4b554a0
  $fMyReadGeneState2 :: GHC.Integer.Type.Integer
  {- Strictness: x -}
ba840f62be84d26f414cb5e2c0480e62
  $fMyReadGeneState3 :: GHC.Integer.Type.Integer
  {- Strictness: x -}
d942a5e4eed3fadde4190702388ca2e4
  $fMyReadGeneState4 ::
    Text.ParserCombinators.ReadP.P GHC.Integer.Type.Integer
  {- Unfolding: (GHC.Read.$fReadInteger3
                   GHC.Read.$fReadInteger_$sconvertInt
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Integer.Type.Integer
                   (Text.Read.readEither5 @ GHC.Integer.Type.Integer)) -}
8d977e4417bc97967253ac510e9ff8ff
  $fMyReadGeneState_$cmyRead :: GHC.Base.String -> Types.GeneState
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Base.String) ->
                 case GHC.Integer.Type.gtInteger#
                        (Parsing.$fMyReadGeneState1 x)
                        Types.$fNumGeneState_dt of wild { DEFAULT ->
                 (GHC.Prim.tagToEnum# @ GHC.Types.Bool wild)
                   `cast`
                 (Sym (Types.N:GeneState[0])) }) -}
7a10c13f1caa4ba21e4b9046d6c42dad
  $fMyReadID :: Parsing.MyRead Types.ID
  DFunId
  {- Arity: 1, Strictness: <L,U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyReadID_$cmyRead
                  `cast`
                (Sym (Parsing.N:MyRead[0]) <Types.ID>_N) -}
210df902e27a04aa38915c2f5db0cfb1
  $fMyReadID1 :: GHC.Base.String -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 case Text.Read.readEither6
                        @ GHC.Types.Int
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Types.Int
                           Parsing.$fMyReadID4
                           s) of wild {
                   [] -> Parsing.$fMyReadID3
                   : x ds
                   -> case ds of wild1 {
                        [] -> x : ipv ipv1 -> Parsing.$fMyReadID2 } }) -}
b9936601daa00f6fe5e5a3e63832b7b1
  $fMyReadID2 :: GHC.Types.Int
  {- Strictness: x -}
e5d2a6070fb85e1bd0b34a296d92535a
  $fMyReadID3 :: GHC.Types.Int
  {- Strictness: x -}
569436cdd85a27d541f72ada180a9bfb
  $fMyReadID4 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: (GHC.Read.$fReadInt3
                   GHC.Read.$fReadInt_$sconvertInt
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Int
                   (Text.Read.readEither5 @ GHC.Types.Int)) -}
afd46b6242779fd90d7c78f6fbf6f9b3
  $fMyReadID_$cmyRead :: GHC.Base.String -> Types.ID
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Parsing.$fMyReadID1
                  `cast`
                (<GHC.Base.String>_R ->_R Sym (Types.N:ID[0])) -}
7a10c13f1caa4ba21e4b9046d6c42dad
  $fMyReadLocus :: Parsing.MyRead Types.Locus
  DFunId
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyReadLocus_$cmyRead
                  `cast`
                (Sym (Parsing.N:MyRead[0]) <Types.Locus>_N) -}
2757ffad5c009a084e4d76e7482f15b7
  $fMyReadLocus_$cmyRead :: GHC.Base.String -> Types.Locus
  {- Arity: 1, Strictness: <S,1*U> -}
7a10c13f1caa4ba21e4b9046d6c42dad
  $fMyReadMap :: Parsing.MyRead Types.GeneStateTable
  DFunId
  {- Arity: 1, Strictness: <L,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyReadMap_$cmyRead
                  `cast`
                (Sym (Parsing.N:MyRead[0]) <Types.GeneStateTable>_N) -}
1f9afec8742a04b0c97304dd3edaaa30
  $fMyReadMap1 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.eftInt 0# 9223372036854775807#) -}
36570fe96d6a3f2ca485dc0d196e4312
  $fMyReadMap2 ::
    Data.Map.Base.Map Types.ID a1
    -> [(Types.ID, a1)] -> Data.Map.Base.Map Types.ID a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
ee9201a2c75fa1f00df9f1fe7b57aac0
  $fMyReadMap_$cmyRead :: GHC.Base.String -> Types.GeneStateTable
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: [GHC.Types.Char]) ->
                 Parsing.$fMyReadMap_$sfromList
                   @ Types.GeneState
                   (GHC.List.zip
                      @ Types.ID
                      @ Types.GeneState
                      Parsing.$fMyReadMap1 `cast` ([Sym (Types.N:ID[0])])_R
                      (Parsing.$fMyReadMap_go x))) -}
3c5037c5dccf3874c9c9a170ff745769
  $fMyReadMap_$sfromList ::
    [(Types.ID, a)] -> Data.Map.Base.Map Types.ID a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(Types.ID, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ Types.ID @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx `cast` (Types.N:ID[0]) of nt { GHC.Types.I# ipv ->
                           Data.Map.Base.Bin
                             @ Types.ID
                             @ a
                             1#
                             nt `cast` (Sym (Types.N:ID[0]))
                             x
                             (Data.Map.Base.Tip @ Types.ID @ a)
                             (Data.Map.Base.Tip @ Types.ID @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx `cast` (Types.N:ID[0]) of wild4 { GHC.Types.I# x1 ->
                           case ky `cast` (Types.N:ID[0]) of wild5 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>=# x1 y) of wild6 {
                             GHC.Types.False
                             -> Parsing.$wpoly_go10
                                  @ a
                                  1#
                                  (Data.Map.Base.Bin
                                     @ Types.ID
                                     @ a
                                     1#
                                     (GHC.Types.I# x1) `cast` (Sym (Types.N:ID[0]))
                                     x
                                     (Data.Map.Base.Tip @ Types.ID @ a)
                                     (Data.Map.Base.Tip @ Types.ID @ a))
                                  wild2
                             GHC.Types.True
                             -> Parsing.$fMyReadMap2
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ Types.ID
                                     @ a
                                     1#
                                     (GHC.Types.I# x1) `cast` (Sym (Types.N:ID[0]))
                                     x
                                     (Data.Map.Base.Tip @ Types.ID @ a)
                                     (Data.Map.Base.Tip @ Types.ID @ a))
                                  wild2 } } } } } } }) -}
5e4bdf382c19ecf09bd666312caa3a4a
  $fMyReadMap_go :: [GHC.Types.Char] -> [Types.GeneState]
  {- Arity: 1, Strictness: <S,1*U> -}
7a10c13f1caa4ba21e4b9046d6c42dad
  $fMyReadThres :: Parsing.MyRead Types.Thres
  DFunId
  {- Arity: 1, Strictness: <L,U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyReadThres_$cmyRead
                  `cast`
                (Sym (Parsing.N:MyRead[0]) <Types.Thres>_N) -}
97535a7257e767f7279362bdc7a89ca4
  $fMyReadThres_$cmyRead :: GHC.Base.String -> Types.Thres
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Parsing.$fMyReadID1
                  `cast`
                (<GHC.Base.String>_R ->_R Sym (Types.N:Thres[0])) -}
7a10c13f1caa4ba21e4b9046d6c42dad
  $fMyReadWeight :: Parsing.MyRead Types.Weight
  DFunId
  {- Arity: 1, Strictness: <L,U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyReadWeight_$cmyRead
                  `cast`
                (Sym (Parsing.N:MyRead[0]) <Types.Weight>_N) -}
176e325edff7df5ee7ae658615a60612
  $fMyReadWeight_$cmyRead :: GHC.Base.String -> Types.Weight
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Parsing.$fMyReadID1
                  `cast`
                (<GHC.Base.String>_R ->_R Sym (Types.N:Weight[0])) -}
7a10c13f1caa4ba21e4b9046d6c42dad
  $fMyRead[] :: Parsing.MyRead Types.Chromosome
  DFunId
  {- Arity: 1, Strictness: <L,U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyRead[]_$cmyRead
                  `cast`
                (Sym (Parsing.N:MyRead[0]) <Types.Chromosome>_N) -}
a070399a557bf3c1b9cc7da314a3d8c9
  $fMyRead[]1 :: [GHC.Types.Char] -> [[GHC.Types.Char]]
  {- Unfolding: (Data.List.Split.Internals.splitOn
                   @ GHC.Types.Char
                   GHC.Classes.$fEqChar
                   Parsing.$fMyRead[]2) -}
6b7857998fc76f1c3c1addf195724501
  $fMyRead[]2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ","#) -}
a0b6074ae89d34ffed332e898b6e8969
  $fMyRead[]_$cmyRead :: GHC.Base.String -> Types.Chromosome
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [GHC.Types.Char]) ->
                 GHC.Base.build
                   @ Types.Locus
                   (\ @ b1
                      (c :: Types.Locus -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ [GHC.Types.Char]
                      @ b1
                      (GHC.Base.mapFB
                         @ Types.Locus
                         @ b1
                         @ [GHC.Types.Char]
                         c
                         Parsing.$fMyReadLocus_$cmyRead)
                      n
                      (Parsing.$fMyRead[]1 x))) -}
91c760ca1df810349f0fe2ec77e67082
  $fMyShowAgent :: Parsing.MyShow Types.Agent
  DFunId
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyShowAgent_$cmyShow
                  `cast`
                (Sym (Parsing.N:MyShow[0] <Types.Agent>_N)) -}
b1fdb6a3e4c3fd01f9159f4ed75f905d
  $fMyShowAgent1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoAgent"#) -}
5ff99c569d035b3bd2ef5c68c60173cd
  $fMyShowAgent2 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
10ba77897d3e47786810e2faf8f65103
  $fMyShowAgent3 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ' '#) -}
532bb7a9c4940c55f15aa602d765dace
  $fMyShowAgent_$cmyShow :: Types.Agent -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Types.Agent) ->
                 case ds of wild {
                   Types.Agent ipv ipv1
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (case ipv of wild1 {
                              [] -> case GHC.List.badHead ret_ty [GHC.Types.Char] of {}
                              : x ds1
                              -> GHC.Show.showLitString
                                   (Parsing.$fMyShowAgent_go x)
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.shows6
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.shows5
                                         (let {
                                            ww2 :: [GHC.Types.Char]
                                            = case Parsing.$fMyShowAgent_go10
                                                     (GHC.Types.[] @ GHC.Types.Char)
                                                     ipv1 of wild2 {
                                                [] -> GHC.Types.[] @ GHC.Types.Char
                                                : x1 xs
                                                -> GHC.Types.:
                                                     @ GHC.Types.Char
                                                     x1
                                                     (Data.OldList.prependToAll
                                                        @ GHC.Types.Char
                                                        Parsing.$fMyShowAgent3
                                                        xs) }
                                          } in
                                          GHC.Show.$fShow(,)_$sgo
                                            Parsing.$fMyShowAgent2
                                            (\ (eta1 :: GHC.Base.String) ->
                                             GHC.Show.shows_$cshowList1 ww2 eta1)
                                            (GHC.Types.[] @ GHC.Show.ShowS)))) }))
                   Types.NoAgent -> Parsing.$fMyShowAgent1 }) -}
680f7bf805d28906d7b0105bfe662e18
  $fMyShowAgent_go :: [Types.Locus] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
e56c6eaaf8612fad437105e768836f29
  $fMyShowAgent_go10 ::
    [GHC.Types.Char]
    -> Data.Map.Base.Map Types.ID Types.GeneState -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
91c760ca1df810349f0fe2ec77e67082
  $fMyShowGeneState :: Parsing.MyShow Types.GeneState
  DFunId
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyShowGeneState_$cmyShow
                  `cast`
                (Sym (Parsing.N:MyShow[0] <Types.GeneState>_N)) -}
54b009bb02a289ad9af2436e3b60018d
  $fMyShowGeneState1 :: GHC.Base.String
  {- Unfolding: (case GHC.Show.$wshowSignedInt
                        0#
                        1#
                        (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                 GHC.Types.: @ GHC.Types.Char ww5 ww6 }) -}
5521a95a9c82d2121fc7abb134b3b232
  $fMyShowGeneState2 :: GHC.Base.String
  {- Unfolding: (case GHC.Show.$wshowSignedInt
                        0#
                        0#
                        (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                 GHC.Types.: @ GHC.Types.Char ww5 ww6 }) -}
b1ddcb61e24a472bc3b1ca33a9f8ed3f
  $fMyShowGeneState_$cmyShow :: Types.GeneState -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.GeneState) ->
                 case ds `cast` (Types.N:GeneState[0]) of wild {
                   GHC.Types.False -> Parsing.$fMyShowGeneState2
                   GHC.Types.True -> Parsing.$fMyShowGeneState1 }) -}
91c760ca1df810349f0fe2ec77e67082
  $fMyShowID :: Parsing.MyShow Types.ID
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m2,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyShowID_$cmyShow
                  `cast`
                (Sym (Parsing.N:MyShow[0] <Types.ID>_N)) -}
0f58a4c2e5b50e746eaf1dfb42af40b5
  $fMyShowID_$cmyShow :: Types.ID -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m2,
     Unfolding: InlineRule (0, True, True)
                GHC.Show.$fShowInt_$cshow
                  `cast`
                (Sym (Types.N:ID[0]) ->_R <GHC.Base.String>_R) -}
91c760ca1df810349f0fe2ec77e67082
  $fMyShowLocus :: Parsing.MyShow Types.Locus
  DFunId
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyShowLocus_$cmyShow
                  `cast`
                (Sym (Parsing.N:MyShow[0] <Types.Locus>_N)) -}
c49d5dccbb139804a7b83f392af49670
  $fMyShowLocus1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "T"#) -}
9a32ad9e23e3bcd95cf09334e4f021ef
  $fMyShowLocus_$cmyShow :: Types.Locus -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Types.Locus) ->
                 case ds of wild {
                   Types.Transposon -> Parsing.$fMyShowLocus1
                   Types.CGene ds1
                   -> case ds1 of wild1 { Types.Gene i t gs ->
                      GHC.CString.unpackAppendCString#
                        "G"#
                        (case i `cast` (Types.N:ID[0]) of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt
                                0#
                                ww3
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Base.++
                           @ GHC.Types.Char
                           (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                           (GHC.CString.unpackAppendCString#
                              ":"#
                              (case t `cast` (Types.N:Thres[0]) of ww1 { GHC.Types.I# ww8 ->
                               case GHC.Show.$wshowSignedInt
                                      0#
                                      ww8
                                      (GHC.Types.[] @ GHC.Types.Char) of ww9 { (#,#) ww10 ww11 ->
                               GHC.Base.++
                                 @ GHC.Types.Char
                                 (GHC.Types.: @ GHC.Types.Char ww10 ww11)
                                 (GHC.CString.unpackAppendCString#
                                    ":"#
                                    (case gs `cast` (Types.N:GeneState[0]) of wild2 {
                                       GHC.Types.False -> Parsing.$fMyShowGeneState2
                                       GHC.Types.True -> Parsing.$fMyShowGeneState1 })) } })) } }) }
                   Types.CTfbs ds1
                   -> case ds1 of wild1 { Types.Tfbs i w ->
                      case i `cast` (Types.N:ID[0]) of ww2 { GHC.Types.I# ww3 ->
                      case GHC.Show.$wshowSignedInt
                             0#
                             ww3
                             (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                        (GHC.CString.unpackAppendCString#
                           ":"#
                           (case w `cast` (Types.N:Weight[0]) of ww1 { GHC.Types.I# ww8 ->
                            case GHC.Show.$wshowSignedInt
                                   0#
                                   ww8
                                   (GHC.Types.[] @ GHC.Types.Char) of ww9 { (#,#) ww10 ww11 ->
                            GHC.Types.: @ GHC.Types.Char ww10 ww11 } })) } } } }) -}
91c760ca1df810349f0fe2ec77e67082
  $fMyShowMap :: Parsing.MyShow Types.GeneStateTable
  DFunId
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyShowMap_$cmyShow
                  `cast`
                (Sym (Parsing.N:MyShow[0] <Types.GeneStateTable>_N)) -}
388687775e374b58f8d5ae3cb62852c7
  $fMyShowMap1 ::
    Data.Map.Base.Map Types.ID Types.GeneState -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Data.Map.Base.Map Types.ID Types.GeneState) ->
                 Parsing.$fMyShowAgent_go10 (GHC.Types.[] @ GHC.Types.Char) x) -}
6147e3c5b0f3b694e8c839b6fe300021
  $fMyShowMap_$cmyShow :: Types.GeneStateTable -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Map.Base.Map Types.ID Types.GeneState) ->
                 case Parsing.$fMyShowMap1 x of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : x1 xs
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        x1
                        (Data.OldList.prependToAll
                           @ GHC.Types.Char
                           Parsing.$fMyShowAgent3
                           xs) }) -}
91c760ca1df810349f0fe2ec77e67082
  $fMyShowThres :: Parsing.MyShow Types.Thres
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m2,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyShowThres_$cmyShow
                  `cast`
                (Sym (Parsing.N:MyShow[0] <Types.Thres>_N)) -}
7609fd650a6f1eaee0b36367c5b1c6ae
  $fMyShowThres_$cmyShow :: Types.Thres -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m2,
     Unfolding: InlineRule (0, True, True)
                GHC.Show.$fShowInt_$cshow
                  `cast`
                (Sym (Types.N:Thres[0]) ->_R <GHC.Base.String>_R) -}
91c760ca1df810349f0fe2ec77e67082
  $fMyShowWeight :: Parsing.MyShow Types.Weight
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m2,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyShowWeight_$cmyShow
                  `cast`
                (Sym (Parsing.N:MyShow[0] <Types.Weight>_N)) -}
9f48b5312df3fb9e98e8c31c0f3e9756
  $fMyShowWeight_$cmyShow :: Types.Weight -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m2,
     Unfolding: InlineRule (0, True, True)
                GHC.Show.$fShowInt_$cshow
                  `cast`
                (Sym (Types.N:Weight[0]) ->_R <GHC.Base.String>_R) -}
91c760ca1df810349f0fe2ec77e67082
  $fMyShow[] :: Parsing.MyShow Types.Chromosome
  DFunId
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyShow[]_$cmyShow
                  `cast`
                (Sym (Parsing.N:MyShow[0] <Types.Chromosome>_N)) -}
629afc50d091e0269fc172def49869b7
  $fMyShow[]_$cmyShow :: Types.Chromosome -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (loci :: Types.Chromosome) ->
                 case GHC.Base.map
                        @ Types.Locus
                        @ [GHC.Types.Char]
                        Parsing.$fMyShowLocus_$cmyShow
                        loci of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : x xs1
                   -> Data.OldList.intercalate_$spoly_go
                        @ GHC.Types.Char
                        x
                        (Data.OldList.prependToAll
                           @ [GHC.Types.Char]
                           Parsing.$fMyRead[]2
                           xs1) }) -}
89e5a827d4afada0bb56bff504bc81d0
  $tc'C:MyRead :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15514595199115557370##
                   17717207930455252749##
                   Parsing.$trModule
                   Parsing.$tc'C:MyRead1) -}
0a63eb4faf55cc241b305102580c85c9
  $tc'C:MyRead1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:MyRead"#) -}
1d7481aec94c23bbee97d44cced7d128
  $tc'C:MyShow :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13722444714882248657##
                   15991452789672041594##
                   Parsing.$trModule
                   Parsing.$tc'C:MyShow1) -}
27a753de4397de7790e9acc5cf5d8733
  $tc'C:MyShow1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:MyShow"#) -}
9286d13e3ae6c0de533bd725902e60fa
  $tcMyRead :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13257686483370137257##
                   11501537646797432553##
                   Parsing.$trModule
                   Parsing.$tcMyRead1) -}
5023d85733a75c39a5fa7a6631915330
  $tcMyRead1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "MyRead"#) -}
b78eaac8d7234920dfbbd77b65dab93e
  $tcMyShow :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9801061764840377364##
                   6834188260043910538##
                   Parsing.$trModule
                   Parsing.$tcMyShow1) -}
0adc22b84570bd66abb32431bf613c53
  $tcMyShow1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "MyShow"#) -}
dc2a1c16282457152826e5e29b854109
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Parsing.$trModule2
                   Parsing.$trModule1) -}
1cce9bb2890692f8bef9682da1b52a2e
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Parsing"#) -}
34f4c00a9716ecb0bd8f49a2f8ef10a9
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Evolverbetert-0.1.0.0-JVauai24MmC4VMIOpFCRwG"#) -}
270b711fc3e5707854b46238ccfeb928
  $w$sgo10 ::
    GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map Types.ID a1
    -> Data.Map.Base.Map Types.ID a1
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
ebfea8cf5287452084c3780dbfb617dd
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map Types.ID a
    -> [(Types.ID, a)]
    -> Data.Map.Base.Map Types.ID a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
7a10c13f1caa4ba21e4b9046d6c42dad
  class MyRead a where
    myRead :: GHC.Base.String -> a
    {-# MINIMAL myRead #-}
91c760ca1df810349f0fe2ec77e67082
  class MyShow a where
    myShow :: a -> GHC.Base.String
    {-# MINIMAL myShow #-}
aa44523593e69f877c042b7ed591e076
  parseAgent :: [GHC.Types.Char] -> Types.Agent
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (ds :: [GHC.Types.Char]) ->
                 case GHC.Base.eqString ds Parsing.$fMyShowAgent1 of wild {
                   GHC.Types.False
                   -> let {
                        genome :: [Types.Locus]
                        = GHC.Base.map
                            @ [GHC.Types.Char]
                            @ Types.Locus
                            Parsing.$fMyReadLocus_$cmyRead
                            (Parsing.$fMyRead[]1 ds)
                      } in
                      let {
                        genome1 :: Types.Genome
                        = GHC.Types.:
                            @ Types.Chromosome
                            genome
                            (GHC.Types.[] @ Types.Chromosome)
                      } in
                      Types.Agent
                        genome1
                        (World.gSTFromGenome_makeGst
                           (Data.Map.Base.Tip @ Types.ID @ Types.GeneState)
                           (World.reduceToGenes_go genome1))
                   GHC.Types.True -> Types.NoAgent }) -}
instance Parsing.MyRead [Types.GeneState]
  = Parsing.$fMyReadGeneState
instance Parsing.MyRead [Types.ID] = Parsing.$fMyReadID
instance Parsing.MyRead [Types.Locus] = Parsing.$fMyReadLocus
instance Parsing.MyRead [Data.Map.Base.Map] = Parsing.$fMyReadMap
instance Parsing.MyRead [Types.Thres] = Parsing.$fMyReadThres
instance Parsing.MyRead [Types.Weight] = Parsing.$fMyReadWeight
instance Parsing.MyRead [[]] = Parsing.$fMyRead[]
instance Parsing.MyShow [Types.Agent] = Parsing.$fMyShowAgent
instance Parsing.MyShow [Types.GeneState]
  = Parsing.$fMyShowGeneState
instance Parsing.MyShow [Types.ID] = Parsing.$fMyShowID
instance Parsing.MyShow [Types.Locus] = Parsing.$fMyShowLocus
instance Parsing.MyShow [Data.Map.Base.Map] = Parsing.$fMyShowMap
instance Parsing.MyShow [Types.Thres] = Parsing.$fMyShowThres
instance Parsing.MyShow [Types.Weight] = Parsing.$fMyShowWeight
instance Parsing.MyShow [[]] = Parsing.$fMyShow[]
"SPEC/Parsing fromList @ ID _" [ALWAYS] forall @ a
                                               ($dOrd :: GHC.Classes.Ord Types.ID)
  Data.Map.Base.fromList @ Types.ID @ a $dOrd
  = Parsing.$fMyReadMap_$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

