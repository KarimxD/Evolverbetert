
==================== FINAL INTERFACE ====================
2017-05-02 08:28:15.209375 UTC

interface Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing [hpc] 8002
  interface hash: 3ca95f39ae1770c95d495e5969d6eda7
  ABI hash: fbd20c3356739b5f663ee9bd886c4a44
  export-list hash: c761168281d0d60e20e3466f2bd9fccd
  orphan hash: 0876115bc4e6d3592ce3a76101f1723f
  flag hash: b40997aa668764827c305d4f87046bd0
  sig of: Nothing
  used TH splices: False
  where
exports:
  Parsing.parseAgent
  Parsing.MyRead{Parsing.myRead}
  Parsing.MyShow{Parsing.myShow}
module dependencies: Misc MyRandom Parameters Types World
package dependencies: MonadRandom-0.5.1@MonadRandom-0.5.1-IY6HiWu00vQLARukQW3KMH
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      random-shuffle-0.0.4@random-shuffle-0.0.4-97h14tPp7Ru21125sv6IMi
                      split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: MonadRandom-0.5.1@MonadRandom-0.5.1-IY6HiWu00vQLARukQW3KMH:Control.Monad.Trans.Random.Lazy
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity base-4.9.1.0:Data.List.NonEmpty
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Semigroup
                         base-4.9.1.0:Data.Type.Equality base-4.9.1.0:Data.Version
                         base-4.9.1.0:Data.Void base-4.9.1.0:GHC.Exts
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
import  -/  Types 32978543d3e5942c0fca1d899b402377
  exports: f2d3892cae9faa75e4d9e5ce4ff3401f
  Agent 6e70c078bbe4ade34d62bafca45b69c1
  Agent 38df965694c57ea8a99df285579eb778
  CGene 21c05e9ab2bff6a8a7578acd0fe8c328
  CTfbs 7420e066f811d73e6ba289e5f4e3627e
  Chromosome b0226af39439d913341efe44e43bfe94
  GS 22dcfe0740c1ece2628b5fb2a5c57e91
  Gene 1a54626e2985fb35d77d52576fd30ef5
  GeneState af1dcb53c958f9cc4cee41e0cdd40f73
  GeneStateTable 2391f3cee93211cf0ef5eca6d8dee743
  Genome e49f3db4c7cafe6d5cfe014af10e3dff
  ID 4b20d6d0265267d2f650e3a662978c2b
  ID 11cf07ccdff9acbf576dc2c8351e445c
  Locus 3a1ffa0ff8e7c5056897e544d9829245
  NoAgent eb2f5928cf741a34cae5c8a97231993d
  Tfbs 2ae56c392d1e2582f48466147b66b169
  Thres 0700492c3fcd8b6aca341f7989ea358f
  Thres c3d818f4b4b9480567dfc64900f5b9f1
  Transposon f70cdb0d9633ac6f6e6e929bfa97a0c5
  Weight 1b7c0c35433fa0a6977fda250757f186
  Weight 62e198601be4cac9703a7878d90fa463
  geneStateTable fce9fac92fe9c6acd283f4e7544a7e28
  genome 13618b2dffb223e6f501df03ab5399f2
import  -/  World b68ee2aa83d202441effdbc7ccdf8d84
  exports: b3b8d7f652ad50a1ed48dfa408cd2db9
  gSTFromGenome ddd02c5b25600a85eb4abd1b649d2599
import  -/  array-0.5.1.1@array-0.5.1.1:Data.Array.IArray 606f8bb830eb2a88c29c91f27c77f304
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base a29df8c78ba14cbcd4d90f97bd8d22e9
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Strict f8f0196205d496398718e13b2f098e5d
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split c60198a427bfd51d9fb4562c059ec1d2
import  -/  split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals 84cef3a4becd62b741fe379ec3b99783
b4aa992301abc012694fee7c72e70f99
  $fMyReadGeneState :: Parsing.MyRead Types.GeneState
  DFunId
  {- Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyReadGeneState_$cmyRead
                  `cast`
                (Sym (Parsing.N:MyRead[0]) <Types.GeneState>_N) -}
4de64010994aa5f5d9e69a4842478d0c
  $fMyReadGeneState1 :: GHC.Integer.Type.Integer
  {- Strictness: x -}
86be76bed4b54c059372b8cf8ac0cd1c
  $fMyReadGeneState2 :: GHC.Integer.Type.Integer
  {- Strictness: x -}
8352ce2702903ad3db8e0ee902b50745
  $fMyReadGeneState3 ::
    Text.ParserCombinators.ReadP.P GHC.Integer.Type.Integer
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} GHC.Read.$fReadInteger3
                                                                                                                                                                                   GHC.Read.$fReadInteger_$sconvertInt
                                                                                                                                                                                   Text.ParserCombinators.ReadPrec.minPrec
                                                                                                                                                                                   @ GHC.Integer.Type.Integer
                                                                                                                                                                                   (Text.Read.readEither5
                                                                                                                                                                                      @ GHC.Integer.Type.Integer)) -}
7e7314351a147dee535d3bf634640f6f
  $fMyReadGeneState_$cmyRead :: GHC.Base.String -> Types.GeneState
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} True False} \ (x :: GHC.Base.String) ->
                                                                                                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} let {
                                                                                                                                                                                   a :: GHC.Integer.Type.Integer
                                                                                                                                                                                   = {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} case Text.Read.readEither6
                                                                                                                                                                                                                                                                            @ GHC.Integer.Type.Integer
                                                                                                                                                                                                                                                                            (Text.ParserCombinators.ReadP.run
                                                                                                                                                                                                                                                                               @ GHC.Integer.Type.Integer
                                                                                                                                                                                                                                                                               Parsing.$fMyReadGeneState3
                                                                                                                                                                                                                                                                               x) of wild {
                                                                                                                                                                                                                                                                       []
                                                                                                                                                                                                                                                                       -> Parsing.$fMyReadGeneState2
                                                                                                                                                                                                                                                                       : x1 ds
                                                                                                                                                                                                                                                                       -> case ds of wild1 {
                                                                                                                                                                                                                                                                            []
                                                                                                                                                                                                                                                                            -> x1
                                                                                                                                                                                                                                                                            : ipv ipv1
                                                                                                                                                                                                                                                                            -> Parsing.$fMyReadGeneState1 } }
                                                                                                                                                                                 } in
                                                                                                                                                                                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.fromInteger} True True} case GHC.Integer.Type.gtInteger#
                                                                                                                                                                                                                                                                          a
                                                                                                                                                                                                                                                                          Types.$fNumGeneState2 of wild { DEFAULT ->
                                                                                                                                                                                                                                                                   (GHC.Prim.tagToEnum#
                                                                                                                                                                                                                                                                      @ GHC.Types.Bool
                                                                                                                                                                                                                                                                      wild)
                                                                                                                                                                                                                                                                     `cast`
                                                                                                                                                                                                                                                                   (Sym (Types.N:GeneState[0])) }) -}
b4aa992301abc012694fee7c72e70f99
  $fMyReadID :: Parsing.MyRead Types.ID
  DFunId
  {- Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyReadID_$cmyRead
                  `cast`
                (Sym (Parsing.N:MyRead[0]) <Types.ID>_N) -}
eef1e77dbe3cdfc5a01bdd16a11ba097
  $fMyReadID1 :: GHC.Base.String -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} True True} Parsing.$fMyReadID2) -}
69324797b09ad56296718521763939ff
  $fMyReadID2 :: GHC.Base.String -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} case Text.Read.readEither6
                                                                                                        @ GHC.Types.Int
                                                                                                        (Text.ParserCombinators.ReadP.run
                                                                                                           @ GHC.Types.Int
                                                                                                           Parsing.$fMyReadID5
                                                                                                           s) of wild {
                                                                                                   []
                                                                                                   -> Parsing.$fMyReadID4
                                                                                                   : x ds
                                                                                                   -> case ds of wild1 {
                                                                                                        []
                                                                                                        -> x
                                                                                                        : ipv ipv1
                                                                                                        -> Parsing.$fMyReadID3 } }) -}
7ef56a72f2dde1884d2c001702112ad9
  $fMyReadID3 :: GHC.Types.Int
  {- Strictness: x -}
13d58d4231fe8d958d8b136d1b31c7d8
  $fMyReadID4 :: GHC.Types.Int
  {- Strictness: x -}
5a56c2c43bce278179c65d9b27647d26
  $fMyReadID5 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} GHC.Read.$fReadInt3
                                                                                                   GHC.Read.$fReadInt_$sconvertInt
                                                                                                   Text.ParserCombinators.ReadPrec.minPrec
                                                                                                   @ GHC.Types.Int
                                                                                                   (Text.Read.readEither5
                                                                                                      @ GHC.Types.Int)) -}
f0df4aa33a5617e5975f71e4d76e19f0
  $fMyReadID_$cmyRead :: GHC.Base.String -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Parsing.$fMyReadID1
                  `cast`
                (<GHC.Base.String>_R ->_R Sym (Types.N:ID[0])) -}
b4aa992301abc012694fee7c72e70f99
  $fMyReadLocus :: Parsing.MyRead Types.Locus
  DFunId
  {- Arity: 1, Strictness: <S,U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyReadLocus_$cmyRead
                  `cast`
                (Sym (Parsing.N:MyRead[0]) <Types.Locus>_N) -}
66e1bb856d0fbe32d7189517b1ef287e
  $fMyReadLocus1 :: GHC.Base.String -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} True True} Parsing.$fMyReadLocus2) -}
77546c4be089223ed792fb6bcc6052bb
  $fMyReadLocus10 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} GHC.Read.$fReadInt3
                                                                                                   GHC.Read.$fReadInt_$sconvertInt
                                                                                                   Text.ParserCombinators.ReadPrec.minPrec
                                                                                                   @ GHC.Types.Int
                                                                                                   (Text.Read.readEither5
                                                                                                      @ GHC.Types.Int)) -}
0479292a83c605f4fd238134d2daed9b
  $fMyReadLocus11 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} GHC.CString.unpackCString#
                                                                                                   "T"#) -}
97d3da4262cebf8e36d28a2b44c444ea
  $fMyReadLocus12 ::
    Data.List.Split.Internals.Splitter GHC.Types.Char
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead.s} False True} {__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.splitOn} False True} case Data.List.Split.Internals.defaultSplitter
                                                                                                                                                                                                                                                                                                    @ GHC.Prim.Any of wild { Data.List.Split.Internals.Splitter ds ds1 ds2 ds3 ds4 ->
                                                                                                                                                                                                                                                                                             {__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.dropDelims} True False} Data.List.Split.Internals.Splitter
                                                                                                                                                                                                                                                                                                                                                                                                            @ GHC.Types.Char
                                                                                                                                                                                                                                                                                                                                                                                                            Parsing.$fMyReadLocus13
                                                                                                                                                                                                                                                                                                                                                                                                              `cast`
                                                                                                                                                                                                                                                                                                                                                                                                            (Sym (Data.List.Split.Internals.N:Delimiter[0]
                                                                                                                                                                                                                                                                                                                                                                                                                      <GHC.Types.Char>_R))
                                                                                                                                                                                                                                                                                                                                                                                                            Data.List.Split.Internals.Drop
                                                                                                                                                                                                                                                                                                                                                                                                            ds2
                                                                                                                                                                                                                                                                                                                                                                                                            ds3
                                                                                                                                                                                                                                                                                                                                                                                                            ds4 }) -}
a2678584e99e9ea3d22345129dd7bdff
  $fMyReadLocus13 :: [GHC.Types.Char -> GHC.Types.Bool]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead.s} False True} {__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.splitOn} False True} {__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.onSublist} False True} GHC.Base.map
                                                                                                                                                                                                                                                                                                                                                                                                           @ GHC.Types.Char
                                                                                                                                                                                                                                                                                                                                                                                                           @ (GHC.Types.Char
                                                                                                                                                                                                                                                                                                                                                                                                              -> GHC.Types.Bool)
                                                                                                                                                                                                                                                                                                                                                                                                           Parsing.$fMyReadLocus_lvl3
                                                                                                                                                                                                                                                                                                                                                                                                           Parsing.$fMyReadLocus14) -}
416aeb10baab64658c928b38248568d9
  $fMyReadLocus14 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead.s} False True} GHC.CString.unpackCString#
                                                                                                                                                                                     ":"#) -}
3f9f5dc4e32d7c811e903322a581c144
  $fMyReadLocus2 :: GHC.Base.String -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} case Text.Read.readEither6
                                                                                                        @ GHC.Types.Int
                                                                                                        (Text.ParserCombinators.ReadP.run
                                                                                                           @ GHC.Types.Int
                                                                                                           Parsing.$fMyReadLocus5
                                                                                                           s) of wild {
                                                                                                   []
                                                                                                   -> Parsing.$fMyReadLocus4
                                                                                                   : x ds
                                                                                                   -> case ds of wild1 {
                                                                                                        []
                                                                                                        -> x
                                                                                                        : ipv ipv1
                                                                                                        -> Parsing.$fMyReadLocus3 } }) -}
414e2b0ceb16cb1337d685fc3cac3a85
  $fMyReadLocus3 :: GHC.Types.Int
  {- Strictness: x -}
d0152422baf452eb5b9620bb8331092a
  $fMyReadLocus4 :: GHC.Types.Int
  {- Strictness: x -}
664340a03c14b71ea2dccd8283c9ee46
  $fMyReadLocus5 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} GHC.Read.$fReadInt3
                                                                                                   GHC.Read.$fReadInt_$sconvertInt
                                                                                                   Text.ParserCombinators.ReadPrec.minPrec
                                                                                                   @ GHC.Types.Int
                                                                                                   (Text.Read.readEither5
                                                                                                      @ GHC.Types.Int)) -}
f404e713014299faf6853e22776cccf6
  $fMyReadLocus6 :: GHC.Base.String -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} True True} Parsing.$fMyReadLocus7) -}
80a66691b125c9caabe26c77e2337bb9
  $fMyReadLocus7 :: GHC.Base.String -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} case Text.Read.readEither6
                                                                                                        @ GHC.Types.Int
                                                                                                        (Text.ParserCombinators.ReadP.run
                                                                                                           @ GHC.Types.Int
                                                                                                           Parsing.$fMyReadLocus10
                                                                                                           s) of wild {
                                                                                                   []
                                                                                                   -> Parsing.$fMyReadLocus9
                                                                                                   : x ds
                                                                                                   -> case ds of wild1 {
                                                                                                        []
                                                                                                        -> x
                                                                                                        : ipv ipv1
                                                                                                        -> Parsing.$fMyReadLocus8 } }) -}
61e220dfff649c476aa669cc4fb0d8a5
  $fMyReadLocus8 :: GHC.Types.Int
  {- Strictness: x -}
7e4dd4961b658523afc9aa144cad754d
  $fMyReadLocus9 :: GHC.Types.Int
  {- Strictness: x -}
461e42ea6b6a98bc9433f5827101e698
  $fMyReadLocus_$cmyRead :: GHC.Base.String -> Types.Locus
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (str :: GHC.Base.String) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} True True} case {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead.h} True True} GHC.List.head
                                                                                                                                                                                        @ GHC.Types.Char
                                                                                                                                                                                        str of wild { GHC.Types.C# x ->
                                                                                                let {
                                                                                                  s :: [[GHC.Types.Char]]
                                                                                                  = {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead.s} True True} {__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.splitOn} True False} ({__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.splitOn} False True} Data.List.Split.Internals.split
                                                                                                                                                                                                                                                                                                                                                                                                            @ GHC.Types.Char
                                                                                                                                                                                                                                                                                                                                                                                                            ({__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.onSublist} True False} Parsing.$fMyReadLocus12))
                                                                                                                                                                                                                                                                                                 str
                                                                                                } in
                                                                                                case x of wild1 {
                                                                                                  DEFAULT
                                                                                                  -> case GHC.Base.eqString
                                                                                                            str
                                                                                                            Parsing.$fMyReadLocus11 of wild2 {
                                                                                                       GHC.Types.False
                                                                                                       -> Types.CTfbs
                                                                                                            (Types.Tfbs
                                                                                                               (({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} Parsing.$fMyReadID1)
                                                                                                                  (GHC.List.head
                                                                                                                     @ [GHC.Types.Char]
                                                                                                                     s))
                                                                                                                 `cast`
                                                                                                               (Sym (Types.N:ID[0]))
                                                                                                               (({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} Parsing.$fMyReadLocus6)
                                                                                                                  (GHC.List.$w!!
                                                                                                                     @ [GHC.Types.Char]
                                                                                                                     s
                                                                                                                     1#))
                                                                                                                 `cast`
                                                                                                               (Sym (Types.N:Weight[0])))
                                                                                                       GHC.Types.True
                                                                                                       -> Types.Transposon }
                                                                                                  'G'#
                                                                                                  -> Types.CGene
                                                                                                       (Types.Gene
                                                                                                          (({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} Parsing.$fMyReadID1)
                                                                                                             (case s of wild2 {
                                                                                                                []
                                                                                                                -> case GHC.List.badHead
                                                                                                                   ret_ty GHC.Base.String
                                                                                                                   of {}
                                                                                                                : x1 ds1
                                                                                                                -> case x1 of wild3 {
                                                                                                                     []
                                                                                                                     -> GHC.List.scanl2
                                                                                                                          @ GHC.Types.Char
                                                                                                                     : ds2 xs
                                                                                                                     -> xs } }))
                                                                                                            `cast`
                                                                                                          (Sym (Types.N:ID[0]))
                                                                                                          (({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} Parsing.$fMyReadLocus1)
                                                                                                             (GHC.List.$w!!
                                                                                                                @ [GHC.Types.Char]
                                                                                                                s
                                                                                                                1#))
                                                                                                            `cast`
                                                                                                          (Sym (Types.N:Thres[0]))
                                                                                                          (({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} Parsing.$fMyReadGeneState_$cmyRead)
                                                                                                             (GHC.List.$w!!
                                                                                                                @ [GHC.Types.Char]
                                                                                                                s
                                                                                                                2#))) } }) -}
5289a0b452dc713a90c1470b72bb280c
  $fMyReadLocus_lvl3 ::
    GHC.Types.Char -> GHC.Types.Char -> GHC.Types.Bool
  {- Unfolding: ({__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.splitOn} False True} {__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.onSublist} False True} GHC.Classes.eqChar) -}
b4aa992301abc012694fee7c72e70f99
  $fMyReadMap :: Parsing.MyRead Types.GeneStateTable
  DFunId
  {- Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyReadMap_$cmyRead
                  `cast`
                (Sym (Parsing.N:MyRead[0]) <Types.GeneStateTable>_N) -}
dcf096aa3e102a0af4c221745105f1de
  $fMyReadMap1 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Char) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} case ds of wild { GHC.Types.C# x ->
                                                                                                 case x of wild1 {
                                                                                                   DEFAULT
                                                                                                   -> GHC.Types.True
                                                                                                   ' '#
                                                                                                   -> GHC.Types.False } }) -}
af6ae97336e528b4b533f0acf34dffd8
  $fMyReadMap2 :: GHC.Types.Char -> Types.GeneState
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Char) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} Parsing.$fMyReadGeneState_$cmyRead)
                                                                                                   (GHC.Base.$fApplicative[]_$cpure
                                                                                                      @ GHC.Types.Char
                                                                                                      x)) -}
cfbfb45855eb10a12ea27e066173a8fe
  $fMyReadMap3 :: [GHC.Types.Int]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} Types.$fEnumID4
                                                                                                   Parsing.$fMyReadMap4) -}
5051342c2161914e3ba6602b8ee23557
  $fMyReadMap4 :: GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} Types.$fNumID1
                                                                                                   Parsing.$fMyReadMap5) -}
ff761a81f764df70f58b6978cfa547f7
  $fMyReadMap5 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
2be1e156267382f5a72a64862c5faf9f
  $fMyReadMap6 ::
    Data.Map.Base.Map Types.ID a1
    -> [(Types.ID, a1)] -> Data.Map.Base.Map Types.ID a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
e082b5db284b72652bc4c29505db0443
  $fMyReadMap_$cmyRead :: GHC.Base.String -> Types.GeneStateTable
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} True False} \ (x :: [GHC.Types.Char]) ->
                                                                                                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} Parsing.$fMyReadMap_$sfromList
                                                                                                                                                                                   @ Types.GeneState
                                                                                                                                                                                   ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} GHC.List.zip
                                                                                                                                                                                                                                                                                                                                                       @ Types.ID
                                                                                                                                                                                                                                                                                                                                                       @ Types.GeneState
                                                                                                                                                                                                                                                                                                                                                       Parsing.$fMyReadMap3
                                                                                                                                                                                                                                                                                                                                                         `cast`
                                                                                                                                                                                                                                                                                                                                                       ([Sym (Types.N:ID[0])])_R)
                                                                                                                                                                                                                                                                      ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} GHC.Base.map
                                                                                                                                                                                                                                                                                                                                                                                                                                          @ GHC.Types.Char
                                                                                                                                                                                                                                                                                                                                                                                                                                          @ Types.GeneState
                                                                                                                                                                                                                                                                                                                                                                                                                                          Parsing.$fMyReadMap2)
                                                                                                                                                                                                                                                                                                                                                         (({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} GHC.List.filter
                                                                                                                                                                                                                                                                                                                                                                                                                                             @ GHC.Types.Char
                                                                                                                                                                                                                                                                                                                                                                                                                                             Parsing.$fMyReadMap1)
                                                                                                                                                                                                                                                                                                                                                            x)))) -}
9f7fc258f9f28e997e35579e3c9a70bc
  $fMyReadMap_$sfromList ::
    [(Types.ID, a)] -> Data.Map.Base.Map Types.ID a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(Types.ID, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ Types.ID @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case x of x1 { DEFAULT ->
                           case kx `cast` (Types.N:ID[0]) of nt { GHC.Types.I# ipv ->
                           Data.Map.Base.Bin
                             @ Types.ID
                             @ a
                             1#
                             nt `cast` (Sym (Types.N:ID[0]))
                             x1
                             (Data.Map.Base.Tip @ Types.ID @ a)
                             (Data.Map.Base.Tip @ Types.ID @ a) } }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case Types.$fOrdID3
                                  kx `cast` (Types.N:ID[0])
                                  ky `cast` (Types.N:ID[0]) of wild4 {
                             GHC.Types.False
                             -> case x of x0 { DEFAULT ->
                                case kx `cast` (Types.N:ID[0]) of nt { GHC.Types.I# ipv2 ->
                                Parsing.$wpoly_go4
                                  @ a
                                  1#
                                  (Data.Map.Base.Bin
                                     @ Types.ID
                                     @ a
                                     1#
                                     nt `cast` (Sym (Types.N:ID[0]))
                                     x0
                                     (Data.Map.Base.Tip @ Types.ID @ a)
                                     (Data.Map.Base.Tip @ Types.ID @ a))
                                  wild2 } }
                             GHC.Types.True
                             -> case x of x0 { DEFAULT ->
                                case kx `cast` (Types.N:ID[0]) of nt { GHC.Types.I# ipv2 ->
                                Parsing.$fMyReadMap6
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ Types.ID
                                     @ a
                                     1#
                                     nt `cast` (Sym (Types.N:ID[0]))
                                     x0
                                     (Data.Map.Base.Tip @ Types.ID @ a)
                                     (Data.Map.Base.Tip @ Types.ID @ a))
                                  wild2 } } } } } } }) -}
b4aa992301abc012694fee7c72e70f99
  $fMyReadThres :: Parsing.MyRead Types.Thres
  DFunId
  {- Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyReadThres_$cmyRead
                  `cast`
                (Sym (Parsing.N:MyRead[0]) <Types.Thres>_N) -}
825693d37b2ac1e523a9e20240668dcf
  $fMyReadThres_$cmyRead :: GHC.Base.String -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Parsing.$fMyReadLocus1
                  `cast`
                (<GHC.Base.String>_R ->_R Sym (Types.N:Thres[0])) -}
b4aa992301abc012694fee7c72e70f99
  $fMyReadWeight :: Parsing.MyRead Types.Weight
  DFunId
  {- Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyReadWeight_$cmyRead
                  `cast`
                (Sym (Parsing.N:MyRead[0]) <Types.Weight>_N) -}
c1efba258e66d5fc0b64d00f52379a17
  $fMyReadWeight_$cmyRead :: GHC.Base.String -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Parsing.$fMyReadLocus6
                  `cast`
                (<GHC.Base.String>_R ->_R Sym (Types.N:Weight[0])) -}
b4aa992301abc012694fee7c72e70f99
  $fMyRead[] :: Parsing.MyRead Types.Chromosome
  DFunId
  {- Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyRead[]_$cmyRead
                  `cast`
                (Sym (Parsing.N:MyRead[0]) <Types.Chromosome>_N) -}
b3da162f076a49f299728b869ca19048
  $fMyRead[]1 :: [GHC.Types.Char] -> [[GHC.Types.Char]]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} {__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.splitOn} True False} {__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.splitOn} False True} Data.List.Split.Internals.split
                                                                                                                                                                                                                                                                                                                       @ GHC.Types.Char
                                                                                                                                                                                                                                                                                                                       ({__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.onSublist} True False} Parsing.$fMyRead[]2)) -}
71c5d3000347253caf1b3449976d29fa
  $fMyRead[]2 :: Data.List.Split.Internals.Splitter GHC.Types.Char
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} {__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.splitOn} False True} case Data.List.Split.Internals.defaultSplitter
                                                                                                                                                                                                                  @ GHC.Prim.Any of wild { Data.List.Split.Internals.Splitter ds ds1 ds2 ds3 ds4 ->
                                                                                                                                                                                                           {__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.dropDelims} True False} Data.List.Split.Internals.Splitter
                                                                                                                                                                                                                                                                                                                          @ GHC.Types.Char
                                                                                                                                                                                                                                                                                                                          Parsing.$fMyRead[]3
                                                                                                                                                                                                                                                                                                                            `cast`
                                                                                                                                                                                                                                                                                                                          (Sym (Data.List.Split.Internals.N:Delimiter[0]
                                                                                                                                                                                                                                                                                                                                    <GHC.Types.Char>_R))
                                                                                                                                                                                                                                                                                                                          Data.List.Split.Internals.Drop
                                                                                                                                                                                                                                                                                                                          ds2
                                                                                                                                                                                                                                                                                                                          ds3
                                                                                                                                                                                                                                                                                                                          ds4 }) -}
766cdd35c42142309ffe70e32c25d6f4
  $fMyRead[]3 :: [GHC.Types.Char -> GHC.Types.Bool]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} {__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.splitOn} False True} {__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.onSublist} False True} GHC.Base.map
                                                                                                                                                                                                                                                                                                                         @ GHC.Types.Char
                                                                                                                                                                                                                                                                                                                         @ (GHC.Types.Char
                                                                                                                                                                                                                                                                                                                            -> GHC.Types.Bool)
                                                                                                                                                                                                                                                                                                                         Parsing.$fMyReadLocus_lvl3
                                                                                                                                                                                                                                                                                                                         Parsing.$fMyRead[]4) -}
3f68072f17b6bdff9a1a8998d81cc812
  $fMyRead[]4 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} GHC.CString.unpackCString#
                                                                                                   ","#) -}
2cf7ece02ba8309dd26e183bd7989689
  $fMyRead[]5 :: GHC.Base.String -> Types.Locus
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} Parsing.$fMyReadLocus_$cmyRead) -}
ba415c15287b50d844a69fbf7f1ac2be
  $fMyRead[]_$cmyRead :: GHC.Base.String -> Types.Chromosome
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} True False} \ (x :: [GHC.Types.Char]) ->
                                                                                                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myRead} False True} GHC.Base.map
                                                                                                                                                                                                                                                                    @ GHC.Base.String
                                                                                                                                                                                                                                                                    @ Types.Locus
                                                                                                                                                                                                                                                                    Parsing.$fMyRead[]5)
                                                                                                                                                                                   (Parsing.$fMyRead[]1
                                                                                                                                                                                      x)) -}
29f07e6c1c85d39bdbf9a6272700102d
  $fMyShowAgent :: Parsing.MyShow Types.Agent
  DFunId
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyShowAgent_$cmyShow
                  `cast`
                (Sym (Parsing.N:MyShow[0] <Types.Agent>_N)) -}
9a8505fcacbdc032278f38e6c9f82563
  $fMyShowAgent1 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myShow} False True} GHC.CString.unpackCString#
                                                                                                   "NoAgent"#) -}
b025a86ed3fb606040031570e808f0f0
  $fMyShowAgent2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ' '#) -}
69196655a43741598186de3e0e230a26
  $fMyShowAgent3 :: (Types.ID, Types.GeneState) -> GHC.Base.String
  {- Arity: 1, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: (Types.ID, Types.GeneState)) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myShow} False True} ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myShow} False True} Parsing.$fMyShowAgent_$cmyShow2)
                                                                                                   (Data.Tuple.snd
                                                                                                      @ Types.ID
                                                                                                      @ Types.GeneState
                                                                                                      x)) -}
de11d8cd5df44c3a67f3f0231fef19a6
  $fMyShowAgent4 :: GHC.Base.String
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myShow} False True} case GHC.Show.$wshowSignedInt
                                                                                                        0#
                                                                                                        1#
                                                                                                        (GHC.Types.[]
                                                                                                           @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                                 GHC.Types.:
                                                                                                   @ GHC.Types.Char
                                                                                                   ww5
                                                                                                   ww6 }) -}
77912429174f1e6a5b52104370ddb0e9
  $fMyShowAgent5 :: GHC.Base.String
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myShow} False True} case GHC.Show.$wshowSignedInt
                                                                                                        0#
                                                                                                        0#
                                                                                                        (GHC.Types.[]
                                                                                                           @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                                 GHC.Types.:
                                                                                                   @ GHC.Types.Char
                                                                                                   ww5
                                                                                                   ww6 }) -}
b9423d2c778ce0dcc480e50254f9d7da
  $fMyShowAgent6 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8fc7fd0d4e5a875aed0b10f89aebc227
  $fMyShowAgent_$cmyShow :: Types.Agent -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Types.Agent) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myShow} True True} case ds of wild {
                                                                                                  Types.Agent ipv ipv1
                                                                                                  -> GHC.Types.:
                                                                                                       @ GHC.Types.Char
                                                                                                       GHC.Show.shows7
                                                                                                       (GHC.Types.:
                                                                                                          @ GHC.Types.Char
                                                                                                          GHC.Show.shows6
                                                                                                          ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.genome} True False} case ipv of wild1 {
                                                                                                                                                                                           []
                                                                                                                                                                                           -> case GHC.List.badHead
                                                                                                                                                                                              ret_ty [GHC.Types.Char]
                                                                                                                                                                                              of {}
                                                                                                                                                                                           : x ds1
                                                                                                                                                                                           -> GHC.Show.showLitString
                                                                                                                                                                                                (Parsing.$fMyShowAgent_go
                                                                                                                                                                                                   x)
                                                                                                                                                                                                (GHC.Types.:
                                                                                                                                                                                                   @ GHC.Types.Char
                                                                                                                                                                                                   GHC.Show.shows6
                                                                                                                                                                                                   (GHC.Types.:
                                                                                                                                                                                                      @ GHC.Types.Char
                                                                                                                                                                                                      GHC.Show.shows5
                                                                                                                                                                                                      (GHC.Show.$fShow(,)_$sgo
                                                                                                                                                                                                         Parsing.$fMyShowAgent6
                                                                                                                                                                                                         (let {
                                                                                                                                                                                                            eta :: [GHC.Types.Char]
                                                                                                                                                                                                            = ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myShow} False True} Parsing.$fMyShowAgent_$cmyShow1)
                                                                                                                                                                                                                ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.geneStateTable} True False} ipv1)
                                                                                                                                                                                                          } in
                                                                                                                                                                                                          \ (eta1 :: GHC.Base.String) ->
                                                                                                                                                                                                          GHC.Show.shows_$cshowList1
                                                                                                                                                                                                            eta
                                                                                                                                                                                                            eta1)
                                                                                                                                                                                                         (GHC.Types.[]
                                                                                                                                                                                                            @ GHC.Show.ShowS)))) }))
                                                                                                  Types.NoAgent
                                                                                                  -> Parsing.$fMyShowAgent1 }) -}
b45343d27c0f8711948bff24979749e2
  $fMyShowAgent_$cmyShow1 :: Types.GeneStateTable -> GHC.Base.String
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myShow} True False} \ (x :: Data.Map.Base.Map
                                                                                                           Types.ID
                                                                                                           Types.GeneState) ->
                                                                                                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myShow} False True} let {
                                                                                                                                                                                   ds1 :: [GHC.Types.Char]
                                                                                                                                                                                   = {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myShow} False True} ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myShow} False True} Parsing.$fMyShowAgent_$sconcatMap
                                                                                                                                                                                                                                                                                                                                                        @ (Types.ID,
                                                                                                                                                                                                                                                                                                                                                           Types.GeneState)
                                                                                                                                                                                                                                                                                                                                                        @ GHC.Types.Char
                                                                                                                                                                                                                                                                                                                                                        Parsing.$fMyShowAgent3)
                                                                                                                                                                                                                                                                       (Data.Map.Base.toAscList
                                                                                                                                                                                                                                                                          @ Types.ID
                                                                                                                                                                                                                                                                          @ Types.GeneState
                                                                                                                                                                                                                                                                          x)
                                                                                                                                                                                 } in
                                                                                                                                                                                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myShow} False True} case ds1 of wild {
                                                                                                                                                                                                                                                                   []
                                                                                                                                                                                                                                                                   -> GHC.Types.[]
                                                                                                                                                                                                                                                                        @ GHC.Types.Char
                                                                                                                                                                                                                                                                   : x1 xs
                                                                                                                                                                                                                                                                   -> GHC.Types.:
                                                                                                                                                                                                                                                                        @ GHC.Types.Char
                                                                                                                                                                                                                                                                        x1
                                                                                                                                                                                                                                                                        (Data.OldList.prependToAll
                                                                                                                                                                                                                                                                           @ GHC.Types.Char
                                                                                                                                                                                                                                                                           Parsing.$fMyShowAgent2
                                                                                                                                                                                                                                                                           xs) }) -}
18788d9d36bd8e326faa52b5bb68e707
  $fMyShowAgent_$cmyShow2 :: Types.GeneState -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.GeneState) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myShow} True True} case ds
                                                                                                       `cast`
                                                                                                     (Types.N:GeneState[0]) of wild {
                                                                                                  GHC.Types.False
                                                                                                  -> Parsing.$fMyShowAgent5
                                                                                                  GHC.Types.True
                                                                                                  -> Parsing.$fMyShowAgent4 }) -}
4bd89cff6a3621198f42dbb7712817ee
  $fMyShowAgent_$sconcatMap :: (a -> [b]) -> [a] -> [b]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a @ b (f :: a -> [b]) (xs :: [a]) ->
                 GHC.Base.build
                   @ b
                   (\ @ b1 (c :: b -> b1 -> b1)[OneShot] (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ a
                      @ b1
                      (\ (x :: a) (b2 :: b1)[OneShot] ->
                       GHC.Base.foldr @ b @ b1 c b2 (f x))
                      n
                      xs)) -}
629e3247283c8f2e867bad3afd74facc
  $fMyShowAgent_go :: [Types.Locus] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
29f07e6c1c85d39bdbf9a6272700102d
  $fMyShowGeneState :: Parsing.MyShow Types.GeneState
  DFunId
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyShowAgent_$cmyShow2
                  `cast`
                (Sym (Parsing.N:MyShow[0] <Types.GeneState>_N)) -}
29f07e6c1c85d39bdbf9a6272700102d
  $fMyShowID :: Parsing.MyShow Types.ID
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m2,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyShowID_$cmyShow
                  `cast`
                (Sym (Parsing.N:MyShow[0] <Types.ID>_N)) -}
1f38d8e577be35d05d03bb8136f6e33b
  $fMyShowID_$cmyShow :: Types.ID -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m2,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Types.ID) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myShow} True True} GHC.Show.$fShowInt_$cshow
                                                                                                  ds
                                                                                                    `cast`
                                                                                                  (Types.N:ID[0])) -}
29f07e6c1c85d39bdbf9a6272700102d
  $fMyShowLocus :: Parsing.MyShow Types.Locus
  DFunId
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyShowLocus_$cmyShow
                  `cast`
                (Sym (Parsing.N:MyShow[0] <Types.Locus>_N)) -}
1ebdd1a7e900ce6bcc1c237b0d2cf353
  $fMyShowLocus1 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myShow} False True} GHC.CString.unpackCString#
                                                                                                   "T"#) -}
b6dac1cab6690d1873783769c2bcb38c
  $fMyShowLocus_$cmyShow :: Types.Locus -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Types.Locus) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myShow} True True} case ds of wild {
                                                                                                  Types.Transposon
                                                                                                  -> Parsing.$fMyShowLocus1
                                                                                                  Types.CGene ds1
                                                                                                  -> case ds1 of wild1 { Types.Gene i t gs ->
                                                                                                     GHC.CString.unpackAppendCString#
                                                                                                       "G"#
                                                                                                       (GHC.Base.++
                                                                                                          @ GHC.Types.Char
                                                                                                          ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myShow} True True} GHC.Show.$fShowInt_$cshow
                                                                                                                                                                                            i `cast`
                                                                                                                                                                                            (Types.N:ID[0]))
                                                                                                          (GHC.CString.unpackAppendCString#
                                                                                                             ":"#
                                                                                                             (GHC.Base.++
                                                                                                                @ GHC.Types.Char
                                                                                                                ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myShow} True True} GHC.Show.$fShowInt_$cshow
                                                                                                                                                                                                  t `cast`
                                                                                                                                                                                                  (Types.N:Thres[0]))
                                                                                                                (GHC.CString.unpackAppendCString#
                                                                                                                   ":"#
                                                                                                                   ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myShow} True True} case gs
                                                                                                                                                                                                          `cast`
                                                                                                                                                                                                        (Types.N:GeneState[0]) of wild2 {
                                                                                                                                                                                                     GHC.Types.False
                                                                                                                                                                                                     -> Parsing.$fMyShowAgent5
                                                                                                                                                                                                     GHC.Types.True
                                                                                                                                                                                                     -> Parsing.$fMyShowAgent4 }))))) }
                                                                                                  Types.CTfbs ds1
                                                                                                  -> case ds1 of wild1 { Types.Tfbs i w ->
                                                                                                     GHC.Base.++
                                                                                                       @ GHC.Types.Char
                                                                                                       ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myShow} True True} GHC.Show.$fShowInt_$cshow
                                                                                                                                                                                         i `cast`
                                                                                                                                                                                         (Types.N:ID[0]))
                                                                                                       (GHC.CString.unpackAppendCString#
                                                                                                          ":"#
                                                                                                          ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myShow} True True} GHC.Show.$fShowInt_$cshow
                                                                                                                                                                                            w `cast`
                                                                                                                                                                                            (Types.N:Weight[0]))) } }) -}
29f07e6c1c85d39bdbf9a6272700102d
  $fMyShowMap :: Parsing.MyShow Types.GeneStateTable
  DFunId
  {- Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyShowAgent_$cmyShow1
                  `cast`
                (Sym (Parsing.N:MyShow[0] <Types.GeneStateTable>_N)) -}
29f07e6c1c85d39bdbf9a6272700102d
  $fMyShowThres :: Parsing.MyShow Types.Thres
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m2,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyShowThres_$cmyShow
                  `cast`
                (Sym (Parsing.N:MyShow[0] <Types.Thres>_N)) -}
8c529f421fcdc2f7a09b9e8ceeeab2cc
  $fMyShowThres_$cmyShow :: Types.Thres -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m2,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Types.Thres) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myShow} True True} GHC.Show.$fShowInt_$cshow
                                                                                                  ds
                                                                                                    `cast`
                                                                                                  (Types.N:Thres[0])) -}
29f07e6c1c85d39bdbf9a6272700102d
  $fMyShowWeight :: Parsing.MyShow Types.Weight
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m2,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyShowWeight_$cmyShow
                  `cast`
                (Sym (Parsing.N:MyShow[0] <Types.Weight>_N)) -}
1c65d16b042eee1a53953b1d6403b8b7
  $fMyShowWeight_$cmyShow :: Types.Weight -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m2,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Types.Weight) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myShow} True True} GHC.Show.$fShowInt_$cshow
                                                                                                  ds
                                                                                                    `cast`
                                                                                                  (Types.N:Weight[0])) -}
29f07e6c1c85d39bdbf9a6272700102d
  $fMyShow[] :: Parsing.MyShow Types.Chromosome
  DFunId
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyShow[]_$cmyShow
                  `cast`
                (Sym (Parsing.N:MyShow[0] <Types.Chromosome>_N)) -}
f7b3eb078a86d2b640c28e48a13c69e2
  $fMyShow[]1 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myShow} False True} GHC.CString.unpackCString#
                                                                                                   ","#) -}
2e21c12be4efdd4ac3085ea67f5e2cd0
  $fMyShow[]2 :: Types.Locus -> GHC.Base.String
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myShow} False True} Parsing.$fMyShowLocus_$cmyShow) -}
d56fc748c8100da68427d6855e4a61b4
  $fMyShow[]_$cmyShow :: Types.Chromosome -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (loci :: Types.Chromosome) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.myShow} True True} case GHC.Base.map
                                                                                                       @ Types.Locus
                                                                                                       @ [GHC.Types.Char]
                                                                                                       Parsing.$fMyShow[]2
                                                                                                       loci of wild {
                                                                                                  []
                                                                                                  -> GHC.Types.[]
                                                                                                       @ GHC.Types.Char
                                                                                                  : x xs1
                                                                                                  -> Data.OldList.intercalate_$spoly_go
                                                                                                       @ GHC.Types.Char
                                                                                                       x
                                                                                                       (Data.OldList.prependToAll
                                                                                                          @ [GHC.Types.Char]
                                                                                                          Parsing.$fMyShow[]1
                                                                                                          xs1) }) -}
302996b3e6a70a4be84cdf3fcbd557e2
  $tc'C:MyRead :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3770436424228763080##
                   4161177417639954326##
                   Parsing.$trModule
                   Parsing.$tc'C:MyRead1) -}
9e8d4f1f966b3d6c7cc6e0978a8d0e52
  $tc'C:MyRead1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:MyRead"#) -}
255439715d7dda1a9cea57ab9658b496
  $tc'C:MyShow :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16240969510164944662##
                   17210847975608181308##
                   Parsing.$trModule
                   Parsing.$tc'C:MyShow1) -}
f41fc88cb57bc79832a34fcddbfbf524
  $tc'C:MyShow1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:MyShow"#) -}
f25a0bcfee552ccccedb09cd82fdeb69
  $tcMyRead :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14619650262940000106##
                   9870738609682305533##
                   Parsing.$trModule
                   Parsing.$tcMyRead1) -}
faaef8e8a8bde91b7c9fa92df86b5166
  $tcMyRead1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "MyRead"#) -}
b3636e61a08aeedcf5b375cb54bc164a
  $tcMyShow :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1478929085263485914##
                   17240555592668252995##
                   Parsing.$trModule
                   Parsing.$tcMyShow1) -}
9d509f3add9dad22daec437247c38462
  $tcMyShow1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "MyShow"#) -}
56be822f58b76b71f89dad64326aa9b1
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Parsing.$trModule2
                   Parsing.$trModule1) -}
11a1df5961ed3addf8ec66534f3045cf
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Parsing"#) -}
ecc55bc0bf06b32d56b22956c81ba11f
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF"#) -}
e170eeb5073d8ab0725c4aa736e46072
  $w$sgo4 ::
    GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map Types.ID a1
    -> Data.Map.Base.Map Types.ID a1
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
fff7493a33dd4d48ec370fead57e0b68
  $wpoly_go4 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map Types.ID a
    -> [(Types.ID, a)]
    -> Data.Map.Base.Map Types.ID a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
b4aa992301abc012694fee7c72e70f99
  class MyRead a where
    myRead :: GHC.Base.String -> a
    {-# MINIMAL myRead #-}
29f07e6c1c85d39bdbf9a6272700102d
  class MyShow a where
    myShow :: a -> GHC.Base.String
    {-# MINIMAL myShow #-}
15d11c1caf00e62f7a5290f8e77612ad
  parseAgent :: [GHC.Types.Char] -> Types.Agent
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (ds :: [GHC.Types.Char]) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.parseAgent} True True} case GHC.Base.eqString
                                                                                                           ds
                                                                                                           Parsing.parseAgent5 of wild {
                                                                                                      GHC.Types.False
                                                                                                      -> let {
                                                                                                           genome :: Types.Genome
                                                                                                           = {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.parseAgent.genome} True False} GHC.Types.:
                                                                                                                                                                                                          @ Types.Chromosome
                                                                                                                                                                                                          (let {
                                                                                                                                                                                                             loci :: [GHC.Base.String]
                                                                                                                                                                                                             = {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.parseAgent.loci} True True} {__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.splitOn} True False} ({__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.splitOn} False True} Data.List.Split.Internals.split
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              @ GHC.Types.Char
{__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.onSublist} True False} Parsing.parseAgent2))
                                                                                                                                                                                                                                                                                                                                                                                                                   ds
                                                                                                                                                                                                           } in
                                                                                                                                                                                                           {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.parseAgent.genome} False True} GHC.Base.map
                                                                                                                                                                                                                                                                                                        @ [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                        @ Types.Locus
                                                                                                                                                                                                                                                                                                        Parsing.parseAgent1
                                                                                                                                                                                                                                                                                                        loci)
                                                                                                                                                                                                          (GHC.Types.[]
                                                                                                                                                                                                             @ Types.Chromosome)
                                                                                                         } in
                                                                                                         Types.Agent
                                                                                                           genome
                                                                                                           ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.parseAgent.gst} True True} World.gSTFromGenome
                                                                                                                                                                                                     genome)
                                                                                                      GHC.Types.True
                                                                                                      -> Types.NoAgent }) -}
770c372e42eb8c58edae71c330303ef9
  parseAgent1 :: GHC.Base.String -> Types.Locus
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.parseAgent} False True} {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.parseAgent.genome} False True} Parsing.$fMyReadLocus_$cmyRead) -}
8e5ad9cc588eef3bea7085e28c0bfe12
  parseAgent2 :: Data.List.Split.Internals.Splitter GHC.Types.Char
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.parseAgent} False True} {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.parseAgent.loci} False True} {__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.splitOn} False True} case Data.List.Split.Internals.defaultSplitter
                                                                                                                                                                                                                                                                                                               @ GHC.Prim.Any of wild { Data.List.Split.Internals.Splitter ds ds1 ds2 ds3 ds4 ->
                                                                                                                                                                                                                                                                                                        {__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.dropDelims} True False} Data.List.Split.Internals.Splitter
                                                                                                                                                                                                                                                                                                                                                                                                                       @ GHC.Types.Char
                                                                                                                                                                                                                                                                                                                                                                                                                       Parsing.parseAgent3
                                                                                                                                                                                                                                                                                                                                                                                                                         `cast`
                                                                                                                                                                                                                                                                                                                                                                                                                       (Sym (Data.List.Split.Internals.N:Delimiter[0]
                                                                                                                                                                                                                                                                                                                                                                                                                                 <GHC.Types.Char>_R))
                                                                                                                                                                                                                                                                                                                                                                                                                       Data.List.Split.Internals.Drop
                                                                                                                                                                                                                                                                                                                                                                                                                       ds2
                                                                                                                                                                                                                                                                                                                                                                                                                       ds3
                                                                                                                                                                                                                                                                                                                                                                                                                       ds4 }) -}
fe790e300c5bbf51efba0b2d16df8667
  parseAgent3 :: [GHC.Types.Char -> GHC.Types.Bool]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.parseAgent} False True} {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.parseAgent.loci} False True} {__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.splitOn} False True} {__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.onSublist} False True} GHC.Base.map
                                                                                                                                                                                                                                                                                                                                                                                                                      @ GHC.Types.Char
                                                                                                                                                                                                                                                                                                                                                                                                                      @ (GHC.Types.Char
                                                                                                                                                                                                                                                                                                                                                                                                                         -> GHC.Types.Bool)
                                                                                                                                                                                                                                                                                                                                                                                                                      Parsing.$fMyReadLocus_lvl3
                                                                                                                                                                                                                                                                                                                                                                                                                      Parsing.parseAgent4) -}
12595dfb3a6d1b6a7b0ac7f9234e6f8c
  parseAgent4 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.parseAgent} False True} {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.parseAgent.loci} False True} GHC.CString.unpackCString#
                                                                                                                                                                                                ","#) -}
823bbf0dc9e217b34e20a1f2b3bfea7c
  parseAgent5 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing.parseAgent} False True} GHC.CString.unpackCString#
                                                                                                       "NoAgent"#) -}
instance Parsing.MyRead [Types.GeneState]
  = Parsing.$fMyReadGeneState
instance Parsing.MyRead [Types.ID] = Parsing.$fMyReadID
instance Parsing.MyRead [Types.Locus] = Parsing.$fMyReadLocus
instance Parsing.MyRead [Data.Map.Base.Map] = Parsing.$fMyReadMap
instance Parsing.MyRead [Types.Thres] = Parsing.$fMyReadThres
instance Parsing.MyRead [Types.Weight] = Parsing.$fMyReadWeight
instance Parsing.MyRead [[]] = Parsing.$fMyRead[]
instance Parsing.MyShow [Types.Agent] = Parsing.$fMyShowAgent
instance Parsing.MyShow [Types.GeneState]
  = Parsing.$fMyShowGeneState
instance Parsing.MyShow [Types.ID] = Parsing.$fMyShowID
instance Parsing.MyShow [Types.Locus] = Parsing.$fMyShowLocus
instance Parsing.MyShow [Data.Map.Base.Map] = Parsing.$fMyShowMap
instance Parsing.MyShow [Types.Thres] = Parsing.$fMyShowThres
instance Parsing.MyShow [Types.Weight] = Parsing.$fMyShowWeight
instance Parsing.MyShow [[]] = Parsing.$fMyShow[]
"SPEC/Parsing concatMap @ [] _ _" [ALWAYS] forall @ a
                                                  @ b
                                                  ($dFoldable :: Data.Foldable.Foldable [])
  Data.Foldable.concatMap @ [] @ a @ b $dFoldable
  = Parsing.$fMyShowAgent_$sconcatMap @ a @ b
"SPEC/Parsing fromList @ ID _" [ALWAYS] forall @ a
                                               ($dOrd :: GHC.Classes.Ord Types.ID)
  Data.Map.Strict.fromList @ Types.ID @ a $dOrd
  = Parsing.$fMyReadMap_$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

