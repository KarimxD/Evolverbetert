
==================== FINAL INTERFACE ====================
2017-05-01 15:14:55.638897 UTC

interface Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Parsing 8002
  interface hash: b7a8f11d279ef2163754c02e231b7f20
  ABI hash: 3ce07fed38dc929c2194d93b60f265f9
  export-list hash: c53f6fd4706f2be4c1d9cfdc774ad26b
  orphan hash: 4019ab1efae15e4129c7605a4205bb59
  flag hash: 0ffea4b86a7d632aec14361a41b8af4a
  sig of: Nothing
  used TH splices: False
  where
exports:
  Parsing.parseAgent
  Parsing.MyRead{Parsing.myRead}
  Parsing.MyShow{Parsing.myShow}
module dependencies: Misc MyRandom Parameters Types World
package dependencies: MonadRandom-0.5.1@MonadRandom-0.5.1-IY6HiWu00vQLARukQW3KMH
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      random-shuffle-0.0.4@random-shuffle-0.0.4-97h14tPp7Ru21125sv6IMi
                      split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:MyRandom
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: MonadRandom-0.5.1@MonadRandom-0.5.1-IY6HiWu00vQLARukQW3KMH:Control.Monad.Trans.Random.Lazy
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity base-4.9.1.0:Data.List.NonEmpty
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Semigroup
                         base-4.9.1.0:Data.Type.Equality base-4.9.1.0:Data.Version
                         base-4.9.1.0:Data.Void base-4.9.1.0:GHC.Exts
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
import  -/  Types 553fe5882bac7964d9e18ed5fc1899e3
  exports: f2d3892cae9faa75e4d9e5ce4ff3401f
  Agent 60b09a4470e22147e56c42e0035f87fe
  Agent 4db872eec646ad15f031961699453d7d
  CGene ea527b21dbbed4eaf4515b5bd6300e17
  CTfbs 6f551280d2a6113da1a228f358db5137
  Chromosome 24cfb6cfcc1852ed37afecdf0ad745c4
  GS f27014f9fcd601a90b5d2335c8847a52
  Gene f6a3f11ab63a627039089add273149ba
  GeneState 385bd618b8cbce3dec65b0dc93936685
  GeneStateTable 9e77d0240feb1db03b5609bb787daa5d
  Genome 31e3370e16839f7422c62e17856b87c5
  ID 7e0b9a9dfd2784dbee8f381e1c0e5170
  ID 16d6e25ed95d1e87249ca076165ebe74
  Locus 657e65e0e08e728d8f24c605538f3349
  NoAgent 339da968cef368d0f2975264de06a36a
  Tfbs 66713721bbe5cab4288d866c04987130
  Thres eff4e38798bfeab4b1859234955c53fa
  Thres 2ba0a787aa56e3869ddba33deece9cad
  Transposon 6e61a1b8e09c06aa0573fa7cc5a8f71e
  Weight a00b9d08ca7f7b471dfbf1a3e4747225
  Weight fec0f96660f082d9ff826ee5f52d2dd5
  geneStateTable 6b9ce6667cb6ef0ceb4e5feb484a2261
  genome caf01e8667618822fcc76af63288dcf0
import  -/  World fae719142ff1d0cc47926353810ce652
  exports: 1e87020408db611578f66aeb540278f6
  gSTFromGenome 6e4d0dddfad141c74fcff0aea3d82327
import  -/  array-0.5.1.1@array-0.5.1.1:Data.Array.IArray 606f8bb830eb2a88c29c91f27c77f304
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base d432f6875983131473086af8cb290590
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Strict 9d0c0962e53270a0a3fb5cb63723a381
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split c60198a427bfd51d9fb4562c059ec1d2
import  -/  split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals 25dced234ed01c9c803d678763a4d772
66d79346676cea780e2e08b8dd36f068
  $fMyReadGeneState :: Parsing.MyRead Types.GeneState
  DFunId
  {- Arity: 1, Strictness: <L,U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyReadGeneState_$cmyRead
                  `cast`
                (Sym (Parsing.N:MyRead[0]) <Types.GeneState>_N) -}
00872b5c275b099c986452a09110dad5
  $fMyReadGeneState1 :: GHC.Base.String -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 case Text.Read.readEither6
                        @ GHC.Integer.Type.Integer
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Integer.Type.Integer
                           Parsing.$fMyReadGeneState4
                           s) of wild {
                   [] -> Parsing.$fMyReadGeneState3
                   : x ds
                   -> case ds of wild1 {
                        [] -> x : ipv ipv1 -> Parsing.$fMyReadGeneState2 } }) -}
86be76bed4b54c059372b8cf8ac0cd1c
  $fMyReadGeneState2 :: GHC.Integer.Type.Integer
  {- Strictness: x -}
82694f38eade9fb2114382ddb2987ce3
  $fMyReadGeneState3 :: GHC.Integer.Type.Integer
  {- Strictness: x -}
98916bfa4558a98dc0d87c2846a79a69
  $fMyReadGeneState4 ::
    Text.ParserCombinators.ReadP.P GHC.Integer.Type.Integer
  {- Unfolding: (GHC.Read.$fReadInteger3
                   GHC.Read.$fReadInteger_$sconvertInt
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Integer.Type.Integer
                   (Text.Read.readEither5 @ GHC.Integer.Type.Integer)) -}
d69b1ae1cbd52a8a960c90d27ce02f0d
  $fMyReadGeneState_$cmyRead :: GHC.Base.String -> Types.GeneState
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Base.String) ->
                 case GHC.Integer.Type.gtInteger#
                        (Parsing.$fMyReadGeneState1 x)
                        Types.$fNumGeneState_dt of wild { DEFAULT ->
                 (GHC.Prim.tagToEnum# @ GHC.Types.Bool wild)
                   `cast`
                 (Sym (Types.N:GeneState[0])) }) -}
66d79346676cea780e2e08b8dd36f068
  $fMyReadID :: Parsing.MyRead Types.ID
  DFunId
  {- Arity: 1, Strictness: <L,U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyReadID_$cmyRead
                  `cast`
                (Sym (Parsing.N:MyRead[0]) <Types.ID>_N) -}
32ef5a28e7d5dc25eec59256a4a1b03b
  $fMyReadID1 :: GHC.Base.String -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 case Text.Read.readEither6
                        @ GHC.Types.Int
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Types.Int
                           Parsing.$fMyReadID4
                           s) of wild {
                   [] -> Parsing.$fMyReadID3
                   : x ds
                   -> case ds of wild1 {
                        [] -> x : ipv ipv1 -> Parsing.$fMyReadID2 } }) -}
d8eec2606b711e13de164cb8edab8a36
  $fMyReadID2 :: GHC.Types.Int
  {- Strictness: x -}
7ef56a72f2dde1884d2c001702112ad9
  $fMyReadID3 :: GHC.Types.Int
  {- Strictness: x -}
9b288815cb737c62b2ab76624e7f2303
  $fMyReadID4 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: (GHC.Read.$fReadInt3
                   GHC.Read.$fReadInt_$sconvertInt
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Int
                   (Text.Read.readEither5 @ GHC.Types.Int)) -}
ac02a9d2fd895d42991bd7e879b98be6
  $fMyReadID_$cmyRead :: GHC.Base.String -> Types.ID
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Parsing.$fMyReadID1
                  `cast`
                (<GHC.Base.String>_R ->_R Sym (Types.N:ID[0])) -}
66d79346676cea780e2e08b8dd36f068
  $fMyReadLocus :: Parsing.MyRead Types.Locus
  DFunId
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyReadLocus_$cmyRead
                  `cast`
                (Sym (Parsing.N:MyRead[0]) <Types.Locus>_N) -}
43338294c4c644210c01c36e071c4b8d
  $fMyReadLocus_$cmyRead :: GHC.Base.String -> Types.Locus
  {- Arity: 1, Strictness: <S,1*U> -}
66d79346676cea780e2e08b8dd36f068
  $fMyReadMap :: Parsing.MyRead Types.GeneStateTable
  DFunId
  {- Arity: 1, Strictness: <L,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyReadMap_$cmyRead
                  `cast`
                (Sym (Parsing.N:MyRead[0]) <Types.GeneStateTable>_N) -}
4d22666036decb369d7e48bb05b62018
  $fMyReadMap1 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.eftInt 0# 9223372036854775807#) -}
896c431eb2084a3aedc3dd41bf6987ae
  $fMyReadMap2 ::
    Data.Map.Base.Map Types.ID a1
    -> [(Types.ID, a1)] -> Data.Map.Base.Map Types.ID a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
10273c4de6547b42de6056d96d5f3b05
  $fMyReadMap_$cmyRead :: GHC.Base.String -> Types.GeneStateTable
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: [GHC.Types.Char]) ->
                 Parsing.$fMyReadMap_$sfromList
                   @ Types.GeneState
                   (GHC.List.zip
                      @ Types.ID
                      @ Types.GeneState
                      Parsing.$fMyReadMap1 `cast` ([Sym (Types.N:ID[0])])_R
                      (Parsing.$fMyReadMap_go x))) -}
fb6bff1840bda7d4a8cbc0a62ff59989
  $fMyReadMap_$sfromList ::
    [(Types.ID, a)] -> Data.Map.Base.Map Types.ID a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(Types.ID, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ Types.ID @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case x of x1 { DEFAULT ->
                           case kx `cast` (Types.N:ID[0]) of nt { GHC.Types.I# ipv ->
                           Data.Map.Base.Bin
                             @ Types.ID
                             @ a
                             1#
                             nt `cast` (Sym (Types.N:ID[0]))
                             x1
                             (Data.Map.Base.Tip @ Types.ID @ a)
                             (Data.Map.Base.Tip @ Types.ID @ a) } }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx `cast` (Types.N:ID[0]) of wild4 { GHC.Types.I# x1 ->
                           case ky `cast` (Types.N:ID[0]) of wild5 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>=# x1 y) of wild6 {
                             GHC.Types.False
                             -> case x of x0 { DEFAULT ->
                                Parsing.$wpoly_go4
                                  @ a
                                  1#
                                  (Data.Map.Base.Bin
                                     @ Types.ID
                                     @ a
                                     1#
                                     (GHC.Types.I# x1) `cast` (Sym (Types.N:ID[0]))
                                     x0
                                     (Data.Map.Base.Tip @ Types.ID @ a)
                                     (Data.Map.Base.Tip @ Types.ID @ a))
                                  wild2 }
                             GHC.Types.True
                             -> case x of x0 { DEFAULT ->
                                Parsing.$fMyReadMap2
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ Types.ID
                                     @ a
                                     1#
                                     (GHC.Types.I# x1) `cast` (Sym (Types.N:ID[0]))
                                     x0
                                     (Data.Map.Base.Tip @ Types.ID @ a)
                                     (Data.Map.Base.Tip @ Types.ID @ a))
                                  wild2 } } } } } } } }) -}
23a4d3b72242570db7b3494f9dad1f66
  $fMyReadMap_go :: [GHC.Types.Char] -> [Types.GeneState]
  {- Arity: 1, Strictness: <S,1*U> -}
66d79346676cea780e2e08b8dd36f068
  $fMyReadThres :: Parsing.MyRead Types.Thres
  DFunId
  {- Arity: 1, Strictness: <L,U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyReadThres_$cmyRead
                  `cast`
                (Sym (Parsing.N:MyRead[0]) <Types.Thres>_N) -}
39f9da8d90f52f51f3fb13caeb81d0e7
  $fMyReadThres_$cmyRead :: GHC.Base.String -> Types.Thres
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Parsing.$fMyReadID1
                  `cast`
                (<GHC.Base.String>_R ->_R Sym (Types.N:Thres[0])) -}
66d79346676cea780e2e08b8dd36f068
  $fMyReadWeight :: Parsing.MyRead Types.Weight
  DFunId
  {- Arity: 1, Strictness: <L,U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyReadWeight_$cmyRead
                  `cast`
                (Sym (Parsing.N:MyRead[0]) <Types.Weight>_N) -}
ed693e6d2c98fdc6bbc9da653f730118
  $fMyReadWeight_$cmyRead :: GHC.Base.String -> Types.Weight
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Parsing.$fMyReadID1
                  `cast`
                (<GHC.Base.String>_R ->_R Sym (Types.N:Weight[0])) -}
66d79346676cea780e2e08b8dd36f068
  $fMyRead[] :: Parsing.MyRead Types.Chromosome
  DFunId
  {- Arity: 1, Strictness: <L,U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyRead[]_$cmyRead
                  `cast`
                (Sym (Parsing.N:MyRead[0]) <Types.Chromosome>_N) -}
7b24760d182095d179e20342f24697fe
  $fMyRead[]1 :: [GHC.Types.Char] -> [[GHC.Types.Char]]
  {- Unfolding: (Data.List.Split.Internals.splitOn
                   @ GHC.Types.Char
                   GHC.Classes.$fEqChar
                   Parsing.$fMyRead[]2) -}
315263a0920182b71039a28e7b1ca446
  $fMyRead[]2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ","#) -}
c934c4f9e76df8c6221bf03b1a6a5a8b
  $fMyRead[]_$cmyRead :: GHC.Base.String -> Types.Chromosome
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [GHC.Types.Char]) ->
                 GHC.Base.build
                   @ Types.Locus
                   (\ @ b1
                      (c :: Types.Locus -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ [GHC.Types.Char]
                      @ b1
                      (GHC.Base.mapFB
                         @ Types.Locus
                         @ b1
                         @ [GHC.Types.Char]
                         c
                         Parsing.$fMyReadLocus_$cmyRead)
                      n
                      (Parsing.$fMyRead[]1 x))) -}
af3e16990469639999cf6ec1c12ceb98
  $fMyShowAgent :: Parsing.MyShow Types.Agent
  DFunId
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyShowAgent_$cmyShow
                  `cast`
                (Sym (Parsing.N:MyShow[0] <Types.Agent>_N)) -}
cd1d82002c544cd57e9d205a6e5f6ee7
  $fMyShowAgent1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoAgent"#) -}
915bbcd00ad00cb5ad6843aa22a96118
  $fMyShowAgent2 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
531951bf9da44b632ce422b79796d39d
  $fMyShowAgent3 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ' '#) -}
faa65c48d6cb6d4352a8b483c0f09ddf
  $fMyShowAgent_$cmyShow :: Types.Agent -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Types.Agent) ->
                 case ds of wild {
                   Types.Agent ipv ipv1
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (case ipv of wild1 {
                              [] -> case GHC.List.badHead ret_ty [GHC.Types.Char] of {}
                              : x ds1
                              -> GHC.Show.showLitString
                                   (Parsing.$fMyShowAgent_go x)
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.shows6
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.shows5
                                         (let {
                                            ww2 :: [GHC.Types.Char]
                                            = case Parsing.$fMyShowAgent_go10
                                                     (GHC.Types.[] @ GHC.Types.Char)
                                                     ipv1 of wild2 {
                                                [] -> GHC.Types.[] @ GHC.Types.Char
                                                : x1 xs
                                                -> GHC.Types.:
                                                     @ GHC.Types.Char
                                                     x1
                                                     (Data.OldList.prependToAll
                                                        @ GHC.Types.Char
                                                        Parsing.$fMyShowAgent3
                                                        xs) }
                                          } in
                                          GHC.Show.$fShow(,)_$sgo
                                            Parsing.$fMyShowAgent2
                                            (\ (eta1 :: GHC.Base.String) ->
                                             GHC.Show.shows_$cshowList1 ww2 eta1)
                                            (GHC.Types.[] @ GHC.Show.ShowS)))) }))
                   Types.NoAgent -> Parsing.$fMyShowAgent1 }) -}
b8c5df7ab4bee1a3ac8e024b00d32f84
  $fMyShowAgent_go :: [Types.Locus] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
ea600b6840d4eabe9e00bddd518bf379
  $fMyShowAgent_go10 ::
    [GHC.Types.Char]
    -> Data.Map.Base.Map Types.ID Types.GeneState -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
af3e16990469639999cf6ec1c12ceb98
  $fMyShowGeneState :: Parsing.MyShow Types.GeneState
  DFunId
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyShowGeneState_$cmyShow
                  `cast`
                (Sym (Parsing.N:MyShow[0] <Types.GeneState>_N)) -}
390cc040c9b32baa728b8b3454221ffa
  $fMyShowGeneState1 :: GHC.Base.String
  {- Unfolding: (case GHC.Show.$wshowSignedInt
                        0#
                        1#
                        (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                 GHC.Types.: @ GHC.Types.Char ww5 ww6 }) -}
a8ca5346c2948455870dbfcbe77bc3cd
  $fMyShowGeneState2 :: GHC.Base.String
  {- Unfolding: (case GHC.Show.$wshowSignedInt
                        0#
                        0#
                        (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                 GHC.Types.: @ GHC.Types.Char ww5 ww6 }) -}
489396b210fa67bdaf1927c9680dfec4
  $fMyShowGeneState_$cmyShow :: Types.GeneState -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.GeneState) ->
                 case ds `cast` (Types.N:GeneState[0]) of wild {
                   GHC.Types.False -> Parsing.$fMyShowGeneState2
                   GHC.Types.True -> Parsing.$fMyShowGeneState1 }) -}
af3e16990469639999cf6ec1c12ceb98
  $fMyShowID :: Parsing.MyShow Types.ID
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m2,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyShowID_$cmyShow
                  `cast`
                (Sym (Parsing.N:MyShow[0] <Types.ID>_N)) -}
3f704cea5bdf1a5774eeebfd647cf5d9
  $fMyShowID_$cmyShow :: Types.ID -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m2,
     Unfolding: InlineRule (0, True, True)
                GHC.Show.$fShowInt_$cshow
                  `cast`
                (Sym (Types.N:ID[0]) ->_R <GHC.Base.String>_R) -}
af3e16990469639999cf6ec1c12ceb98
  $fMyShowLocus :: Parsing.MyShow Types.Locus
  DFunId
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyShowLocus_$cmyShow
                  `cast`
                (Sym (Parsing.N:MyShow[0] <Types.Locus>_N)) -}
073b4ff96e9f17aa85bec348514e5931
  $fMyShowLocus1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "T"#) -}
99dccc93f34f73dc5d0ac4e9c77627f9
  $fMyShowLocus_$cmyShow :: Types.Locus -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Types.Locus) ->
                 case ds of wild {
                   Types.Transposon -> Parsing.$fMyShowLocus1
                   Types.CGene ds1
                   -> case ds1 of wild1 { Types.Gene i t gs ->
                      GHC.CString.unpackAppendCString#
                        "G"#
                        (case i `cast` (Types.N:ID[0]) of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt
                                0#
                                ww3
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Base.++
                           @ GHC.Types.Char
                           (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                           (GHC.CString.unpackAppendCString#
                              ":"#
                              (case t `cast` (Types.N:Thres[0]) of ww1 { GHC.Types.I# ww8 ->
                               case GHC.Show.$wshowSignedInt
                                      0#
                                      ww8
                                      (GHC.Types.[] @ GHC.Types.Char) of ww9 { (#,#) ww10 ww11 ->
                               GHC.Base.++
                                 @ GHC.Types.Char
                                 (GHC.Types.: @ GHC.Types.Char ww10 ww11)
                                 (GHC.CString.unpackAppendCString#
                                    ":"#
                                    (case gs `cast` (Types.N:GeneState[0]) of wild2 {
                                       GHC.Types.False -> Parsing.$fMyShowGeneState2
                                       GHC.Types.True -> Parsing.$fMyShowGeneState1 })) } })) } }) }
                   Types.CTfbs ds1
                   -> case ds1 of wild1 { Types.Tfbs i w ->
                      case i `cast` (Types.N:ID[0]) of ww2 { GHC.Types.I# ww3 ->
                      case GHC.Show.$wshowSignedInt
                             0#
                             ww3
                             (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                        (GHC.CString.unpackAppendCString#
                           ":"#
                           (case w `cast` (Types.N:Weight[0]) of ww1 { GHC.Types.I# ww8 ->
                            case GHC.Show.$wshowSignedInt
                                   0#
                                   ww8
                                   (GHC.Types.[] @ GHC.Types.Char) of ww9 { (#,#) ww10 ww11 ->
                            GHC.Types.: @ GHC.Types.Char ww10 ww11 } })) } } } }) -}
af3e16990469639999cf6ec1c12ceb98
  $fMyShowMap :: Parsing.MyShow Types.GeneStateTable
  DFunId
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyShowMap_$cmyShow
                  `cast`
                (Sym (Parsing.N:MyShow[0] <Types.GeneStateTable>_N)) -}
17245d5a0d73a1c0d1edb0ce3b7ff12e
  $fMyShowMap1 ::
    Data.Map.Base.Map Types.ID Types.GeneState -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Data.Map.Base.Map Types.ID Types.GeneState) ->
                 Parsing.$fMyShowAgent_go10 (GHC.Types.[] @ GHC.Types.Char) x) -}
6590dd9a083e7a31897504b1b85449cf
  $fMyShowMap_$cmyShow :: Types.GeneStateTable -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Map.Base.Map Types.ID Types.GeneState) ->
                 case Parsing.$fMyShowMap1 x of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : x1 xs
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        x1
                        (Data.OldList.prependToAll
                           @ GHC.Types.Char
                           Parsing.$fMyShowAgent3
                           xs) }) -}
af3e16990469639999cf6ec1c12ceb98
  $fMyShowThres :: Parsing.MyShow Types.Thres
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m2,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyShowThres_$cmyShow
                  `cast`
                (Sym (Parsing.N:MyShow[0] <Types.Thres>_N)) -}
7564cc03a606a2c85c869680a568874c
  $fMyShowThres_$cmyShow :: Types.Thres -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m2,
     Unfolding: InlineRule (0, True, True)
                GHC.Show.$fShowInt_$cshow
                  `cast`
                (Sym (Types.N:Thres[0]) ->_R <GHC.Base.String>_R) -}
af3e16990469639999cf6ec1c12ceb98
  $fMyShowWeight :: Parsing.MyShow Types.Weight
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m2,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyShowWeight_$cmyShow
                  `cast`
                (Sym (Parsing.N:MyShow[0] <Types.Weight>_N)) -}
d4449f916f7d2924c55ee691e1727ae2
  $fMyShowWeight_$cmyShow :: Types.Weight -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m2,
     Unfolding: InlineRule (0, True, True)
                GHC.Show.$fShowInt_$cshow
                  `cast`
                (Sym (Types.N:Weight[0]) ->_R <GHC.Base.String>_R) -}
af3e16990469639999cf6ec1c12ceb98
  $fMyShow[] :: Parsing.MyShow Types.Chromosome
  DFunId
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parsing.$fMyShow[]_$cmyShow
                  `cast`
                (Sym (Parsing.N:MyShow[0] <Types.Chromosome>_N)) -}
659b4e0c53f0849ed719ecbe579f704a
  $fMyShow[]_$cmyShow :: Types.Chromosome -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (loci :: Types.Chromosome) ->
                 case GHC.Base.map
                        @ Types.Locus
                        @ [GHC.Types.Char]
                        Parsing.$fMyShowLocus_$cmyShow
                        loci of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : x xs1
                   -> Data.OldList.intercalate_$spoly_go
                        @ GHC.Types.Char
                        x
                        (Data.OldList.prependToAll
                           @ [GHC.Types.Char]
                           Parsing.$fMyRead[]2
                           xs1) }) -}
302996b3e6a70a4be84cdf3fcbd557e2
  $tc'C:MyRead :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3770436424228763080##
                   4161177417639954326##
                   Parsing.$trModule
                   Parsing.$tc'C:MyRead1) -}
9e8d4f1f966b3d6c7cc6e0978a8d0e52
  $tc'C:MyRead1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:MyRead"#) -}
255439715d7dda1a9cea57ab9658b496
  $tc'C:MyShow :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16240969510164944662##
                   17210847975608181308##
                   Parsing.$trModule
                   Parsing.$tc'C:MyShow1) -}
f41fc88cb57bc79832a34fcddbfbf524
  $tc'C:MyShow1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:MyShow"#) -}
f25a0bcfee552ccccedb09cd82fdeb69
  $tcMyRead :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14619650262940000106##
                   9870738609682305533##
                   Parsing.$trModule
                   Parsing.$tcMyRead1) -}
faaef8e8a8bde91b7c9fa92df86b5166
  $tcMyRead1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "MyRead"#) -}
b3636e61a08aeedcf5b375cb54bc164a
  $tcMyShow :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1478929085263485914##
                   17240555592668252995##
                   Parsing.$trModule
                   Parsing.$tcMyShow1) -}
9d509f3add9dad22daec437247c38462
  $tcMyShow1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "MyShow"#) -}
56be822f58b76b71f89dad64326aa9b1
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Parsing.$trModule2
                   Parsing.$trModule1) -}
11a1df5961ed3addf8ec66534f3045cf
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Parsing"#) -}
ecc55bc0bf06b32d56b22956c81ba11f
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF"#) -}
7c4ba03963211fdb781f9a12cb56199b
  $w$sgo4 ::
    GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map Types.ID a1
    -> Data.Map.Base.Map Types.ID a1
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
68cd4f41d29431dfcdc6069777f9eb44
  $wpoly_go4 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map Types.ID a
    -> [(Types.ID, a)]
    -> Data.Map.Base.Map Types.ID a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
66d79346676cea780e2e08b8dd36f068
  class MyRead a where
    myRead :: GHC.Base.String -> a
    {-# MINIMAL myRead #-}
af3e16990469639999cf6ec1c12ceb98
  class MyShow a where
    myShow :: a -> GHC.Base.String
    {-# MINIMAL myShow #-}
ca7345f64f44f597a83f71f2caf7bf5c
  parseAgent :: [GHC.Types.Char] -> Types.Agent
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (ds :: [GHC.Types.Char]) ->
                 case GHC.Base.eqString ds Parsing.$fMyShowAgent1 of wild {
                   GHC.Types.False
                   -> let {
                        genome :: [Types.Locus]
                        = GHC.Base.map
                            @ [GHC.Types.Char]
                            @ Types.Locus
                            Parsing.$fMyReadLocus_$cmyRead
                            (Parsing.$fMyRead[]1 ds)
                      } in
                      let {
                        genome1 :: Types.Genome
                        = GHC.Types.:
                            @ Types.Chromosome
                            genome
                            (GHC.Types.[] @ Types.Chromosome)
                      } in
                      Types.Agent
                        genome1
                        (World.gSTFromGenome_go1
                           (World.gSTFromGenome_go genome1)
                           (Data.Map.Base.Tip @ Types.ID @ Types.GeneState))
                   GHC.Types.True -> Types.NoAgent }) -}
instance Parsing.MyRead [Types.GeneState]
  = Parsing.$fMyReadGeneState
instance Parsing.MyRead [Types.ID] = Parsing.$fMyReadID
instance Parsing.MyRead [Types.Locus] = Parsing.$fMyReadLocus
instance Parsing.MyRead [Data.Map.Base.Map] = Parsing.$fMyReadMap
instance Parsing.MyRead [Types.Thres] = Parsing.$fMyReadThres
instance Parsing.MyRead [Types.Weight] = Parsing.$fMyReadWeight
instance Parsing.MyRead [[]] = Parsing.$fMyRead[]
instance Parsing.MyShow [Types.Agent] = Parsing.$fMyShowAgent
instance Parsing.MyShow [Types.GeneState]
  = Parsing.$fMyShowGeneState
instance Parsing.MyShow [Types.ID] = Parsing.$fMyShowID
instance Parsing.MyShow [Types.Locus] = Parsing.$fMyShowLocus
instance Parsing.MyShow [Data.Map.Base.Map] = Parsing.$fMyShowMap
instance Parsing.MyShow [Types.Thres] = Parsing.$fMyShowThres
instance Parsing.MyShow [Types.Weight] = Parsing.$fMyShowWeight
instance Parsing.MyShow [[]] = Parsing.$fMyShow[]
"SPEC/Parsing fromList @ ID _" [ALWAYS] forall @ a
                                               ($dOrd :: GHC.Classes.Ord Types.ID)
  Data.Map.Strict.fromList @ Types.ID @ a $dOrd
  = Parsing.$fMyReadMap_$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

