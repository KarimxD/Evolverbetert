
==================== FINAL INTERFACE ====================
2017-04-18 14:25:48.997596 UTC

interface Evolverbetert-0.1.0.0-V8JIjv9qj8K8hV6s9LpTj:World 8002
  interface hash: ae21d09f1df5595e3dea17f9fe040f8b
  ABI hash: c611f0fc10937d859e65676507443411
  export-list hash: 9c4287b179a09b09a2ce1373edf801fa
  orphan hash: 6a4cd99e9633423ae0ccb6ad0174fe14
  flag hash: ab396f11155bd696ab63895436e6f1df
  sig of: Nothing
  used TH splices: False
  where
exports:
  World.agent0
  World.connected
  World.defaultGst
  World.devAg
  World.fitnessAgent
  World.fitnessGST
  World.gSTFromGenome
  World.goodRandomGenome
  World.groupGeneTfbs
  World.hammDist
  World.hammDistAg
  World.isGene
  World.locusEffect
  World.makeGst
  World.parseLoc
  World.randomAgent
  World.randomChromosome
  World.randomGene
  World.randomGenome
  World.randomTfbs
  World.reduceToGenes
  World.reduceToTfbss
  World.sameGST
  World.showGST
  World.takeWhileInclusive
  World.targetExpression
  World.targetGST
  World.updateAgent
  World.updateChrom
  World.updateGenome
  World.updateLoc
  World.Agent{World.Agent World.NoAgent geneStateTable genome}
  World.Agents
  World.Chromosome
  World.Env
  World.Gene{World.Gene genSt iD thres}
  World.GeneState
  World.GeneStateTable
  World.Genome
  World.ID
  World.Locus{World.CGene World.CTfbs World.Transposon}
  World.Tfbs{World.Tfbs}
  World.Thres
  World.Weight
  World.World
module dependencies: Misc MyRandom Parameters
package dependencies: MonadRandom-0.5.1@MonadRandom-0.5.1-IY6HiWu00vQLARukQW3KMH
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      containers-0.5.7.1@containers-0.5.7.1
                      data-inttrie-0.1.2@data-inttrie-0.1.2-LwMrrR1qHVOJfuoxOFd7lf
                      data-memocombinators-0.5.1@data-memocombinators-0.5.1-7Cm5blFlrBsIAp5LANmGFG
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      random-shuffle-0.0.4@random-shuffle-0.0.4-97h14tPp7Ru21125sv6IMi
                      split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: Evolverbetert-0.1.0.0-V8JIjv9qj8K8hV6s9LpTj:MyRandom
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: MonadRandom-0.5.1@MonadRandom-0.5.1-IY6HiWu00vQLARukQW3KMH:Control.Monad.Trans.Random.Lazy
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity base-4.9.1.0:Data.List.NonEmpty
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Semigroup
                         base-4.9.1.0:Data.Type.Equality base-4.9.1.0:Data.Version
                         base-4.9.1.0:Data.Void base-4.9.1.0:GHC.Exts
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
import  -/  Misc 29c0d45b091ca7f5a721f96290bb9455
  exports: df091b8235b328934b9b8728c1f465fb
  valueResultPairs 887755138cb8f5d412b29378e2e0d798
import  -/  MyRandom 33611e374b56347aadc8c80984a9fa4c
  exports: 3a660b6271794f39dcef688ebf3015a0
  Rand 5bdb0e7c20a2aaac077ba74e108f1933
  getModifyRand ebb9fad01ba9034377592f90823937cd
  getRange b70440ca412e06c26db87dcbaf933855
  randomBool 0e4306d8ef95067bc542e278dfc6234f
import  -/  Parameters 1a3da9d8014952d879e0f8fd570479a4
  exports: b8632a87381c85ddbef206a68a999a0a
  devTime 7754f95fe89550b77d7e797dab610360
  maxThres d6e65a3b82850e075a96c9f03c309c7f
  minThres 896f137eb104cf8d6ff406cf45982e8e
  nrEnv f222d0efc2d376a68fe706e3fa87f0bc
  nrGeneTypes 5532b47fa1a1cb4653609ad9c56355ad
  nrHouseHold 814be9665525757deaf764b757914558
  nrOverlap bcbded4ab0a83dcababec9971d3c2cad
  nrSpecific bba3c1eafd38d262c8c41612b0d0acb2
  selectionPressure 97c770948c9930d6a2e87cd8ea545285
import  -/  array-0.5.1.1@array-0.5.1.1:Data.Array.IArray 606f8bb830eb2a88c29c91f27c77f304
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Arr dbae05e7a9c0aba55cc706ecf0406507
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Generics 1dbec2bc7dd1c5bd8c89ed857eaed19b
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Read b6821365d2d5fa2155c9e910160e7f57
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Text.ParserCombinators.ReadPrec 5a182a8d6deb0f7d67aed5fab08a5cc0
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  base-4.9.1.0:Text.Read.Lex 16199fac3c6c2d64cc7c268f3c0d2269
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 20d4ffbee41965d03d6a989425473dc4
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base d432f6875983131473086af8cb290590
import  -/  data-memocombinators-0.5.1@data-memocombinators-0.5.1-7Cm5blFlrBsIAp5LANmGFG:Data.MemoCombinators 18b3f5c2f1a5c4ddb20042505af4bd17
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV:System.Random.Mersenne.Pure64.Internal bb3ed118165b97070d684375c016de56
import  -/  mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV:System.Random.Mersenne.Pure64.MTBlock a859128aff3c78db6db1843a6587e4f7
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State 749dca8ca0e6625b32091d445bd92b01
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State.Class 6d31234b0a911b56412061943d18b89e
import  -/  random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog:System.Random b21db0c0ea43dc1ad218556cd0b064c7
import  -/  random-shuffle-0.0.4@random-shuffle-0.0.4-97h14tPp7Ru21125sv6IMi:System.Random.Shuffle cceab7056a27578a61621d120d955aea
import  -/  split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split c60198a427bfd51d9fb4562c059ec1d2
import  -/  split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals 25dced234ed01c9c803d678763a4d772
33d3cbd47b3db0634720d677b02c84f9
  $fEqAgent :: GHC.Classes.Eq World.Agent
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Agent World.$fEqAgent_$c== World.$fEqAgent_$c/= -}
ca8e1ee3e1fe67e8ee200d890ac7afe9
  $fEqAgent1 ::
    Data.Map.Base.Map GHC.Types.Int GHC.Types.Int
    -> Data.Map.Base.Map GHC.Types.Int GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: (Data.Map.Base.$fEqMap_$c==
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   GHC.Classes.$fEqInt
                   GHC.Classes.$fEqInt) -}
33d3cbd47b3db0634720d677b02c84f9
  $fEqAgent_$c/= :: World.Agent -> World.Agent -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: World.Agent) (b :: World.Agent) ->
                 case World.$fEqAgent_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
33d3cbd47b3db0634720d677b02c84f9
  $fEqAgent_$c== :: World.Agent -> World.Agent -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: World.Agent) (ds1 :: World.Agent) ->
                 case ds of wild {
                   World.Agent a1 a2
                   -> case ds1 of wild1 {
                        World.Agent b1 b2
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ [World.Locus]
                                  World.$fEqAgent_$s$fEq[]
                                  a1
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> World.$fEqAgent1 a2 b2 }
                        World.NoAgent -> GHC.Types.False }
                   World.NoAgent
                   -> case ds1 of wild1 {
                        World.Agent ipv ipv1 -> GHC.Types.False
                        World.NoAgent -> GHC.Types.True } }) -}
9f65f55f2885684343419bf3eb1d35db
  $fEqAgent_$dEq :: GHC.Classes.Eq World.Locus
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) World.$fEqLocus -}
e0666baecf3432897beae1e854ae57f1
  $fEqAgent_$s$fEq[] :: GHC.Classes.Eq [World.Locus]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [World.Locus]
                  (GHC.Classes.$fEq[]_$c== @ World.Locus World.$fEqAgent_$dEq)
                  World.$fEqAgent_$s$fEq[]_$c/= -}
7882a8f5b3d3627898d1c14c3372a8ff
  $fEqAgent_$s$fEq[]_$c/= ::
    [World.Locus] -> [World.Locus] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: [World.Locus]) (y :: [World.Locus]) ->
                 GHC.Classes.not
                   (GHC.Classes.$fEq[]_$c==
                      @ World.Locus
                      World.$fEqAgent_$dEq
                      x
                      y)) -}
783f3bf10f0f04c4222b4d21fa876eef
  $fEqGene :: GHC.Classes.Eq World.Gene
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Gene World.$fEqLocus_$c==2 World.$fEqGene_$c/= -}
783f3bf10f0f04c4222b4d21fa876eef
  $fEqGene_$c/= :: World.Gene -> World.Gene -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))><S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: World.Gene) (b :: World.Gene) ->
                 case World.$fEqLocus_$c==2 a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
faad59d0fa532dbcb9013f9ea0e16640
  $fEqLocus :: GHC.Classes.Eq World.Locus
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Locus World.$fEqLocus_$c== World.$fEqLocus_$c/= -}
faad59d0fa532dbcb9013f9ea0e16640
  $fEqLocus_$c/= :: World.Locus -> World.Locus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: World.Locus) (b :: World.Locus) ->
                 case a of wild {
                   World.Transposon
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True World.Transposon -> GHC.Types.False }
                   World.CGene a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        World.CGene b1
                        -> case a1 of ww { World.Gene ww1 ww2 ww3 ->
                           case ww1 of ww4 { GHC.Types.I# ww5 ->
                           case b1 of ww6 { World.Gene ww7 ww8 ww9 ->
                           case ww7 of ww10 { GHC.Types.I# ww11 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# ww5 ww11) of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case ww2 of wild3 { GHC.Types.I# x ->
                                case ww8 of wild4 { GHC.Types.I# y ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x y) of wild5 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True
                                  -> case ww3 of wild6 { GHC.Types.I# x1 ->
                                     case ww9 of wild7 { GHC.Types.I# y1 ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.==# x1 y1) of wild8 {
                                       GHC.Types.False -> GHC.Types.True
                                       GHC.Types.True -> GHC.Types.False } } } } } } } } } } } }
                   World.CTfbs a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        World.CTfbs b1
                        -> case a1 of wild2 { World.Tfbs a2 a3 ->
                           case b1 of wild3 { World.Tfbs b2 b3 ->
                           case a2 of wild4 { GHC.Types.I# x ->
                           case b2 of wild5 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x y) of wild6 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case a3 of wild7 { GHC.Types.I# x1 ->
                                case b3 of wild8 { GHC.Types.I# y1 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x1 y1) of wild9 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } } } } } } } }) -}
faad59d0fa532dbcb9013f9ea0e16640
  $fEqLocus_$c== :: World.Locus -> World.Locus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: World.Locus) (ds1 :: World.Locus) ->
                 case ds of wild {
                   World.Transposon
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False World.Transposon -> GHC.Types.True }
                   World.CGene a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        World.CGene b1 -> World.$fEqLocus_$c==2 a1 b1 }
                   World.CTfbs a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        World.CTfbs b1 -> World.$fEqLocus_$c==1 a1 b1 } }) -}
b7c3f8c71cda577cf70f789d911ff10c
  $fEqLocus_$c==1 :: World.Tfbs -> World.Tfbs -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Tfbs) (w1 :: World.Tfbs) ->
                 case w of ww { World.Tfbs ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { World.Tfbs ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 World.$w$c== ww4 ww2 ww9 ww7 } } } }) -}
783f3bf10f0f04c4222b4d21fa876eef
  $fEqLocus_$c==2 :: World.Gene -> World.Gene -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))><S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Gene) (w1 :: World.Gene) ->
                 case w of ww { World.Gene ww1 ww2 ww3 ->
                 case ww1 of ww4 { GHC.Types.I# ww5 ->
                 case w1 of ww6 { World.Gene ww7 ww8 ww9 ->
                 case ww7 of ww10 { GHC.Types.I# ww11 ->
                 World.$w$c==1 ww5 ww2 ww3 ww11 ww8 ww9 } } } }) -}
b7c3f8c71cda577cf70f789d911ff10c
  $fEqTfbs :: GHC.Classes.Eq World.Tfbs
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Tfbs World.$fEqLocus_$c==1 World.$fEqTfbs_$c/= -}
b7c3f8c71cda577cf70f789d911ff10c
  $fEqTfbs_$c/= :: World.Tfbs -> World.Tfbs -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Tfbs) (w1 :: World.Tfbs) ->
                 case w of ww { World.Tfbs ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { World.Tfbs ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 World.$w$c/= ww4 ww2 ww9 ww7 } } } }) -}
33d3cbd47b3db0634720d677b02c84f9
  $fOrdAgent :: GHC.Classes.Ord World.Agent
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Agent
                  World.$fEqAgent
                  World.$fOrdAgent_$ccompare
                  World.$fOrdAgent_$c<
                  World.$fOrdAgent_$c<=
                  World.$fOrdAgent_$c>
                  World.$fOrdAgent_$c>=
                  World.$fOrdAgent_$cmax
                  World.$fOrdAgent_$cmin -}
1ed6304f90e97edd67010a4ba2922fb3
  $fOrdAgent1 :: GHC.Classes.Ord (GHC.Types.Int, GHC.Types.Int)
  {- Unfolding: (GHC.Classes.$fOrd(,)
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   GHC.Classes.$fOrdInt
                   GHC.Classes.$fOrdInt) -}
33d3cbd47b3db0634720d677b02c84f9
  $fOrdAgent_$c< :: World.Agent -> World.Agent -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: World.Agent) (b :: World.Agent) ->
                 case a of wild {
                   World.Agent a1 a2
                   -> case b of wild1 {
                        World.Agent b1 b2
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ [World.Locus]
                                  World.$fOrdAgent_$s$fOrd[]
                                  a1
                                  b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.True
                             GHC.Types.EQ
                             -> Data.Map.Base.$fOrdMap_$c<
                                  @ GHC.Types.Int
                                  @ GHC.Types.Int
                                  GHC.Classes.$fOrdInt
                                  GHC.Classes.$fOrdInt
                                  a2
                                  b2
                             GHC.Types.GT -> GHC.Types.False }
                        World.NoAgent -> GHC.Types.True }
                   World.NoAgent
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
33d3cbd47b3db0634720d677b02c84f9
  $fOrdAgent_$c<= :: World.Agent -> World.Agent -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: World.Agent) (b :: World.Agent) ->
                 case a of wild {
                   World.Agent a1 a2
                   -> case b of wild1 {
                        World.Agent b1 b2
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ [World.Locus]
                                  World.$fOrdAgent_$s$fOrd[]
                                  a1
                                  b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.True
                             GHC.Types.EQ
                             -> Data.Map.Base.$fOrdMap_$c<=
                                  @ GHC.Types.Int
                                  @ GHC.Types.Int
                                  GHC.Classes.$fOrdInt
                                  GHC.Classes.$fOrdInt
                                  a2
                                  b2
                             GHC.Types.GT -> GHC.Types.False }
                        World.NoAgent -> GHC.Types.True }
                   World.NoAgent
                   -> case b of wild1 {
                        World.Agent ipv ipv1 -> GHC.Types.False
                        World.NoAgent -> GHC.Types.True } }) -}
33d3cbd47b3db0634720d677b02c84f9
  $fOrdAgent_$c> :: World.Agent -> World.Agent -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: World.Agent) (b :: World.Agent) ->
                 case a of wild {
                   World.Agent a1 a2
                   -> case b of wild1 {
                        World.Agent b1 b2
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ [World.Locus]
                                  World.$fOrdAgent_$s$fOrd[]
                                  a1
                                  b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.False
                             GHC.Types.EQ
                             -> Data.Map.Base.$fOrdMap_$c>
                                  @ GHC.Types.Int
                                  @ GHC.Types.Int
                                  GHC.Classes.$fOrdInt
                                  GHC.Classes.$fOrdInt
                                  a2
                                  b2
                             GHC.Types.GT -> GHC.Types.True }
                        World.NoAgent -> GHC.Types.False }
                   World.NoAgent
                   -> case b of wild1 {
                        World.Agent ipv ipv1 -> GHC.Types.True
                        World.NoAgent -> GHC.Types.False } }) -}
33d3cbd47b3db0634720d677b02c84f9
  $fOrdAgent_$c>= :: World.Agent -> World.Agent -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: World.Agent) (b :: World.Agent) ->
                 case a of wild {
                   World.Agent a1 a2
                   -> case b of wild1 {
                        World.Agent b1 b2
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ [World.Locus]
                                  World.$fOrdAgent_$s$fOrd[]
                                  a1
                                  b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.False
                             GHC.Types.EQ
                             -> Data.Map.Base.$fOrdMap_$c>=
                                  @ GHC.Types.Int
                                  @ GHC.Types.Int
                                  GHC.Classes.$fOrdInt
                                  GHC.Classes.$fOrdInt
                                  a2
                                  b2
                             GHC.Types.GT -> GHC.Types.True }
                        World.NoAgent -> GHC.Types.False }
                   World.NoAgent
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
33d3cbd47b3db0634720d677b02c84f9
  $fOrdAgent_$ccompare ::
    World.Agent -> World.Agent -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: World.Agent) (b :: World.Agent) ->
                 case a of wild {
                   World.Agent a1 a2
                   -> case b of wild1 {
                        World.Agent b1 b2
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ [World.Locus]
                                  World.$fOrdAgent_$s$fOrd[]
                                  a1
                                  b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.LT
                             GHC.Types.EQ
                             -> GHC.Classes.$fOrd[]_$ccompare
                                  @ (GHC.Types.Int, GHC.Types.Int)
                                  World.$fOrdAgent1
                                  (Data.Map.Base.toAscList1
                                     @ GHC.Types.Int
                                     @ GHC.Types.Int
                                     (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int))
                                     a2)
                                  (Data.Map.Base.toAscList1
                                     @ GHC.Types.Int
                                     @ GHC.Types.Int
                                     (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int))
                                     b2)
                             GHC.Types.GT -> GHC.Types.GT }
                        World.NoAgent -> GHC.Types.LT }
                   World.NoAgent
                   -> case b of wild1 {
                        World.Agent ipv ipv1 -> GHC.Types.GT
                        World.NoAgent -> GHC.Types.EQ } }) -}
33d3cbd47b3db0634720d677b02c84f9
  $fOrdAgent_$cmax :: World.Agent -> World.Agent -> World.Agent
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: World.Agent) (y :: World.Agent) ->
                 case World.$fOrdAgent_$c<= x y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
33d3cbd47b3db0634720d677b02c84f9
  $fOrdAgent_$cmin :: World.Agent -> World.Agent -> World.Agent
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: World.Agent) (y :: World.Agent) ->
                 case World.$fOrdAgent_$c<= x y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
200740b8c8c638ce12b9e199a5611f6a
  $fOrdAgent_$s$fOrd[] :: GHC.Classes.Ord [World.Locus]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [World.Locus]
                  World.$fOrdAgent_$s$fOrd[]_$cp1Ord
                  (GHC.Classes.$fOrd[]_$ccompare @ World.Locus World.$fOrdLocus)
                  World.$fOrdAgent_$s$fOrd[]_$c<
                  World.$fOrdAgent_$s$fOrd[]_$c<=
                  World.$fOrdAgent_$s$fOrd[]_$c>
                  World.$fOrdAgent_$s$fOrd[]_$c>=
                  World.$fOrdAgent_$s$fOrd[]_$cmax
                  World.$fOrdAgent_$s$fOrd[]_$cmin -}
8ca3050bce63e7271e6c14414fcd6658
  $fOrdAgent_$s$fOrd[]_$c< ::
    [World.Locus] -> [World.Locus] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [World.Locus]) (y :: [World.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ World.Locus
                        World.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
3146311325f704d708d0f322b2c2139e
  $fOrdAgent_$s$fOrd[]_$c<= ::
    [World.Locus] -> [World.Locus] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [World.Locus]) (y :: [World.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ World.Locus
                        World.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
b0110b87bca82378d4dc4eed8254da91
  $fOrdAgent_$s$fOrd[]_$c> ::
    [World.Locus] -> [World.Locus] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [World.Locus]) (y :: [World.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ World.Locus
                        World.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
dd0b160036238957d2e904b9c045c5d7
  $fOrdAgent_$s$fOrd[]_$c>= ::
    [World.Locus] -> [World.Locus] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [World.Locus]) (y :: [World.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ World.Locus
                        World.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
6d7648e7bea348c7769b8825d8b91602
  $fOrdAgent_$s$fOrd[]_$cmax ::
    [World.Locus] -> [World.Locus] -> [World.Locus]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [World.Locus]) (y :: [World.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ World.Locus
                        World.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
8a89b6b4c50f014511173e6d94c1f119
  $fOrdAgent_$s$fOrd[]_$cmin ::
    [World.Locus] -> [World.Locus] -> [World.Locus]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [World.Locus]) (y :: [World.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ World.Locus
                        World.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
a890b53051d05bc193f1e2feea8d6fb0
  $fOrdAgent_$s$fOrd[]_$cp1Ord :: GHC.Classes.Eq [World.Locus]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) World.$fEqAgent_$s$fEq[] -}
783f3bf10f0f04c4222b4d21fa876eef
  $fOrdGene :: GHC.Classes.Ord World.Gene
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Gene
                  World.$fEqGene
                  World.$fOrdLocus_$ccompare
                  World.$fOrdLocus_$c<2
                  World.$fOrdLocus_$c<=2
                  World.$fOrdLocus_$c>2
                  World.$fOrdLocus_$c>=2
                  World.$fOrdGene_$cmax
                  World.$fOrdGene_$cmin -}
783f3bf10f0f04c4222b4d21fa876eef
  $fOrdGene_$cmax :: World.Gene -> World.Gene -> World.Gene
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),U(U(U),U(U),U(U))><S(S(S)LL),U(U(U),U(U),U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: World.Gene) (y :: World.Gene) ->
                 case World.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
783f3bf10f0f04c4222b4d21fa876eef
  $fOrdGene_$cmin :: World.Gene -> World.Gene -> World.Gene
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),U(U(U),U(U),U(U))><S(S(S)LL),U(U(U),U(U),U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: World.Gene) (y :: World.Gene) ->
                 case World.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
faad59d0fa532dbcb9013f9ea0e16640
  $fOrdLocus :: GHC.Classes.Ord World.Locus
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Locus
                  World.$fEqLocus
                  World.$fOrdLocus_$ccompare1
                  World.$fOrdLocus_$c<
                  World.$fOrdLocus_$c<=
                  World.$fOrdLocus_$c>
                  World.$fOrdLocus_$c>=
                  World.$fOrdLocus_$cmax
                  World.$fOrdLocus_$cmin -}
faad59d0fa532dbcb9013f9ea0e16640
  $fOrdLocus_$c< :: World.Locus -> World.Locus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: World.Locus) (b :: World.Locus) ->
                 case a of wild {
                   World.Transposon
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True World.Transposon -> GHC.Types.False }
                   World.CGene a1
                   -> case b of wild1 {
                        World.Transposon -> GHC.Types.False
                        World.CGene b1 -> World.$fOrdLocus_$c<2 a1 b1
                        World.CTfbs ipv -> GHC.Types.True }
                   World.CTfbs a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        World.CTfbs b1 -> World.$fOrdLocus_$c<1 a1 b1 } }) -}
b7c3f8c71cda577cf70f789d911ff10c
  $fOrdLocus_$c<1 :: World.Tfbs -> World.Tfbs -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Tfbs) (w1 :: World.Tfbs) ->
                 case w of ww { World.Tfbs ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { World.Tfbs ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 World.$w$c< ww4 ww2 ww9 ww7 } } } }) -}
783f3bf10f0f04c4222b4d21fa876eef
  $fOrdLocus_$c<2 :: World.Gene -> World.Gene -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))><S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: World.Gene) (y :: World.Gene) ->
                 case World.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
faad59d0fa532dbcb9013f9ea0e16640
  $fOrdLocus_$c<= :: World.Locus -> World.Locus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: World.Locus) (b :: World.Locus) ->
                 case a of wild {
                   World.Transposon -> case b of wild1 { DEFAULT -> GHC.Types.True }
                   World.CGene a1
                   -> case b of wild1 {
                        World.Transposon -> GHC.Types.False
                        World.CGene b1 -> World.$fOrdLocus_$c<=2 a1 b1
                        World.CTfbs ipv -> GHC.Types.True }
                   World.CTfbs a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        World.CTfbs b1 -> World.$fOrdLocus_$c<=1 a1 b1 } }) -}
b7c3f8c71cda577cf70f789d911ff10c
  $fOrdLocus_$c<=1 :: World.Tfbs -> World.Tfbs -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Tfbs) (w1 :: World.Tfbs) ->
                 case w of ww { World.Tfbs ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { World.Tfbs ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 World.$w$c<= ww4 ww2 ww9 ww7 } } } }) -}
783f3bf10f0f04c4222b4d21fa876eef
  $fOrdLocus_$c<=2 :: World.Gene -> World.Gene -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))><S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: World.Gene) (y :: World.Gene) ->
                 case World.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
faad59d0fa532dbcb9013f9ea0e16640
  $fOrdLocus_$c> :: World.Locus -> World.Locus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: World.Locus) (b :: World.Locus) ->
                 case a of wild {
                   World.Transposon -> case b of wild1 { DEFAULT -> GHC.Types.False }
                   World.CGene a1
                   -> case b of wild1 {
                        World.Transposon -> GHC.Types.True
                        World.CGene b1 -> World.$fOrdLocus_$c>2 a1 b1
                        World.CTfbs ipv -> GHC.Types.False }
                   World.CTfbs a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        World.CTfbs b1 -> World.$fOrdLocus_$c>1 a1 b1 } }) -}
b7c3f8c71cda577cf70f789d911ff10c
  $fOrdLocus_$c>1 :: World.Tfbs -> World.Tfbs -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Tfbs) (w1 :: World.Tfbs) ->
                 case w of ww { World.Tfbs ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { World.Tfbs ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 World.$w$c> ww4 ww2 ww9 ww7 } } } }) -}
783f3bf10f0f04c4222b4d21fa876eef
  $fOrdLocus_$c>2 :: World.Gene -> World.Gene -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))><S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: World.Gene) (y :: World.Gene) ->
                 case World.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
faad59d0fa532dbcb9013f9ea0e16640
  $fOrdLocus_$c>= :: World.Locus -> World.Locus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: World.Locus) (b :: World.Locus) ->
                 case a of wild {
                   World.Transposon
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False World.Transposon -> GHC.Types.True }
                   World.CGene a1
                   -> case b of wild1 {
                        World.Transposon -> GHC.Types.True
                        World.CGene b1 -> World.$fOrdLocus_$c>=2 a1 b1
                        World.CTfbs ipv -> GHC.Types.False }
                   World.CTfbs a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        World.CTfbs b1 -> World.$fOrdLocus_$c>=1 a1 b1 } }) -}
b7c3f8c71cda577cf70f789d911ff10c
  $fOrdLocus_$c>=1 :: World.Tfbs -> World.Tfbs -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Tfbs) (w1 :: World.Tfbs) ->
                 case w of ww { World.Tfbs ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { World.Tfbs ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 World.$w$c>= ww4 ww2 ww9 ww7 } } } }) -}
783f3bf10f0f04c4222b4d21fa876eef
  $fOrdLocus_$c>=2 :: World.Gene -> World.Gene -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))><S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: World.Gene) (y :: World.Gene) ->
                 case World.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
783f3bf10f0f04c4222b4d21fa876eef
  $fOrdLocus_$ccompare ::
    World.Gene -> World.Gene -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))><S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Gene) (w1 :: World.Gene) ->
                 case w of ww { World.Gene ww1 ww2 ww3 ->
                 case ww1 of ww4 { GHC.Types.I# ww5 ->
                 case w1 of ww6 { World.Gene ww7 ww8 ww9 ->
                 case ww7 of ww10 { GHC.Types.I# ww11 ->
                 World.$w$ccompare ww5 ww2 ww3 ww11 ww8 ww9 } } } }) -}
faad59d0fa532dbcb9013f9ea0e16640
  $fOrdLocus_$ccompare1 ::
    World.Locus -> World.Locus -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: World.Locus) (b :: World.Locus) ->
                 case a of wild {
                   World.Transposon
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT World.Transposon -> GHC.Types.EQ }
                   World.CGene a1
                   -> case b of wild1 {
                        World.Transposon -> GHC.Types.GT
                        World.CGene b1 -> World.$fOrdLocus_$ccompare a1 b1
                        World.CTfbs ipv -> GHC.Types.LT }
                   World.CTfbs a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        World.CTfbs b1 -> World.$fOrdLocus_$ccompare2 a1 b1 } }) -}
b7c3f8c71cda577cf70f789d911ff10c
  $fOrdLocus_$ccompare2 ::
    World.Tfbs -> World.Tfbs -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Tfbs) (w1 :: World.Tfbs) ->
                 case w of ww { World.Tfbs ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { World.Tfbs ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 World.$w$ccompare1 ww4 ww2 ww9 ww7 } } } }) -}
faad59d0fa532dbcb9013f9ea0e16640
  $fOrdLocus_$cmax :: World.Locus -> World.Locus -> World.Locus
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: World.Locus) (y :: World.Locus) ->
                 case x of wild {
                   World.Transposon -> y
                   World.CGene a1
                   -> case y of wild1 {
                        World.Transposon -> wild
                        World.CGene b1
                        -> case a1 of ww { World.Gene ww1 ww2 ww3 ->
                           case ww1 of ww4 { GHC.Types.I# ww5 ->
                           case b1 of ww6 { World.Gene ww7 ww8 ww9 ->
                           case ww7 of ww10 { GHC.Types.I# ww11 ->
                           case World.$w$ccompare ww5 ww2 ww3 ww11 ww8 ww9 of wild2 {
                             DEFAULT -> wild1 GHC.Types.GT -> wild } } } } }
                        World.CTfbs ipv -> wild1 }
                   World.CTfbs a1
                   -> case y of wild1 {
                        DEFAULT -> wild
                        World.CTfbs b1
                        -> case a1 of wild2 { World.Tfbs a2 a3 ->
                           case b1 of wild3 { World.Tfbs b2 b3 ->
                           case a2 of wild4 { GHC.Types.I# x# ->
                           case b2 of wild5 { GHC.Types.I# y# ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# x# y#) of wild6 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x# y#) of wild7 {
                                  GHC.Types.False -> wild
                                  GHC.Types.True
                                  -> case a3 of wild8 { GHC.Types.I# x1 ->
                                     case b3 of wild9 { GHC.Types.I# y1 ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# x1 y1) of wild10 {
                                       GHC.Types.False -> wild GHC.Types.True -> wild1 } } } }
                             GHC.Types.True -> wild1 } } } } } } }) -}
faad59d0fa532dbcb9013f9ea0e16640
  $fOrdLocus_$cmin :: World.Locus -> World.Locus -> World.Locus
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: World.Locus) (y :: World.Locus) ->
                 case x of wild {
                   World.Transposon -> case y of wild1 { DEFAULT -> World.Transposon }
                   World.CGene a1
                   -> case y of wild1 {
                        World.Transposon -> World.Transposon
                        World.CGene b1
                        -> case a1 of ww { World.Gene ww1 ww2 ww3 ->
                           case ww1 of ww4 { GHC.Types.I# ww5 ->
                           case b1 of ww6 { World.Gene ww7 ww8 ww9 ->
                           case ww7 of ww10 { GHC.Types.I# ww11 ->
                           case World.$w$ccompare ww5 ww2 ww3 ww11 ww8 ww9 of wild2 {
                             DEFAULT -> wild GHC.Types.GT -> wild1 } } } } }
                        World.CTfbs ipv -> wild }
                   World.CTfbs a1
                   -> case y of wild1 {
                        DEFAULT -> wild1
                        World.CTfbs b1
                        -> case a1 of wild2 { World.Tfbs a2 a3 ->
                           case b1 of wild3 { World.Tfbs b2 b3 ->
                           case a2 of wild4 { GHC.Types.I# x# ->
                           case b2 of wild5 { GHC.Types.I# y# ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# x# y#) of wild6 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x# y#) of wild7 {
                                  GHC.Types.False -> wild1
                                  GHC.Types.True
                                  -> case a3 of wild8 { GHC.Types.I# x1 ->
                                     case b3 of wild9 { GHC.Types.I# y1 ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# x1 y1) of wild10 {
                                       GHC.Types.False -> wild1 GHC.Types.True -> wild } } } }
                             GHC.Types.True -> wild } } } } } } }) -}
b7c3f8c71cda577cf70f789d911ff10c
  $fOrdTfbs :: GHC.Classes.Ord World.Tfbs
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Tfbs
                  World.$fEqTfbs
                  World.$fOrdLocus_$ccompare2
                  World.$fOrdLocus_$c<1
                  World.$fOrdLocus_$c<=1
                  World.$fOrdLocus_$c>1
                  World.$fOrdLocus_$c>=1
                  World.$fOrdTfbs_$cmax
                  World.$fOrdTfbs_$cmin -}
b7c3f8c71cda577cf70f789d911ff10c
  $fOrdTfbs_$cmax :: World.Tfbs -> World.Tfbs -> World.Tfbs
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(U(U),U(U))><S(S(S)L),1*U(U(U),U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Tfbs) (w1 :: World.Tfbs) ->
                 case w of ww { World.Tfbs ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { World.Tfbs ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww4 ww9) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww4 ww9) of wild1 {
                        GHC.Types.False -> World.Tfbs (GHC.Types.I# ww4) ww2
                        GHC.Types.True
                        -> case ww2 of wild2 { GHC.Types.I# x ->
                           case ww7 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# x y) of wild4 {
                             GHC.Types.False -> World.Tfbs (GHC.Types.I# ww4) wild2
                             GHC.Types.True -> World.Tfbs (GHC.Types.I# ww9) wild3 } } } }
                   GHC.Types.True -> World.Tfbs (GHC.Types.I# ww9) ww7 } } } } }) -}
b7c3f8c71cda577cf70f789d911ff10c
  $fOrdTfbs_$cmin :: World.Tfbs -> World.Tfbs -> World.Tfbs
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(U(U),U(U))><S(S(S)L),1*U(U(U),U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Tfbs) (w1 :: World.Tfbs) ->
                 case w of ww { World.Tfbs ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { World.Tfbs ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww4 ww9) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww4 ww9) of wild1 {
                        GHC.Types.False -> World.Tfbs (GHC.Types.I# ww9) ww7
                        GHC.Types.True
                        -> case ww2 of wild2 { GHC.Types.I# x ->
                           case ww7 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# x y) of wild4 {
                             GHC.Types.False -> World.Tfbs (GHC.Types.I# ww9) wild3
                             GHC.Types.True -> World.Tfbs (GHC.Types.I# ww4) wild2 } } } }
                   GHC.Types.True -> World.Tfbs (GHC.Types.I# ww4) ww2 } } } } }) -}
33d3cbd47b3db0634720d677b02c84f9
  $fReadAgent :: GHC.Read.Read World.Agent
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Agent
                  World.$fReadAgent_$creadsPrec
                  World.$fReadAgent_$creadList
                  World.$fReadAgent_$creadPrec
                  World.$fReadAgent_$creadListPrec -}
33d3cbd47b3db0634720d677b02c84f9
  $fReadAgent1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([World.Agent] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [World.Agent] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ World.Agent
                   World.$fReadAgent2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <World.Agent>_R))
                   eta
                   @ b
                   eta1) -}
33d3cbd47b3db0634720d677b02c84f9
  $fReadAgent2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP World.Agent
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ World.Agent
                   World.$fReadAgent3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <World.Agent>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <World.Agent>_R)))) -}
33d3cbd47b3db0634720d677b02c84f9
  $fReadAgent3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (World.Agent -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)> -}
33d3cbd47b3db0634720d677b02c84f9
  $fReadAgent4 :: Text.ParserCombinators.ReadP.P [World.Agent]
  {- Unfolding: (GHC.Read.list1
                   @ World.Agent
                   World.$fReadAgent2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <World.Agent>_R))
                   GHC.Read.$fRead()5
                   @ [World.Agent]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [World.Agent])) -}
33d3cbd47b3db0634720d677b02c84f9
  $fReadAgent_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [World.Agent]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [World.Agent]
                   World.$fReadAgent4) -}
33d3cbd47b3db0634720d677b02c84f9
  $fReadAgent_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [World.Agent]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                World.$fReadAgent1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[World.Agent]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[World.Agent]>_R))) -}
33d3cbd47b3db0634720d677b02c84f9
  $fReadAgent_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec World.Agent
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                World.$fReadAgent2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <World.Agent>_R)) -}
33d3cbd47b3db0634720d677b02c84f9
  $fReadAgent_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS World.Agent
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ World.Agent
                   ((GHC.Read.parens1
                       @ World.Agent
                       World.$fReadAgent3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <World.Agent>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <World.Agent>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <World.Agent>_R)
                      @ World.Agent
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ World.Agent))) -}
783f3bf10f0f04c4222b4d21fa876eef
  $fReadGene :: GHC.Read.Read World.Gene
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Gene
                  World.$fReadGene_$creadsPrec
                  World.$fReadGene_$creadList
                  World.$fReadGene_$creadPrec
                  World.$fReadGene_$creadListPrec -}
783f3bf10f0f04c4222b4d21fa876eef
  $fReadGene1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([World.Gene] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [World.Gene] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ World.Gene
                   World.$fReadGene2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <World.Gene>_R))
                   eta
                   @ b
                   eta1) -}
783f3bf10f0f04c4222b4d21fa876eef
  $fReadGene2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP World.Gene
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ World.Gene
                   World.$fReadGene3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <World.Gene>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <World.Gene>_R)))) -}
783f3bf10f0f04c4222b4d21fa876eef
  $fReadGene3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (World.Gene -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (c :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: World.Gene -> Text.ParserCombinators.ReadP.P b) ->
                 case c of wild { GHC.Types.I# x ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# x 11#) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> World.$fReadGene5 World.$fReadGene4 @ b eta } }) -}
69f88612cc5609024b703b5073ac7cf6
  $fReadGene4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
783f3bf10f0f04c4222b4d21fa876eef
  $fReadGene5 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b1.
       (World.Gene -> Text.ParserCombinators.ReadP.P b1)
       -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 2, Strictness: <L,A><L,C(U)>m2, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b1
                   (w1 :: World.Gene -> Text.ParserCombinators.ReadP.P b1) ->
                 case World.$w$creadPrec @ b1 w1 of ww { Unit# ww1 ->
                 Text.ParserCombinators.ReadP.Look @ b1 ww1 }) -}
783f3bf10f0f04c4222b4d21fa876eef
  $fReadGene6 :: Text.ParserCombinators.ReadP.P [World.Gene]
  {- Unfolding: (GHC.Read.list1
                   @ World.Gene
                   World.$fReadGene2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <World.Gene>_R))
                   GHC.Read.$fRead()5
                   @ [World.Gene]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [World.Gene])) -}
783f3bf10f0f04c4222b4d21fa876eef
  $fReadGene_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [World.Gene]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [World.Gene]
                   World.$fReadGene6) -}
783f3bf10f0f04c4222b4d21fa876eef
  $fReadGene_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [World.Gene]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                World.$fReadGene1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[World.Gene]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[World.Gene]>_R))) -}
783f3bf10f0f04c4222b4d21fa876eef
  $fReadGene_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec World.Gene
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                World.$fReadGene2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <World.Gene>_R)) -}
783f3bf10f0f04c4222b4d21fa876eef
  $fReadGene_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS World.Gene
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ World.Gene
                   ((GHC.Read.parens1
                       @ World.Gene
                       World.$fReadGene3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <World.Gene>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <World.Gene>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <World.Gene>_R)
                      @ World.Gene
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ World.Gene))) -}
faad59d0fa532dbcb9013f9ea0e16640
  $fReadLocus :: GHC.Read.Read World.Locus
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Locus
                  World.$fReadLocus_$creadsPrec
                  World.$fReadLocus_$creadList
                  World.$fReadLocus_$creadPrec
                  World.$fReadLocus_$creadListPrec -}
faad59d0fa532dbcb9013f9ea0e16640
  $fReadLocus1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([World.Locus] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [World.Locus] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ World.Locus
                   World.$fReadLocus2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <World.Locus>_R))
                   eta
                   @ b
                   eta1) -}
faad59d0fa532dbcb9013f9ea0e16640
  $fReadLocus2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP World.Locus
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ World.Locus
                   World.$fReadLocus3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <World.Locus>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <World.Locus>_R)))) -}
faad59d0fa532dbcb9013f9ea0e16640
  $fReadLocus3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (World.Locus -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)> -}
faad59d0fa532dbcb9013f9ea0e16640
  $fReadLocus4 :: Text.ParserCombinators.ReadP.P [World.Locus]
  {- Unfolding: (GHC.Read.list1
                   @ World.Locus
                   World.$fReadLocus2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <World.Locus>_R))
                   GHC.Read.$fRead()5
                   @ [World.Locus]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [World.Locus])) -}
faad59d0fa532dbcb9013f9ea0e16640
  $fReadLocus_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [World.Locus]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [World.Locus]
                   World.$fReadLocus4) -}
faad59d0fa532dbcb9013f9ea0e16640
  $fReadLocus_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [World.Locus]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                World.$fReadLocus1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[World.Locus]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[World.Locus]>_R))) -}
faad59d0fa532dbcb9013f9ea0e16640
  $fReadLocus_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec World.Locus
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                World.$fReadLocus2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <World.Locus>_R)) -}
faad59d0fa532dbcb9013f9ea0e16640
  $fReadLocus_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS World.Locus
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ World.Locus
                   ((GHC.Read.parens1
                       @ World.Locus
                       World.$fReadLocus3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <World.Locus>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <World.Locus>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <World.Locus>_R)
                      @ World.Locus
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ World.Locus))) -}
b7c3f8c71cda577cf70f789d911ff10c
  $fReadTfbs :: GHC.Read.Read World.Tfbs
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Tfbs
                  World.$fReadTfbs_$creadsPrec
                  World.$fReadTfbs_$creadList
                  World.$fReadTfbs_$creadPrec
                  World.$fReadTfbs_$creadListPrec -}
b7c3f8c71cda577cf70f789d911ff10c
  $fReadTfbs1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([World.Tfbs] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [World.Tfbs] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ World.Tfbs
                   World.$fReadTfbs2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <World.Tfbs>_R))
                   eta
                   @ b
                   eta1) -}
b7c3f8c71cda577cf70f789d911ff10c
  $fReadTfbs2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP World.Tfbs
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ World.Tfbs
                   World.$fReadTfbs3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <World.Tfbs>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <World.Tfbs>_R)))) -}
b7c3f8c71cda577cf70f789d911ff10c
  $fReadTfbs3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (World.Tfbs -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: World.Tfbs -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 World.$w$creadPrec1 ww1 @ b w1 }) -}
6954da0a7c069af24ceb289c291200e1
  $fReadTfbs4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Tfbs"#) -}
b262803c53ff88aa3f475c5bd48f7857
  $fReadTfbs5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10#) -}
b7c3f8c71cda577cf70f789d911ff10c
  $fReadTfbs6 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (World.Tfbs -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U(U)><L,C(U)>,
     Unfolding: (\ (n :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: World.Tfbs -> Text.ParserCombinators.ReadP.P b) ->
                 let {
                   lvl26 :: Text.ParserCombinators.ReadPrec.Prec
                   = case n of wild { GHC.Types.I# x ->
                     GHC.Types.I# (GHC.Prim.+# x 1#) }
                 } in
                 GHC.Read.$fReadInt3
                   GHC.Read.$fReadInt_$sconvertInt
                   lvl26
                   @ b
                   (\ (a1 :: World.ID) ->
                    GHC.Read.$fReadInt3
                      GHC.Read.$fReadInt_$sconvertInt
                      lvl26
                      @ b
                      (\ (a2 :: World.Weight) -> eta (World.Tfbs a1 a2)))) -}
b7c3f8c71cda577cf70f789d911ff10c
  $fReadTfbs7 :: Text.ParserCombinators.ReadP.P [World.Tfbs]
  {- Unfolding: (GHC.Read.list1
                   @ World.Tfbs
                   World.$fReadTfbs2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <World.Tfbs>_R))
                   GHC.Read.$fRead()5
                   @ [World.Tfbs]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [World.Tfbs])) -}
b7c3f8c71cda577cf70f789d911ff10c
  $fReadTfbs_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [World.Tfbs]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [World.Tfbs]
                   World.$fReadTfbs7) -}
b7c3f8c71cda577cf70f789d911ff10c
  $fReadTfbs_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [World.Tfbs]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                World.$fReadTfbs1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[World.Tfbs]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[World.Tfbs]>_R))) -}
b7c3f8c71cda577cf70f789d911ff10c
  $fReadTfbs_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec World.Tfbs
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                World.$fReadTfbs2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <World.Tfbs>_R)) -}
b7c3f8c71cda577cf70f789d911ff10c
  $fReadTfbs_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS World.Tfbs
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ World.Tfbs
                   ((GHC.Read.parens1
                       @ World.Tfbs
                       World.$fReadTfbs3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <World.Tfbs>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <World.Tfbs>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <World.Tfbs>_R)
                      @ World.Tfbs
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ World.Tfbs))) -}
33d3cbd47b3db0634720d677b02c84f9
  $fShowAgent :: GHC.Show.Show World.Agent
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Agent
                  World.$fShowAgent_$cshowsPrec
                  World.$fShowAgent_$cshow
                  World.$fShowAgent_$cshowList -}
33d3cbd47b3db0634720d677b02c84f9
  $fShowAgent1 :: World.Agent -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (World.$fShowAgent_$cshowsPrec World.$fShowAgent2) -}
5afc26db86b5634e6e61940f0e3ac830
  $fShowAgent2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
33d3cbd47b3db0634720d677b02c84f9
  $fShowAgent_$cshow :: World.Agent -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: World.Agent) ->
                 World.$fShowAgent_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
33d3cbd47b3db0634720d677b02c84f9
  $fShowAgent_$cshowList :: [World.Agent] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ World.Agent
                   World.$fShowAgent1) -}
33d3cbd47b3db0634720d677b02c84f9
  $fShowAgent_$cshowsPrec ::
    GHC.Types.Int -> World.Agent -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
783f3bf10f0f04c4222b4d21fa876eef
  $fShowGene :: GHC.Show.Show World.Gene
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Gene
                  World.$fShowGene_$cshowsPrec
                  World.$fShowGene_$cshow
                  World.$fShowGene_$cshowList -}
783f3bf10f0f04c4222b4d21fa876eef
  $fShowGene1 :: World.Gene -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: World.Gene) (w1 :: GHC.Base.String) ->
                 case w of ww { World.Gene ww1 ww2 ww3 ->
                 World.$w$cshowsPrec 0# ww1 ww2 ww3 w1 }) -}
e3104388ef6365a2c6fcf3d16e5dee03
  $fShowGene2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
e0ed3be87ec51956d9827238752b248b
  $fShowGene3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "genSt = "#) -}
31f370e038e2de8299dd1dabd70cae1a
  $fShowGene4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "thres = "#) -}
16d910e83e655cf9246bc2f87f600ada
  $fShowGene5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
222360e08d00fd37cf5338b4432f2754
  $fShowGene6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "iD = "#) -}
ec7193468e1f9b3cb327534e82d16e76
  $fShowGene7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Gene {"#) -}
783f3bf10f0f04c4222b4d21fa876eef
  $fShowGene_$cshow :: World.Gene -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: World.Gene) ->
                 World.$fShowGene_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
783f3bf10f0f04c4222b4d21fa876eef
  $fShowGene_$cshowList :: [World.Gene] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ World.Gene World.$fShowGene1) -}
783f3bf10f0f04c4222b4d21fa876eef
  $fShowGene_$cshowsPrec ::
    GHC.Types.Int -> World.Gene -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U),1*U(U),1*U(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: World.Gene)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { World.Gene ww3 ww4 ww5 ->
                 World.$w$cshowsPrec ww1 ww3 ww4 ww5 w2 } }) -}
faad59d0fa532dbcb9013f9ea0e16640
  $fShowLocus :: GHC.Show.Show World.Locus
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Locus
                  World.$fShowLocus_$cshowsPrec
                  World.$fShowLocus_$cshow
                  World.$fShowLocus_$cshowList -}
faad59d0fa532dbcb9013f9ea0e16640
  $fShowLocus1 :: World.Locus -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (x :: World.Locus) (s :: GHC.Base.String)[OneShot] ->
                 GHC.Base.++ @ GHC.Types.Char (World.$fShowLocus_$cshow x) s) -}
934d2cd58cfd3a090dde36550f732803
  $fShowLocus2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "T"#) -}
faad59d0fa532dbcb9013f9ea0e16640
  $fShowLocus_$cshow :: World.Locus -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: World.Locus) ->
                 case ds of wild {
                   World.Transposon -> World.$fShowLocus2
                   World.CGene ds1
                   -> case ds1 of wild1 { World.Gene i t gs ->
                      GHC.CString.unpackAppendCString#
                        "G"#
                        (case i of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt
                                0#
                                ww3
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Base.++
                           @ GHC.Types.Char
                           (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                           (GHC.CString.unpackAppendCString#
                              ":"#
                              (case t of ww1 { GHC.Types.I# ww8 ->
                               case GHC.Show.$wshowSignedInt
                                      0#
                                      ww8
                                      (GHC.Types.[] @ GHC.Types.Char) of ww9 { (#,#) ww10 ww11 ->
                               GHC.Base.++
                                 @ GHC.Types.Char
                                 (GHC.Types.: @ GHC.Types.Char ww10 ww11)
                                 (GHC.CString.unpackAppendCString#
                                    ":"#
                                    (case gs of ww12 { GHC.Types.I# ww13 ->
                                     case GHC.Show.$wshowSignedInt
                                            0#
                                            ww13
                                            (GHC.Types.[]
                                               @ GHC.Types.Char) of ww14 { (#,#) ww15 ww16 ->
                                     GHC.Types.: @ GHC.Types.Char ww15 ww16 } })) } })) } }) }
                   World.CTfbs ds1
                   -> case ds1 of wild1 { World.Tfbs i w ->
                      case i of ww2 { GHC.Types.I# ww3 ->
                      case GHC.Show.$wshowSignedInt
                             0#
                             ww3
                             (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                        (GHC.CString.unpackAppendCString#
                           ":"#
                           (case w of ww1 { GHC.Types.I# ww8 ->
                            case GHC.Show.$wshowSignedInt
                                   0#
                                   ww8
                                   (GHC.Types.[] @ GHC.Types.Char) of ww9 { (#,#) ww10 ww11 ->
                            GHC.Types.: @ GHC.Types.Char ww10 ww11 } })) } } } }) -}
faad59d0fa532dbcb9013f9ea0e16640
  $fShowLocus_$cshowList :: [World.Locus] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [World.Locus]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ World.Locus World.$fShowLocus1 ls s) -}
faad59d0fa532dbcb9013f9ea0e16640
  $fShowLocus_$cshowsPrec ::
    GHC.Types.Int -> World.Locus -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: World.Locus)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (World.$fShowLocus_$cshow x))
                   s) -}
b7c3f8c71cda577cf70f789d911ff10c
  $fShowTfbs :: GHC.Show.Show World.Tfbs
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Tfbs
                  World.$fShowTfbs_$cshowsPrec
                  World.$fShowTfbs_$cshow
                  World.$fShowTfbs_$cshowList -}
b7c3f8c71cda577cf70f789d911ff10c
  $fShowTfbs1 :: World.Tfbs -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: World.Tfbs) (w1 :: GHC.Base.String) ->
                 case w of ww { World.Tfbs ww1 ww2 ->
                 World.$w$cshowsPrec1 0# ww1 ww2 w1 }) -}
eee662833d5b87d08555179eb0010beb
  $fShowTfbs2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Tfbs "#) -}
b7c3f8c71cda577cf70f789d911ff10c
  $fShowTfbs_$cshow :: World.Tfbs -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: World.Tfbs) ->
                 World.$fShowTfbs_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b7c3f8c71cda577cf70f789d911ff10c
  $fShowTfbs_$cshowList :: [World.Tfbs] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ World.Tfbs World.$fShowTfbs1) -}
b7c3f8c71cda577cf70f789d911ff10c
  $fShowTfbs_$cshowsPrec ::
    GHC.Types.Int -> World.Tfbs -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U(U),1*U(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: World.Tfbs)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { World.Tfbs ww3 ww4 ->
                 World.$w$cshowsPrec1 ww1 ww3 ww4 w2 } }) -}
504c9df678d489c946eaa7607372e31e
  $sfromList :: [(World.ID, a)] -> Data.Map.Base.Map World.ID a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(World.ID, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ World.ID @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { GHC.Types.I# ipv ->
                           Data.Map.Base.Bin
                             @ World.ID
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Base.Tip @ World.ID @ a)
                             (Data.Map.Base.Tip @ World.ID @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of wild4 { GHC.Types.I# x1 ->
                           case ky of wild5 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>=# x1 y) of wild6 {
                             GHC.Types.False
                             -> World.$wpoly_go10
                                  @ a
                                  1#
                                  (Data.Map.Base.Bin
                                     @ World.ID
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Base.Tip @ World.ID @ a)
                                     (Data.Map.Base.Tip @ World.ID @ a))
                                  wild2
                             GHC.Types.True
                             -> World.$sfromList1
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ World.ID
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Base.Tip @ World.ID @ a)
                                     (Data.Map.Base.Tip @ World.ID @ a))
                                  wild2 } } } } } } }) -}
2ec4335f141baaa44a98152b5bee7b72
  $sfromList1 ::
    Data.Map.Base.Map World.ID a1
    -> [(World.ID, a1)] -> Data.Map.Base.Map World.ID a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
0b409936ee40e2a4e4296600a6f08bd6
  $tc'Agent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3534708297499522236##
                   12054879274151042731##
                   World.$trModule
                   World.$tc'Agent1) -}
d84913ae0d9cd45d6cb08ce79961e25c
  $tc'Agent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Agent"#) -}
3d426f530ea624b732892b5fe81daa36
  $tc'CGene :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13308624626711021915##
                   7577787219583518472##
                   World.$trModule
                   World.$tc'CGene1) -}
d7d593acb513120f83648cd18059d3a3
  $tc'CGene1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CGene"#) -}
faa88758eb9a000b1f08777fb29434cb
  $tc'CTfbs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15088172122141897571##
                   811977045620377481##
                   World.$trModule
                   World.$tc'CTfbs1) -}
d0224e01a4dbedcfba5a889bf1301e71
  $tc'CTfbs1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CTfbs"#) -}
9070d85e4239d6afbb3ea179f8ce1fd2
  $tc'Gene :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13628389862257056772##
                   16495479300699716301##
                   World.$trModule
                   World.$tc'Gene1) -}
ad684c222893d87d16d2936d5eb5f054
  $tc'Gene1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Gene"#) -}
224bbf1a33b8d6069537d527222809b3
  $tc'NoAgent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11842447961078119623##
                   6707034127876711848##
                   World.$trModule
                   World.$tc'NoAgent1) -}
c00f7332a3273fd377089e8db3d6f2e3
  $tc'NoAgent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NoAgent"#) -}
ef3081bc66fbc5ba6137a6697c6d341a
  $tc'Tfbs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   890241735487689349##
                   12328985425322005386##
                   World.$trModule
                   World.$tc'Tfbs1) -}
7b4b9ec299d6a98e9746203fef2d7b79
  $tc'Tfbs1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Tfbs"#) -}
c63b73bf601ac3db93bc0147ee1c0894
  $tc'Transposon :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   230491102927297001##
                   1646384356182108274##
                   World.$trModule
                   World.$tc'Transposon1) -}
0cb826872a3bfe62c012b2f309620140
  $tc'Transposon1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Transposon"#) -}
666450a2046392a8aeed4a029104b4a1
  $tcAgent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5542394897554473034##
                   13436446084807005995##
                   World.$trModule
                   World.$tcAgent1) -}
17ac03c10ffa061a8976137d32851b4a
  $tcAgent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Agent"#) -}
3651278a52a0fcda978dbc373a6c8c3d
  $tcGene :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16266337482276267108##
                   1461073033562400959##
                   World.$trModule
                   World.$tcGene1) -}
cf4e5604ac48c054106fdbc7fb201848
  $tcGene1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Gene"#) -}
a3648ff6e0c1088d6310eb4ae2256d05
  $tcLocus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8795950841909112609##
                   14648161675034178906##
                   World.$trModule
                   World.$tcLocus1) -}
523f003c4def2d471655d4bff1cd64b4
  $tcLocus1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Locus"#) -}
88160a0be125f0766641e0f09179e8f9
  $tcTfbs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3439314692772480567##
                   11727859757494631975##
                   World.$trModule
                   World.$tcTfbs1) -}
759a7b470eb031423997ea7a06fe00af
  $tcTfbs1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Tfbs"#) -}
cefac77ddb4dad798e5bfb6b76ee7bc1
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module World.$trModule2 World.$trModule1) -}
d38a55245dd87dbb20699f823543ba33
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "World"#) -}
22b6de4e1ef0b088984b9b96f8ac9c92
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Evolverbetert-0.1.0.0-V8JIjv9qj8K8hV6s9LpTj"#) -}
494277a7c8c04ca0dddc51b0ab6a2147
  $w$c/= ::
    GHC.Prim.Int#
    -> World.Weight -> GHC.Prim.Int# -> World.Weight -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: World.Weight)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: World.Weight) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww ww2) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.I# x ->
                      case ww3 of wild2 { GHC.Types.I# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# x y) of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
5f2f0cd67e991ec71fb71847bbf51c14
  $w$c< ::
    GHC.Prim.Int#
    -> World.Weight -> GHC.Prim.Int# -> World.Weight -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: World.Weight)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: World.Weight) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww ww2) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww ww2) of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Classes.ltInt ww1 ww3 }
                   GHC.Types.True -> GHC.Types.True }) -}
1456d6d9365a8e3394230849e969f4f1
  $w$c<= ::
    GHC.Prim.Int#
    -> World.Weight -> GHC.Prim.Int# -> World.Weight -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: World.Weight)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: World.Weight) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww ww2) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww ww2) of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Classes.leInt ww1 ww3 }
                   GHC.Types.True -> GHC.Types.True }) -}
a31c28257e428324ca9345dcd8b70391
  $w$c== ::
    GHC.Prim.Int#
    -> World.Weight -> GHC.Prim.Int# -> World.Weight -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: World.Weight)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: World.Weight) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww ww2) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Classes.eqInt ww1 ww3 }) -}
e76cc1d9e508b9f0f517232713f440a4
  $w$c==1 ::
    GHC.Prim.Int#
    -> World.Thres
    -> World.GeneState
    -> GHC.Prim.Int#
    -> World.Thres
    -> World.GeneState
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><S,U><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: World.Thres)
                   (ww2 :: World.GeneState)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: World.Thres)
                   (ww5 :: World.GeneState) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww ww3) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.I# x ->
                      case ww4 of wild2 { GHC.Types.I# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# x y) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Classes.eqInt ww2 ww5 } } } }) -}
e02f0438a4888d8dd535ea7c2d000b3a
  $w$c> ::
    GHC.Prim.Int#
    -> World.Weight -> GHC.Prim.Int# -> World.Weight -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: World.Weight)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: World.Weight) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww ww2) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww ww2) of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Classes.gtInt ww1 ww3 }
                   GHC.Types.True -> GHC.Types.False }) -}
8f5c28e1250b78da872b38a58ff76068
  $w$c>= ::
    GHC.Prim.Int#
    -> World.Weight -> GHC.Prim.Int# -> World.Weight -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: World.Weight)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: World.Weight) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww ww2) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww ww2) of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Classes.geInt ww1 ww3 }
                   GHC.Types.True -> GHC.Types.False }) -}
735211c08c61828050be9d5a21a8e7d3
  $w$ccompare ::
    GHC.Prim.Int#
    -> World.Thres
    -> World.GeneState
    -> GHC.Prim.Int#
    -> World.Thres
    -> World.GeneState
    -> GHC.Types.Ordering
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><S,U><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: World.Thres)
                   (ww2 :: World.GeneState)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: World.Thres)
                   (ww5 :: World.GeneState) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww ww3) of wild {
                   GHC.Types.False -> GHC.Classes.compareInt# ww ww3
                   GHC.Types.True
                   -> case ww2 of wild1 { GHC.Types.I# x ->
                      case ww5 of wild2 { GHC.Types.I# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# x y) of wild3 {
                        GHC.Types.False -> GHC.Classes.compareInt# y x
                        GHC.Types.True -> GHC.Classes.compareInt ww1 ww4 } } } }) -}
806445ebd3e4ba755a1a3ff99f26d51e
  $w$ccompare1 ::
    GHC.Prim.Int#
    -> World.Weight
    -> GHC.Prim.Int#
    -> World.Weight
    -> GHC.Types.Ordering
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: World.Weight)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: World.Weight) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww ww2) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww ww2) of wild1 {
                        GHC.Types.False -> GHC.Types.GT
                        GHC.Types.True -> GHC.Classes.compareInt ww1 ww3 }
                   GHC.Types.True -> GHC.Types.LT }) -}
783f3bf10f0f04c4222b4d21fa876eef
  $w$creadPrec ::
    (World.Gene -> Text.ParserCombinators.ReadP.P b1)
    -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
  {- Arity: 1, Strictness: <L,C(U)>, Inline: [0] -}
b7c3f8c71cda577cf70f789d911ff10c
  $w$creadPrec1 ::
    GHC.Prim.Int#
    -> forall b.
       (World.Tfbs -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   @ b
                   (w :: World.Tfbs -> Text.ParserCombinators.ReadP.P b) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10#) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl81 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl82 :: Text.ParserCombinators.ReadP.P b
                            = World.$fReadTfbs6 World.$fReadTfbs5 @ b w
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ (a1 :: Text.Read.Lex.Lexeme) ->
                             case a1 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a2
                               -> case GHC.Base.eqString a2 World.$fReadTfbs4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl82 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl81) -}
                        = \ (w4 :: ()) -> lvl81
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ (a :: GHC.Base.String) ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                           `cast`
                         (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
c9a0507cb9bf315c667cc7e1fd5241e1
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> World.ID
    -> World.Thres
    -> World.GeneState
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: World.ID)
                   (ww2 :: World.Thres)
                   (ww3 :: World.GeneState)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       World.$fShowGene7
                       (GHC.Base.++
                          @ GHC.Types.Char
                          World.$fShowGene6
                          (case ww1 of ww4 { GHC.Types.I# ww5 ->
                           case GHC.Show.$wshowSignedInt
                                  0#
                                  ww5
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     World.$fShowGene5
                                     (GHC.Base.++
                                        @ GHC.Types.Char
                                        World.$fShowGene4
                                        (case ww2 of ww6 { GHC.Types.I# ww7 ->
                                         case GHC.Show.$wshowSignedInt
                                                0#
                                                ww7
                                                (GHC.Base.++
                                                   @ GHC.Types.Char
                                                   World.$fShowGene5
                                                   (GHC.Base.++
                                                      @ GHC.Types.Char
                                                      World.$fShowGene3
                                                      (case ww3 of ww8 { GHC.Types.I# ww9 ->
                                                       case GHC.Show.$wshowSignedInt
                                                              0#
                                                              ww9
                                                              (GHC.Base.++
                                                                 @ GHC.Types.Char
                                                                 World.$fShowGene2
                                                                 x) of ww10 { (#,#) ww11 ww12 ->
                                                       GHC.Types.:
                                                         @ GHC.Types.Char
                                                         ww11
                                                         ww12 } }))) of ww8 { (#,#) ww9 ww10 ->
                                         GHC.Types.:
                                           @ GHC.Types.Char
                                           ww9
                                           ww10 } }))) of ww6 { (#,#) ww7 ww8 ->
                           GHC.Types.: @ GHC.Types.Char ww7 ww8 } }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w)) }) -}
10ec282c255ce8df77e1f1072eec2d3c
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> World.ID -> World.Weight -> GHC.Base.String -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: World.ID)
                   (ww2 :: World.Weight)
                   (w :: GHC.Base.String) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     case ww1 of ww3 { GHC.Types.I# ww4 ->
                     case GHC.Show.$wshowSignedInt
                            11#
                            ww4
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (case ww2 of ww5 { GHC.Types.I# ww6 ->
                                case GHC.Show.$wshowSignedInt 11# ww6 x of ww7 { (#,#) ww8 ww9 ->
                                GHC.Types.:
                                  @ GHC.Types.Char
                                  ww8
                                  ww9 } })) of ww5 { (#,#) ww6 ww7 ->
                     GHC.Types.: @ GHC.Types.Char ww6 ww7 } }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++ @ GHC.Types.Char World.$fShowTfbs2 (g w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           World.$fShowTfbs2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w))) }) -}
5be238f1f3f08546e3c1f7a3e0a34e39
  $w$s$wreplicateM ::
    GHC.Prim.Int#
    -> Control.Monad.Trans.State.Lazy.StateT
         System.Random.Mersenne.Pure64.Internal.PureMT
         Data.Functor.Identity.Identity
         a
    -> System.Random.Mersenne.Pure64.Internal.PureMT
    -> (# [a], System.Random.Mersenne.Pure64.Internal.PureMT #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,C(U(U,U))><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Prim.Int#)
                   (w1 :: Control.Monad.Trans.State.Lazy.StateT
                            System.Random.Mersenne.Pure64.Internal.PureMT
                            Data.Functor.Identity.Identity
                            a)
                   (w2 :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 letrec {
                   $wloop :: GHC.Prim.Int#
                             -> System.Random.Mersenne.Pure64.Internal.PureMT
                             -> (# [a], System.Random.Mersenne.Pure64.Internal.PureMT #)
                     {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0] -}
                   = \ (ww :: GHC.Prim.Int#)
                       (w3 :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<=# ww 0#) of wild1 {
                       GHC.Types.False
                       -> let {
                            ds :: Data.Functor.Identity.Identity
                                    (a, System.Random.Mersenne.Pure64.Internal.PureMT)
                            = w1
                                `cast`
                              (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                   <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                                   <Data.Functor.Identity.Identity>_R
                                   <a>_N)
                                w3
                          } in
                          let {
                            ds3 :: Data.Functor.Identity.Identity
                                     ([a], System.Random.Mersenne.Pure64.Internal.PureMT)
                            = case $wloop
                                     (GHC.Prim.-# ww 1#)
                                     (case ds
                                             `cast`
                                           (Data.Functor.Identity.N:Identity[0]
                                                <(a,
                                                  System.Random.Mersenne.Pure64.Internal.PureMT)>_R) of wild { (,) a1 s' ->
                                      s' }) of ww1 { (#,#) ww2 ww3 ->
                              (ww2, ww3)
                                `cast`
                              (Sym (Data.Functor.Identity.N:Identity[0]
                                        <([a], System.Random.Mersenne.Pure64.Internal.PureMT)>_R)) }
                          } in
                          (# GHC.Types.:
                               @ a
                               (case ds
                                       `cast`
                                     (Data.Functor.Identity.N:Identity[0]
                                          <(a,
                                            System.Random.Mersenne.Pure64.Internal.PureMT)>_R) of wild { (,) a1 s' ->
                                a1 })
                               (case ds3
                                       `cast`
                                     (Data.Functor.Identity.N:Identity[0]
                                          <([a],
                                            System.Random.Mersenne.Pure64.Internal.PureMT)>_R) of wild2 { (,) x s'' ->
                                x }),
                             case ds3
                                    `cast`
                                  (Data.Functor.Identity.N:Identity[0]
                                       <([a],
                                         System.Random.Mersenne.Pure64.Internal.PureMT)>_R) of wild { (,) x s'' ->
                             s'' } #)
                       GHC.Types.True -> (# GHC.Types.[] @ a, w3 #) }
                 } in
                 $wloop w w2) -}
870c7401143a85a886f4c953ad1a557b
  $w$sgo1 ::
    (World.ID -> a1 -> a1 -> a1)
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map World.ID a1
    -> Data.Map.Base.Map World.ID a1
  {- Arity: 4, Strictness: <L,1*C1(C1(C1(U)))><L,U><L,U><S,1*U>,
     Inline: [0] -}
085e3d70ade3c225adc78878e256983b
  $w$sgo10 ::
    GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map World.ID a1
    -> Data.Map.Base.Map World.ID a1
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
0788f5d87c0fc9b50b6fe69d6357a6f4
  $w$shammDist ::
    [(GHC.Types.Int, GHC.Types.Int)]
    -> [(GHC.Types.Int, GHC.Types.Int)] -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Inline: [0] -}
eaf83ec579deb569cb64eec09ad1f254
  $wf :: GHC.Prim.Double# -> GHC.Prim.Int# -> GHC.Prim.Double#
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>, Inline: [0] -}
daf3bb0ca96a106c28cd9a2c0fdf3be3
  $wfitnessGST ::
    GHC.Prim.Int# -> World.GeneStateTable -> GHC.Prim.Double#
  {- Arity: 2, Strictness: <S,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: World.GeneStateTable) ->
                 case World.$w$shammDist
                        (Data.Map.Base.toAscList1
                           @ GHC.Types.Int
                           @ GHC.Types.Int
                           (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int))
                           (World.$wtargetGST ww))
                        (Data.Map.Base.toAscList
                           @ GHC.Types.Int
                           @ GHC.Types.Int
                           w) of ww1 { DEFAULT ->
                 World.$wf
                   (GHC.Prim.-##
                      1.0##
                      (GHC.Prim./## (GHC.Prim.int2Double# ww1) 20.0##))
                   10# }) -}
7c348263a2bd693d3d9832aa0fae6ea5
  $wgo ::
    GHC.Prim.Int#
    -> [GHC.Types.Int]
    -> GHC.Prim.Int#
    -> [(World.ID, World.GeneState)]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,1*U><L,1*U>,
     Inline: [0] -}
cc44dcd59e8e0518ef56903174f43456
  $wgo1 :: World.Agent -> GHC.Prim.Int# -> [World.Agent]
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
e5e53185c0eafcc1b013216045327cb1
  $wgo2 :: World.Agent -> GHC.Prim.Int# -> [World.Agent]
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
1559ab2aace7bd7a91d28ad5e186df22
  $wgo3 ::
    [Control.Monad.Trans.State.Lazy.StateT
       System.Random.Mersenne.Pure64.Internal.PureMT
       Data.Functor.Identity.Identity
       [World.Locus]]
    -> System.Random.Mersenne.Pure64.Internal.PureMT
    -> (# [[World.Locus]],
          System.Random.Mersenne.Pure64.Internal.PureMT #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
acc995c883603bda562e1310b87426a8
  $wgoodRandomGenome ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (# World.Genome,
          System.Random.Mersenne.Pure64.Internal.PureMT #)
  {- Arity: 1, Strictness: <L,U(U,U,U(U))>, Inline: [0] -}
b041f5f5e9145410f528a35b52d01664
  $whammDist :: GHC.Classes.Eq a => [a] -> [a] -> GHC.Prim.Int#
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)))><S,1*U><L,1*U>, Inline: [0] -}
788f390dbeb6db96c2bfcd95871b659e
  $whammDistAg :: World.Agent -> World.Env -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <S,1*U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (w :: World.Agent) (w1 :: World.Env) ->
                 case w of wild {
                   World.Agent ipv ipv1
                   -> World.$w$shammDist
                        (Data.Map.Base.toAscList1
                           @ GHC.Types.Int
                           @ GHC.Types.Int
                           (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int))
                           (World.targetGST w1))
                        (Data.Map.Base.toAscList @ GHC.Types.Int @ GHC.Types.Int ipv1)
                   World.NoAgent -> 20# }) -}
dd189a0b02fda8fefcef6f52be9396f1
  $wpoly_go1 ::
    GHC.Prim.Int# -> Data.Map.Base.Map World.ID a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
6b9b5b1d7198abcc5d0fd0626cb7d409
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map World.ID a
    -> [(World.ID, a)]
    -> Data.Map.Base.Map World.ID a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
57a01f0f71d09eaac448dee17a24320e
  $wrandomAgent ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (# World.Agent, System.Random.Mersenne.Pure64.Internal.PureMT #)
  {- Arity: 1, Strictness: <L,U(U,U,U(U))>, Inline: [0] -}
fecd85a2f600f052761adc1f25237401
  $wrandomChromosome ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (# [World.Locus],
          System.Random.Mersenne.Pure64.Internal.PureMT #)
  {- Arity: 1, Strictness: <L,U(U,U,U(U))>, Inline: [0],
     Unfolding: (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 World.$wrandomChromosome1
                   w
                   (case w of wild { System.Random.Mersenne.Pure64.Internal.PureMT dt dt1 nxt ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<# dt1 311#) of wild1 {
                      GHC.Types.False
                      -> case nxt of dt2 { System.Random.Mersenne.Pure64.Internal.MTBlock dt3 ->
                         System.Random.Mersenne.Pure64.Internal.PureMT
                           dt3
                           0#
                           (System.Random.Mersenne.Pure64.MTBlock.nextBlock dt2) }
                      GHC.Types.True
                      -> System.Random.Mersenne.Pure64.Internal.PureMT
                           dt
                           (GHC.Prim.+# dt1 1#)
                           nxt } })) -}
a1df21dde5508846af26474a925f94e4
  $wrandomChromosome1 ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> System.Random.Mersenne.Pure64.Internal.PureMT
    -> (# [World.Locus],
          System.Random.Mersenne.Pure64.Internal.PureMT #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT)
                   (w1 :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 let {
                   ds :: Data.Functor.Identity.Identity
                           ([[World.Locus]], System.Random.Mersenne.Pure64.Internal.PureMT)
                   = case World.$wgo3
                            World.randomChromosome2
                            w1 of ww { (#,#) ww1 ww2 ->
                     (ww1, ww2)
                       `cast`
                     (Sym (Data.Functor.Identity.N:Identity[0]
                               <([[World.Locus]],
                                 System.Random.Mersenne.Pure64.Internal.PureMT)>_R)) }
                 } in
                 (# case ds
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <([[World.Locus]],
                                System.Random.Mersenne.Pure64.Internal.PureMT)>_R) of wild { (,) a1 s' ->
                    let {
                      ds1 :: [World.Locus] = World.randomChromosome_go a1
                    } in
                    case GHC.List.$wlenAcc @ World.Locus ds1 0# of ww2 { DEFAULT ->
                    case System.Random.Shuffle.shuffle'1
                           @ System.Random.Mersenne.Pure64.Internal.PureMT
                           (System.Random.Shuffle.$wrseq'
                              @ System.Random.Mersenne.Pure64.Internal.PureMT
                              MyRandom.$fRandomGenPureMT
                              (GHC.Prim.-# ww2 1#)
                              w) of ww { (#,#) ww1 ww4 ->
                    System.Random.Shuffle.shuffle1
                      @ World.Locus
                      (System.Random.Shuffle.shuffle_x
                         @ World.Locus
                         (GHC.Base.map
                            @ World.Locus
                            @ (System.Random.Shuffle.Tree World.Locus)
                            (System.Random.Shuffle.$WLeaf @ World.Locus)
                            ds1))
                      ww1 } } },
                    case ds
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <([[World.Locus]],
                                System.Random.Mersenne.Pure64.Internal.PureMT)>_R) of wild { (,) a1 s' ->
                    s' } #)) -}
1ffb1b6265d17a0ec28c2d3f0569b174
  $wrandomGene ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (# [World.Locus],
          System.Random.Mersenne.Pure64.Internal.PureMT #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 let {
                   ds :: Data.Functor.Identity.Identity
                           ([GHC.Types.Int], System.Random.Mersenne.Pure64.Internal.PureMT)
                   = case World.$w$s$wreplicateM
                            @ GHC.Types.Int
                            20#
                            World.randomChromosome7
                              `cast`
                            (Trans
                                 (<System.Random.Mersenne.Pure64.Internal.PureMT>_R
                                  ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                                <(GHC.Types.Int,
                                                  System.Random.Mersenne.Pure64.Internal.PureMT)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                                           <Data.Functor.Identity.Identity>_R
                                           <GHC.Types.Int>_N)))
                            w of ww { (#,#) ww1 ww2 ->
                     (ww1, ww2)
                       `cast`
                     (Sym (Data.Functor.Identity.N:Identity[0]
                               <([GHC.Types.Int],
                                 System.Random.Mersenne.Pure64.Internal.PureMT)>_R)) }
                 } in
                 let {
                   w1 :: System.Random.Mersenne.Pure64.Internal.PureMT
                   = case ds
                            `cast`
                          (Data.Functor.Identity.N:Identity[0]
                               <([GHC.Types.Int],
                                 System.Random.Mersenne.Pure64.Internal.PureMT)>_R) of wild { (,) a1 s' ->
                     s' }
                 } in
                 (# case System.Random.Shuffle.shuffle'1
                           @ System.Random.Mersenne.Pure64.Internal.PureMT
                           (System.Random.Shuffle.$wrseq'
                              @ System.Random.Mersenne.Pure64.Internal.PureMT
                              MyRandom.$fRandomGenPureMT
                              19#
                              w1) of ww { (#,#) ww1 ww2 ->
                    GHC.Base.map
                      @ World.Gene
                      @ World.Locus
                      World.CGene
                      (System.Random.Shuffle.shuffle1
                         @ World.Gene
                         (System.Random.Shuffle.shuffle_x
                            @ World.Gene
                            (World.randomChromosome_go1
                               World.randomChromosome6
                               (case ds
                                       `cast`
                                     (Data.Functor.Identity.N:Identity[0]
                                          <([GHC.Types.Int],
                                            System.Random.Mersenne.Pure64.Internal.PureMT)>_R) of wild { (,) a1 s' ->
                                System.Random.Shuffle.shuffle1
                                  @ GHC.Types.Int
                                  (System.Random.Shuffle.shuffle_x
                                     @ GHC.Types.Int
                                     (GHC.Base.map
                                        @ GHC.Types.Int
                                        @ (System.Random.Shuffle.Tree GHC.Types.Int)
                                        (System.Random.Shuffle.$WLeaf @ GHC.Types.Int)
                                        a1))
                                  ww1 })))
                         ww1) },
                    case w1 of wild { System.Random.Mersenne.Pure64.Internal.PureMT dt dt1 nxt ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<# dt1 311#) of wild1 {
                      GHC.Types.False
                      -> case nxt of dt2 { System.Random.Mersenne.Pure64.Internal.MTBlock dt3 ->
                         System.Random.Mersenne.Pure64.Internal.PureMT
                           dt3
                           0#
                           (System.Random.Mersenne.Pure64.MTBlock.nextBlock dt2) }
                      GHC.Types.True
                      -> System.Random.Mersenne.Pure64.Internal.PureMT
                           dt
                           (GHC.Prim.+# dt1 1#)
                           nxt } } #)) -}
c30048847e88f67b7b42a3c52540cd26
  $wrandomGenome ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (# [World.Chromosome],
          System.Random.Mersenne.Pure64.Internal.PureMT #)
  {- Arity: 1, Strictness: <L,U(U,U,U(U))>, Inline: [0],
     Unfolding: (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 let {
                   ds :: Data.Functor.Identity.Identity
                           ([World.Locus], System.Random.Mersenne.Pure64.Internal.PureMT)
                   = case World.$wrandomChromosome1
                            w
                            (case w of wild { System.Random.Mersenne.Pure64.Internal.PureMT dt dt1 nxt ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.<# dt1 311#) of wild1 {
                               GHC.Types.False
                               -> case nxt of dt2 { System.Random.Mersenne.Pure64.Internal.MTBlock dt3 ->
                                  System.Random.Mersenne.Pure64.Internal.PureMT
                                    dt3
                                    0#
                                    (System.Random.Mersenne.Pure64.MTBlock.nextBlock dt2) }
                               GHC.Types.True
                               -> System.Random.Mersenne.Pure64.Internal.PureMT
                                    dt
                                    (GHC.Prim.+# dt1 1#)
                                    nxt } }) of ww { (#,#) ww1 ww2 ->
                     (ww1, ww2)
                       `cast`
                     (Sym (Data.Functor.Identity.N:Identity[0]
                               <([World.Locus],
                                 System.Random.Mersenne.Pure64.Internal.PureMT)>_R)) }
                 } in
                 (# GHC.Types.:
                      @ World.Chromosome
                      (case ds
                              `cast`
                            (Data.Functor.Identity.N:Identity[0]
                                 <(World.Chromosome,
                                   System.Random.Mersenne.Pure64.Internal.PureMT)>_R) of wild { (,) a1 s' ->
                       a1 })
                      (GHC.Types.[] @ World.Chromosome),
                    case ds
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <(World.Chromosome,
                                System.Random.Mersenne.Pure64.Internal.PureMT)>_R) of wild { (,) a1 s' ->
                    s' } #)) -}
b2a66d76d278ebfac738cb720392823e
  $wrandomTfbs ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (# [World.Locus],
          System.Random.Mersenne.Pure64.Internal.PureMT #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 let {
                   ds :: Data.Functor.Identity.Identity
                           ([GHC.Types.Int], System.Random.Mersenne.Pure64.Internal.PureMT)
                   = case World.$w$s$wreplicateM
                            @ GHC.Types.Int
                            20#
                            World.randomChromosome9
                              `cast`
                            (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                      <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                                      <Data.Functor.Identity.Identity>_R
                                      <GHC.Types.Int>_N))
                            w of ww { (#,#) ww1 ww2 ->
                     (ww1, ww2)
                       `cast`
                     (Sym (Data.Functor.Identity.N:Identity[0]
                               <([GHC.Types.Int],
                                 System.Random.Mersenne.Pure64.Internal.PureMT)>_R)) }
                 } in
                 let {
                   w1 :: System.Random.Mersenne.Pure64.Internal.PureMT
                   = case ds
                            `cast`
                          (Data.Functor.Identity.N:Identity[0]
                               <([GHC.Types.Int],
                                 System.Random.Mersenne.Pure64.Internal.PureMT)>_R) of wild { (,) a1 s' ->
                     s' }
                 } in
                 (# case System.Random.Shuffle.shuffle'1
                           @ System.Random.Mersenne.Pure64.Internal.PureMT
                           (System.Random.Shuffle.$wrseq'
                              @ System.Random.Mersenne.Pure64.Internal.PureMT
                              MyRandom.$fRandomGenPureMT
                              19#
                              w1) of ww { (#,#) ww1 ww2 ->
                    GHC.Base.map
                      @ World.Tfbs
                      @ World.Locus
                      World.CTfbs
                      (System.Random.Shuffle.shuffle1
                         @ World.Tfbs
                         (System.Random.Shuffle.shuffle_x
                            @ World.Tfbs
                            (World.randomChromosome_go2
                               World.randomChromosome6
                               (case ds
                                       `cast`
                                     (Data.Functor.Identity.N:Identity[0]
                                          <([GHC.Types.Int],
                                            System.Random.Mersenne.Pure64.Internal.PureMT)>_R) of wild { (,) a1 s' ->
                                System.Random.Shuffle.shuffle1
                                  @ GHC.Types.Int
                                  (System.Random.Shuffle.shuffle_x
                                     @ GHC.Types.Int
                                     (GHC.Base.map
                                        @ GHC.Types.Int
                                        @ (System.Random.Shuffle.Tree GHC.Types.Int)
                                        (System.Random.Shuffle.$WLeaf @ GHC.Types.Int)
                                        a1))
                                  ww1 })))
                         ww1) },
                    case w1 of wild { System.Random.Mersenne.Pure64.Internal.PureMT dt dt1 nxt ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<# dt1 311#) of wild1 {
                      GHC.Types.False
                      -> case nxt of dt2 { System.Random.Mersenne.Pure64.Internal.MTBlock dt3 ->
                         System.Random.Mersenne.Pure64.Internal.PureMT
                           dt3
                           0#
                           (System.Random.Mersenne.Pure64.MTBlock.nextBlock dt2) }
                      GHC.Types.True
                      -> System.Random.Mersenne.Pure64.Internal.PureMT
                           dt
                           (GHC.Prim.+# dt1 1#)
                           nxt } } #)) -}
9b06a5d044d04e404551b87e2b97478a
  $wtakeWhileInclusive ::
    (a -> GHC.Types.Bool) -> [a] -> [a] -> (# [a], [a] #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><L,U><S,1*U>,
     Inline: [0] -}
9a36624ccf36b6ae578e4b25deb23202
  $wtargetGST :: GHC.Prim.Int# -> World.GeneStateTable
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case ww of ds {
                   DEFAULT
                   -> letrec {
                        $wgo6 :: [World.ID] -> GHC.Prim.Int# -> [(World.ID, GHC.Types.Int)]
                          {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
                        = \ (w :: [World.ID]) (ww1 :: GHC.Prim.Int#) ->
                          case w of wild {
                            [] -> GHC.Types.[] @ (World.ID, GHC.Types.Int)
                            : y ys
                            -> case ww1 of ds1 {
                                 DEFAULT
                                 -> GHC.Types.:
                                      @ (World.ID, GHC.Types.Int)
                                      (y,
                                       case y of ww2 { GHC.Types.I# ww3 ->
                                       case GHC.Prim.tagToEnum#
                                              @ GHC.Types.Bool
                                              (GHC.Prim.<# ww3 8#) of wild1 {
                                         GHC.Types.False
                                         -> case GHC.Classes.modInt#
                                                   (GHC.Prim.-# (GHC.Prim.-# ww3 8#) ds)
                                                   2# of ww4 {
                                              DEFAULT -> GHC.Types.I# 0# 0# -> GHC.Types.I# 1# }
                                         GHC.Types.True -> GHC.Types.I# 1# } })
                                      ($wgo6 ys (GHC.Prim.-# ds1 1#))
                                 1#
                                 -> GHC.Types.:
                                      @ (World.ID, GHC.Types.Int)
                                      (y,
                                       case y of ww2 { GHC.Types.I# ww3 ->
                                       case GHC.Prim.tagToEnum#
                                              @ GHC.Types.Bool
                                              (GHC.Prim.<# ww3 8#) of wild1 {
                                         GHC.Types.False
                                         -> case GHC.Classes.modInt#
                                                   (GHC.Prim.-# (GHC.Prim.-# ww3 8#) ds)
                                                   2# of ww4 {
                                              DEFAULT -> GHC.Types.I# 0# 0# -> GHC.Types.I# 1# }
                                         GHC.Types.True -> GHC.Types.I# 1# } })
                                      (GHC.Types.[] @ (World.ID, GHC.Types.Int)) } }
                      } in
                      World.$sfromList @ GHC.Types.Int ($wgo6 World.fitnessGST5 20#)
                   0# -> World.fitnessGST3
                   1# -> World.fitnessGST1 }) -}
33d3cbd47b3db0634720d677b02c84f9
  data Agent
    = Agent {genome :: World.Genome,
             geneStateTable :: World.GeneStateTable}
    | NoAgent
10ec0dbdb678d025d6d08fe4df02ea1f
  type Agents =
    GHC.Arr.Array (GHC.Types.Int, GHC.Types.Int) World.Agent
f841700e987b622ecb2447998248585c
  type Chromosome = [World.Locus]
7242615a5a1d9433ad0c730140466ebf
  type Env = GHC.Types.Int
783f3bf10f0f04c4222b4d21fa876eef
  data Gene
    = Gene {iD :: World.ID,
            thres :: World.Thres,
            genSt :: World.GeneState}
40a27c94ba2ba3f98f636c5cef3e5306
  type GeneState = GHC.Types.Int
17b05b9dbe44514bcca9a09697cd0cd3
  type GeneStateTable = Data.Map.Base.Map World.ID World.GeneState
f2376386c05788bc5fcb69aca2273abe
  type Genome = [World.Chromosome]
a1640ced7ed8768cc3e645d6dc15784b
  type ID = GHC.Types.Int
faad59d0fa532dbcb9013f9ea0e16640
  data Locus = Transposon | CGene World.Gene | CTfbs World.Tfbs
b7c3f8c71cda577cf70f789d911ff10c
  data Tfbs = Tfbs World.ID World.Weight
23663f83e5aa8616f58cac7d5ab43197
  type Thres = GHC.Types.Int
6fd44de6896ef09cc34294e61d83efc4
  type Weight = GHC.Types.Int
c0b172672dfb817afb7b3d5995003f8a
  type World = (World.Agents, World.Env)
ce29fbb643b0ca14e0e5b59f02f44828
  agent0 :: World.Agent
  {- Unfolding: (World.agent0_takeUntilSame World.agent1) -}
75b3f550672d59d938e5ff123de8711d
  agent0_takeUntilSame :: [World.Agent] -> World.Agent
  {- Arity: 1, Strictness: <S,1*U> -}
d53120abf960d3782d299362e823acd3
  agent1 :: [World.Agent]
  {- Unfolding: (World.$wgo1 World.agent2 20#) -}
f2ff1b4a4d78783fad05fe585eb3db46
  agent2 :: World.Agent
  {- Unfolding: (World.Agent World.agent3 World.defaultGst) -}
fad98cddc84d8f4d218a0eec98c39cef
  agent3 :: [[World.Locus]]
  {- Unfolding: (GHC.Types.:
                   @ [World.Locus]
                   World.agent4
                   (GHC.Types.[] @ [World.Locus])) -}
1e11960d2e5d403d1978071ac139ae11
  agent4 :: [World.Locus]
  {- Unfolding: (GHC.Base.map
                   @ [GHC.Types.Char]
                   @ World.Locus
                   World.parseLoc
                   World.agent5) -}
82f40da3ce46b20ba387c344ffd14862
  agent5 :: [[GHC.Types.Char]]
  {- Unfolding: (World.agent7 World.agent6) -}
a227bd5713bf5863878008ffc7a45e07
  agent6 :: [GHC.Types.Char]
f95c508e618623506ef711603677d87e
  agent7 :: [GHC.Types.Char] -> [[GHC.Types.Char]]
  {- Unfolding: (Data.List.Split.Internals.splitOn
                   @ GHC.Types.Char
                   GHC.Classes.$fEqChar
                   World.agent8) -}
f9e99393f48fcf09d65132ebebbf9c94
  agent8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ","#) -}
e5b0d727dbd632b39b1226d4981dc52e
  connected :: World.Genome -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                World.connected1
                  `cast`
                (<[[World.Locus]]>_R ->_R Data.Monoid.N:All[0]) -}
a1dbf1542afcdf392c5773b58206575a
  connected1 :: [[World.Locus]] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [[World.Locus]]) ->
                 World.connected_go1 (World.connected2 x)) -}
dd494cf9e86c8ef7313ed8cc4577ab9b
  connected2 :: [[World.Locus]] -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [[World.Locus]]) ->
                 GHC.Base.map
                   @ [World.Locus]
                   @ GHC.Types.Int
                   (GHC.List.length @ World.Locus)
                   (World.groupGeneTfbs (World.connected_go x))) -}
f456c37f15daf5f140dda6aada4981c0
  connected_go :: [[World.Locus]] -> [World.Locus]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
f3deb0e9ecd341c74219de0495a26f49
  connected_go1 :: [GHC.Types.Int] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
9bdf1ae0cfa08e0bc8816bca903cffbc
  defaultGst :: Data.Map.Base.Map World.ID World.GeneState
  {- Unfolding: (World.$sfromList
                   @ GHC.Types.Int
                   World.defaultGst1) -}
779158b52f0b786211c766599f3065ab
  defaultGst1 :: [(World.ID, World.GeneState)]
  {- Unfolding: (World.$wgo 0# World.defaultGst_xs 20#) -}
0715bb277b6ce6ae1976eba905ba0c05
  defaultGst_xs :: [GHC.Types.Int]
  {- HasNoCafRefs -}
0e26eed8c559f00c9effbac159fc9847
  devAg :: World.Agent -> World.Agent
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (x :: World.Agent) ->
                 World.agent0_takeUntilSame (World.$wgo2 x 20#)) -}
ae68dabf0f6c024e37fb146b713e47de
  fitnessAgent :: World.Agent -> World.Env -> GHC.Types.Double
  {- Arity: 2, Strictness: <S,1*U><L,1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: World.Agent) (e :: World.Env) ->
                 case ds of wild {
                   World.Agent ds1 gst -> World.fitnessGST e gst
                   World.NoAgent -> World.fitnessAgent1 }) -}
5eb90d5300c0986fd7e9cec9aaff1f61
  fitnessAgent1 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 0.0##) -}
5bf48c041e27a784d9b0aba27e8d220a
  fitnessGST :: World.Env -> World.GeneStateTable -> GHC.Types.Double
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Env) (w1 :: World.GeneStateTable) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case World.$wfitnessGST ww1 w1 of ww2 { DEFAULT ->
                 GHC.Types.D# ww2 } }) -}
d8fe0db5aae88e56f334f9964030cd45
  fitnessGST1 :: World.GeneStateTable
  {- Unfolding: (World.$sfromList
                   @ GHC.Types.Int
                   World.fitnessGST2) -}
324d1a6c531f99553bf4ced80f8b2742
  fitnessGST2 :: [(World.ID, GHC.Types.Int)]
  {- Unfolding: (World.fitnessGST_go 0#) -}
c2b1f2eb0691db1b19adfeedbd499b4c
  fitnessGST3 :: World.GeneStateTable
  {- Unfolding: (World.$sfromList
                   @ GHC.Types.Int
                   World.fitnessGST4) -}
3274e4364df211ee9e6531320bc4cc52
  fitnessGST4 :: [(World.ID, GHC.Types.Int)]
  {- Unfolding: (World.fitnessGST_go1 0#) -}
3618d13100bb7a0002848af4058cf091
  fitnessGST5 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.eftInt 0# 9223372036854775807#) -}
4c7b8fae72f7b52990ee4ad1678f8a3a
  fitnessGST_go :: GHC.Prim.Int# -> [(World.ID, GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
c785c61e783e905ad94bb147fa5f4ff6
  fitnessGST_go1 :: GHC.Prim.Int# -> [(World.ID, GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
7483aea19a674caf52e2e872fc01b9e4
  gSTFromGenome :: World.Genome -> World.GeneStateTable
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (genes :: World.Genome) ->
                 World.makeGst
                   (Data.Map.Base.Tip @ World.ID @ World.GeneState)
                   (World.reduceToGenes genes)) -}
a012c362c9259e85db72a3f70ac33d00
  genSt :: World.Gene -> World.GeneState
  RecSel Left World.Gene
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: World.Gene) ->
                 case ds of wild { World.Gene ds1 ds2 ds3 -> ds3 }) -}
5efc78db56aa1ab094715bdbc24e8f1e
  geneStateTable :: World.Agent -> World.GeneStateTable
  RecSel Left World.Agent
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: World.Agent) ->
                 case ds of wild {
                   World.Agent ds1 ds2 -> ds2
                   World.NoAgent -> World.geneStateTable1 }) -}
c7ef12c0936d2f997f05410972cb7826
  geneStateTable1 :: World.GeneStateTable
  {- Strictness: x -}
0b1a13f29c6801339651f77ce3644fff
  genome :: World.Agent -> World.Genome
  RecSel Left World.Agent
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: World.Agent) ->
                 case ds of wild {
                   World.Agent ds1 ds2 -> ds1 World.NoAgent -> World.genome1 }) -}
84ead9b9b1436bc8012a7a98f74b8e28
  genome1 :: World.Genome
  {- Strictness: x -}
063ae68a3921df2174b77f4cde254666
  goodRandomGenome :: MyRandom.Rand World.Genome
  {- Arity: 1, Strictness: <L,U(U,U,U(U))>m,
     Unfolding: InlineRule (0, True, True)
                World.goodRandomGenome1
                  `cast`
                (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                          <Data.Functor.Identity.Identity>_R
                          <World.Genome>_N)) -}
0abbb0808047a8488f2fb1734121b240
  goodRandomGenome1 ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> Data.Functor.Identity.Identity
         (World.Genome, System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, Strictness: <L,U(U,U,U(U))>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case World.$wgoodRandomGenome w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <(World.Genome,
                             System.Random.Mersenne.Pure64.Internal.PureMT)>_R)) }) -}
db4f87038cb49c0b943b2d48ab4a80e8
  groupGeneTfbs :: [World.Locus] -> [[World.Locus]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
bbebc4fe6316d25d025dce2d5241b4ec
  hammDist :: GHC.Classes.Eq a => [a] -> [a] -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)))><S,1*U><L,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a (w :: GHC.Classes.Eq a) (w1 :: [a]) (w2 :: [a]) ->
                 case World.$whammDist @ a w w1 w2 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
e2958ec41796fbd1e34489ba6693c0c1
  hammDistAg :: World.Agent -> World.Env -> GHC.Types.Int
  {- Arity: 2, Strictness: <S,1*U><L,1*U(U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Agent) (w1 :: World.Env) ->
                 case World.$whammDistAg w w1 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
3cd5ad98a7b9d537f7efca4cdb07b44a
  hammDist_$shammDist ::
    [(GHC.Types.Int, GHC.Types.Int)]
    -> [(GHC.Types.Int, GHC.Types.Int)] -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [(GHC.Types.Int, GHC.Types.Int)])
                   (w1 :: [(GHC.Types.Int, GHC.Types.Int)]) ->
                 case World.$w$shammDist w w1 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
48218c3d256cda0304cc050a743cd483
  iD :: World.Gene -> World.ID
  RecSel Left World.Gene
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: World.Gene) ->
                 case ds of wild { World.Gene ds1 ds2 ds3 -> ds1 }) -}
6efd7a9ebe77d59f56847a2f75cb7f1f
  isGene :: World.Locus -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: World.Locus) ->
                 case x of wild {
                   DEFAULT -> GHC.Types.False World.CGene ds -> GHC.Types.True }) -}
e64f891fa9522a829b3f03b619a5c09c
  locusEffect :: World.Locus -> World.GeneStateTable -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: (\ (ds :: World.Locus) (gst :: World.GeneStateTable) ->
                 case ds of wild {
                   DEFAULT -> World.$fShowAgent2
                   World.CTfbs ds1
                   -> case ds1 of wild1 { World.Tfbs i w ->
                      case i of ww { GHC.Types.I# ww1 ->
                      case World.$wpoly_go1 @ GHC.Types.Int ww1 gst of wild2 {
                        GHC.Base.Nothing -> World.$fShowAgent2
                        GHC.Base.Just a1
                        -> case a1 of wild3 { GHC.Types.I# x ->
                           case x of wild4 {
                             DEFAULT -> World.$fShowAgent2 1# -> w } } } } } }) -}
287933912257229689e7687f49694adc
  makeGst ::
    World.GeneStateTable -> [World.Gene] -> World.GeneStateTable
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
0c19748d932e31ea5747d8a98fe1235b
  parseLoc :: [GHC.Types.Char] -> World.Locus
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (str :: [GHC.Types.Char]) ->
                 case str of wild {
                   [] -> case GHC.List.badHead ret_ty World.Locus of {}
                   : x ds1
                   -> case x of wild1 { GHC.Types.C# x1 ->
                      let {
                        s :: [[GHC.Types.Char]] = World.parseLoc4 wild
                      } in
                      case x1 of wild2 {
                        DEFAULT
                        -> case GHC.Base.eqString wild World.$fShowLocus2 of wild3 {
                             GHC.Types.False
                             -> World.CTfbs
                                  (World.Tfbs
                                     (case Text.Read.readEither6
                                             @ World.ID
                                             (Text.ParserCombinators.ReadP.run
                                                @ World.ID
                                                World.parseLoc3
                                                (case s of wild4 {
                                                   [] -> GHC.List.badHead @ [GHC.Types.Char]
                                                   : x2 ds2 -> x2 })) of wild4 {
                                        [] -> World.parseLoc2
                                        : x2 ds
                                        -> case ds of wild5 {
                                             [] -> x2 : ipv ipv1 -> World.parseLoc1 } })
                                     (case Text.Read.readEither6
                                             @ World.Weight
                                             (Text.ParserCombinators.ReadP.run
                                                @ World.Weight
                                                World.parseLoc3
                                                (GHC.List.$w!! @ [GHC.Types.Char] s 1#)) of wild4 {
                                        [] -> World.parseLoc2
                                        : x2 ds
                                        -> case ds of wild5 {
                                             [] -> x2 : ipv ipv1 -> World.parseLoc1 } }))
                             GHC.Types.True -> World.Transposon }
                        'G'#
                        -> World.CGene
                             (World.Gene
                                (case Text.Read.readEither6
                                        @ World.ID
                                        (Text.ParserCombinators.ReadP.run
                                           @ World.ID
                                           World.parseLoc3
                                           (case s of wild3 {
                                              []
                                              -> case GHC.List.badHead ret_ty GHC.Base.String of {}
                                              : x2 ds2
                                              -> case x2 of wild4 {
                                                   [] -> GHC.List.scanl2 @ GHC.Types.Char
                                                   : ds3 xs -> xs } })) of wild3 {
                                   [] -> World.parseLoc2
                                   : x2 ds
                                   -> case ds of wild4 { [] -> x2 : ipv ipv1 -> World.parseLoc1 } })
                                (case Text.Read.readEither6
                                        @ World.Thres
                                        (Text.ParserCombinators.ReadP.run
                                           @ World.Thres
                                           World.parseLoc3
                                           (GHC.List.$w!! @ [GHC.Types.Char] s 1#)) of wild3 {
                                   [] -> World.parseLoc2
                                   : x2 ds
                                   -> case ds of wild4 { [] -> x2 : ipv ipv1 -> World.parseLoc1 } })
                                World.$fShowAgent2) } } }) -}
8e10215995edb79b96952d33640dddf8
  parseLoc1 :: World.ID
  {- Strictness: x -}
058a79580b8111022fd5b6cc899b0b07
  parseLoc2 :: World.ID
  {- Strictness: x -}
56dd32f9ce5b0cdad53115726e54f85d
  parseLoc3 :: Text.ParserCombinators.ReadP.P World.ID
  {- Unfolding: (GHC.Read.$fReadInt3
                   GHC.Read.$fReadInt_$sconvertInt
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ World.ID
                   (Text.Read.readEither5 @ World.ID)) -}
e7016630cf6e4f1fbb2d2755ba9325c2
  parseLoc4 :: [GHC.Types.Char] -> [[GHC.Types.Char]]
  {- Unfolding: (Data.List.Split.Internals.splitOn
                   @ GHC.Types.Char
                   GHC.Classes.$fEqChar
                   World.parseLoc5) -}
1969e1d4782d5ce046ba8e2872fda7f4
  parseLoc5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ":"#) -}
cd589d1cdba640fa6ccfc3ed5a1f3984
  randomAgent :: MyRandom.Rand World.Agent
  {- Arity: 1, Strictness: <L,U(U,U,U(U))>m,
     Unfolding: InlineRule (0, True, True)
                World.randomAgent1
                  `cast`
                (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                          <Data.Functor.Identity.Identity>_R
                          <World.Agent>_N)) -}
af5768a2723bac13b5ad9de49edfee41
  randomAgent1 ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> Data.Functor.Identity.Identity
         (World.Agent, System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, Strictness: <L,U(U,U,U(U))>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case World.$wrandomAgent w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <(World.Agent,
                             System.Random.Mersenne.Pure64.Internal.PureMT)>_R)) }) -}
9661a24ab93727c726c980079faed931
  randomChromosome :: MyRandom.Rand World.Chromosome
  {- Arity: 1, Strictness: <L,U(U,U,U(U))>m,
     Unfolding: InlineRule (0, True, True)
                World.randomChromosome1
                  `cast`
                (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                          <Data.Functor.Identity.Identity>_R
                          <World.Chromosome>_N)) -}
7726401916b39329aeef7a9528338d43
  randomChromosome1 ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> Data.Functor.Identity.Identity
         ([World.Locus], System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, Strictness: <L,U(U,U,U(U))>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case World.$wrandomChromosome w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <([World.Locus],
                             System.Random.Mersenne.Pure64.Internal.PureMT)>_R)) }) -}
60d88033674e2fa4c0cead9e796b7f3f
  randomChromosome10 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# -1#) -}
5020eeabc908f0c747465167aa99c2e8
  randomChromosome11 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
5b95e8ad65514c4de9246f8c7e9f470b
  randomChromosome2 ::
    [Control.Monad.Trans.State.Lazy.StateT
       System.Random.Mersenne.Pure64.Internal.PureMT
       Data.Functor.Identity.Identity
       [World.Locus]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        System.Random.Mersenne.Pure64.Internal.PureMT
                        Data.Functor.Identity.Identity
                        [World.Locus])
                   World.randomChromosome8
                     `cast`
                   (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                             <Data.Functor.Identity.Identity>_R
                             <[World.Locus]>_N))
                   World.randomChromosome3) -}
088f81de7cf382373e1c4199006b780b
  randomChromosome3 ::
    [Control.Monad.Trans.State.Lazy.StateT
       System.Random.Mersenne.Pure64.Internal.PureMT
       Data.Functor.Identity.Identity
       [World.Locus]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        System.Random.Mersenne.Pure64.Internal.PureMT
                        Data.Functor.Identity.Identity
                        [World.Locus])
                   World.randomChromosome8
                     `cast`
                   (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                             <Data.Functor.Identity.Identity>_R
                             <[World.Locus]>_N))
                   World.randomChromosome4) -}
7134e90109cd9dc9d910e46794f546bb
  randomChromosome4 ::
    [Control.Monad.Trans.State.Lazy.StateT
       System.Random.Mersenne.Pure64.Internal.PureMT
       Data.Functor.Identity.Identity
       [World.Locus]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        System.Random.Mersenne.Pure64.Internal.PureMT
                        Data.Functor.Identity.Identity
                        [World.Locus])
                   World.randomChromosome5
                     `cast`
                   (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                             <Data.Functor.Identity.Identity>_R
                             <[World.Locus]>_N))
                   (GHC.Types.[]
                      @ (Control.Monad.Trans.State.Lazy.StateT
                           System.Random.Mersenne.Pure64.Internal.PureMT
                           Data.Functor.Identity.Identity
                           [World.Locus]))) -}
8da35d0ca08a4a4510908c2d1f5eb276
  randomChromosome5 ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> Data.Functor.Identity.Identity
         ([World.Locus], System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case World.$wrandomGene w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <([World.Locus],
                             System.Random.Mersenne.Pure64.Internal.PureMT)>_R)) }) -}
da6e82d8dd31ebf0e20e9c03d3fc3ed5
  randomChromosome6 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.eftInt 0# 19#) -}
fc0722fb412ba2ee2fbce63df3f493c4
  randomChromosome7 ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (GHC.Types.Int, System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SSL),1*U(U,U,U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case w of ww { System.Random.Mersenne.Pure64.Internal.PureMT ww1 ww2 ww3 ->
                 case GHC.Prim.indexWord64Array# ww1 ww2 of wild2 { DEFAULT ->
                 case {__pkg_ccall mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV mix_bits GHC.Prim.Word#
                                                                                                                                 -> GHC.Prim.State#
                                                                                                                                      GHC.Prim.RealWorld
                                                                                                                                 -> (# GHC.Prim.State#
                                                                                                                                         GHC.Prim.RealWorld,
                                                                                                                                       GHC.Prim.Word# #)}
                        wild2
                        GHC.Prim.realWorld# of wild { (#,#) ds3 ds4 ->
                 let {
                   x1 :: GHC.Prim.Double#
                   = GHC.Prim.*##
                       (GHC.Prim./##
                          (GHC.Prim.word2Double# (GHC.Prim.quotWord# ds4 2048##))
                          9.007199254740992e15##)
                       5.0##
                 } in
                 let {
                   n :: GHC.Prim.Int# = GHC.Prim.double2Int# x1
                 } in
                 let {
                   g' :: System.Random.Mersenne.Pure64.Internal.PureMT
                   = case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<# ww2 311#) of wild3 {
                       GHC.Types.False
                       -> case ww3 of dt { System.Random.Mersenne.Pure64.Internal.MTBlock dt1 ->
                          System.Random.Mersenne.Pure64.Internal.PureMT
                            dt1
                            0#
                            (System.Random.Mersenne.Pure64.MTBlock.nextBlock dt) }
                       GHC.Types.True
                       -> System.Random.Mersenne.Pure64.Internal.PureMT
                            ww1
                            (GHC.Prim.+# ww2 1#)
                            ww3 }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<## x1 (GHC.Prim.int2Double# n)) of wild3 {
                   GHC.Types.False
                   -> let {
                        x2 :: GHC.Prim.Int# = GHC.Prim.+# -2# n
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# x2 -2#) of wild4 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.># x2 2#) of wild5 {
                             GHC.Types.False -> (GHC.Types.I# x2, g')
                             GHC.Types.True -> (GHC.Types.I# -2#, g') }
                        GHC.Types.True -> (GHC.Types.I# -2#, g') }
                   GHC.Types.True
                   -> let {
                        x2 :: GHC.Prim.Int# = GHC.Prim.+# -2# (GHC.Prim.-# n 1#)
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# x2 -2#) of wild4 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.># x2 2#) of wild5 {
                             GHC.Types.False -> (GHC.Types.I# x2, g')
                             GHC.Types.True -> (GHC.Types.I# -2#, g') }
                        GHC.Types.True -> (GHC.Types.I# -2#, g') } } } } }) -}
5ea03e8e7287f045ed223cc908c3200b
  randomChromosome8 ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> Data.Functor.Identity.Identity
         ([World.Locus], System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case World.$wrandomTfbs w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <([World.Locus],
                             System.Random.Mersenne.Pure64.Internal.PureMT)>_R)) }) -}
3c698521101f9155d2cf1c4c2e7668f3
  randomChromosome9 ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> Data.Functor.Identity.Identity
         (GHC.Types.Int, System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U,U,U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (eta1 :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case MyRandom.$wrandomBool eta1 of ww { (#,#) ww1 ww2 ->
                 case ww1 of wild {
                   GHC.Types.False
                   -> (World.randomChromosome11, ww2)
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <(GHC.Types.Int,
                                  System.Random.Mersenne.Pure64.Internal.PureMT)>_R))
                   GHC.Types.True
                   -> (World.randomChromosome10, ww2)
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <(GHC.Types.Int,
                                  System.Random.Mersenne.Pure64.Internal.PureMT)>_R)) } }) -}
8c300393e16111fcf61b731f6b025a5b
  randomChromosome_go :: [[World.Locus]] -> [World.Locus]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
19e6b78be8cd2d4f975ca80519cadf3b
  randomChromosome_go1 ::
    [GHC.Types.Int]
    -> [GHC.Types.Int] -> [System.Random.Shuffle.Tree World.Gene]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
41a7a7905c7cb26870a9f8e034513e64
  randomChromosome_go2 ::
    [GHC.Types.Int]
    -> [GHC.Types.Int] -> [System.Random.Shuffle.Tree World.Tfbs]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
d3472919622458479d3540995a9b8d9a
  randomGene :: MyRandom.Rand [World.Locus]
  {- Arity: 1, Strictness: <L,U>m,
     Unfolding: InlineRule (0, True, True)
                World.randomChromosome5
                  `cast`
                (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                          <Data.Functor.Identity.Identity>_R
                          <[World.Locus]>_N)) -}
dc728007a0522ff93682a40df6d09dbb
  randomGenome :: MyRandom.Rand World.Genome
  {- Arity: 1, Strictness: <L,U(U,U,U(U))>m,
     Unfolding: InlineRule (0, True, True)
                World.randomGenome1
                  `cast`
                (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                          <Data.Functor.Identity.Identity>_R
                          <[World.Chromosome]>_N)) -}
2d02f2aeb9ba83bed7c4957a814c4451
  randomGenome1 ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> Data.Functor.Identity.Identity
         ([World.Chromosome], System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, Strictness: <L,U(U,U,U(U))>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case World.$wrandomGenome w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <([World.Chromosome],
                             System.Random.Mersenne.Pure64.Internal.PureMT)>_R)) }) -}
560198a8104204819b56afc69c09cd06
  randomTfbs :: MyRandom.Rand [World.Locus]
  {- Arity: 1, Strictness: <L,U>m,
     Unfolding: InlineRule (0, True, True)
                World.randomChromosome8
                  `cast`
                (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                          <Data.Functor.Identity.Identity>_R
                          <[World.Locus]>_N)) -}
264f4f783073c626a4ed4575ddf605ad
  reduceToGenes :: World.Genome -> [World.Gene]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [[World.Locus]]) ->
                 World.reduceToGenes_filterGenes
                   (GHC.List.head @ [World.Locus] x)) -}
59ef5e16d970db3446a87552f1151a2a
  reduceToGenes_filterGenes :: [World.Locus] -> [World.Gene]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
f6e39df8f13f5117fcd663ddd5b1b9d0
  reduceToTfbss :: World.Genome -> [World.Tfbs]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [[World.Locus]]) ->
                 World.reduceToTfbss_filterTfbss
                   (GHC.List.head @ [World.Locus] x)) -}
86e24c94681edbe017795a0e6d824b4b
  reduceToTfbss_filterTfbss :: [World.Locus] -> [World.Tfbs]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
7d23afef781a7eaf28be0462fe0bef3a
  sameGST :: World.Agent -> World.Agent -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: World.Agent) (ds1 :: World.Agent) ->
                 case ds of wild {
                   World.Agent ipv ipv1
                   -> case ds1 of wild1 {
                        World.Agent ipv2 ipv3
                        -> Data.Map.Base.$fEqMap_$c==
                             @ GHC.Types.Int
                             @ GHC.Types.Int
                             GHC.Classes.$fEqInt
                             GHC.Classes.$fEqInt
                             ipv1
                             ipv3
                        World.NoAgent -> GHC.Types.False }
                   World.NoAgent -> GHC.Types.True }) -}
6536a9c2f867d01de8e13714cc599e31
  showGST :: World.GeneStateTable -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Data.Map.Base.Map World.ID World.GeneState) ->
                 case World.showGST_go10 (GHC.Types.[] @ GHC.Types.Char) x of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : x1 xs
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        x1
                        (Data.OldList.prependToAll
                           @ GHC.Types.Char
                           World.showGST1
                           xs) }) -}
93fbfdbd22637d91bf0efe5f7fc80347
  showGST1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ' '#) -}
63d56f5205d0bcc1a6f147f076d1cbd8
  showGST_go10 ::
    [GHC.Types.Char]
    -> Data.Map.Base.Map GHC.Types.Int GHC.Types.Int
    -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U> -}
2993822c2f994835cd6061bb60ed442e
  takeWhileInclusive ::
    (a -> GHC.Types.Bool) -> ([a], [a]) -> ([a], [a])
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S(LS),1*U(U,1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: a -> GHC.Types.Bool) (w1 :: ([a], [a])) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 case World.$wtakeWhileInclusive
                        @ a
                        w
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 (ww4, ww5) } }) -}
5473bff9c807676046cddb87fce9a5ca
  targetExpression :: World.Env -> World.ID -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><S(S),1*U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Env) (w1 :: World.ID) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww1 8#) of wild {
                   GHC.Types.False
                   -> case w of wild1 { GHC.Types.I# y ->
                      case GHC.Classes.modInt#
                             (GHC.Prim.-# (GHC.Prim.-# ww1 8#) y)
                             2# of ww2 {
                        DEFAULT -> GHC.Types.I# 0# 0# -> GHC.Types.I# 1# } }
                   GHC.Types.True -> GHC.Types.I# 1# } }) -}
5315cb9da39229e0f1834d39b1ef8ffd
  targetGST :: World.Env -> World.GeneStateTable
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: World.Env) ->
                 case w of ww { GHC.Types.I# ww1 -> World.$wtargetGST ww1 }) -}
fc17f91cf13d7b834059efec0f3f862a
  thres :: World.Gene -> World.Thres
  RecSel Left World.Gene
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: World.Gene) ->
                 case ds of wild { World.Gene ds1 ds2 ds3 -> ds2 }) -}
ea51d203180c4c8f5135b7e22acc765d
  updateAgent :: World.Agent -> World.Agent
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: World.Agent) ->
                 case ds of wild {
                   World.Agent chroms gst
                   -> let {
                        newGenome :: World.Genome
                        = GHC.Base.map
                            @ [World.Locus]
                            @ [World.Locus]
                            (World.updateChrom World.$fShowAgent2 gst)
                            chroms
                      } in
                      case World.makeGst
                             (Data.Map.Base.Tip @ World.ID @ World.GeneState)
                             (World.reduceToGenes newGenome) of wild1 {
                        Data.Map.Base.Bin dt ds1 ds2 ds3 ds4
                        -> case dt of wild2 {
                             DEFAULT -> World.NoAgent 20# -> World.Agent newGenome wild1 }
                        Data.Map.Base.Tip -> World.NoAgent }
                   World.NoAgent -> World.NoAgent }) -}
85c5e07ae25c24b69e9c2856a7b6057e
  updateChrom ::
    GHC.Types.Int
    -> World.GeneStateTable -> World.Chromosome -> World.Chromosome
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(U)><L,U><S,1*U> -}
098424baaaa25426b5f6e1cdbacc17e6
  updateGenome ::
    World.GeneStateTable -> World.Genome -> World.Genome
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: World.GeneStateTable) (eta :: [World.Chromosome]) ->
                 GHC.Base.build
                   @ [World.Locus]
                   (\ @ b1
                      (c :: [World.Locus] -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ [World.Locus]
                      @ b1
                      (GHC.Base.mapFB
                         @ [World.Locus]
                         @ b1
                         @ [World.Locus]
                         c
                         (World.updateChrom World.$fShowAgent2 x))
                      n
                      eta)) -}
14f449371a45fd681e5c5f14fabec9c4
  updateLoc ::
    GHC.Types.Int
    -> World.GeneStateTable
    -> World.Locus
    -> (GHC.Types.Int, World.Locus)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(U)><L,1*U><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: World.GeneStateTable)
                   (w2 :: World.Locus) ->
                 case w2 of wild {
                   World.Transposon -> (w, World.Transposon)
                   World.CGene gen
                   -> case gen of wild1 { World.Gene i t st ->
                      (World.$fShowAgent2,
                       World.CGene
                         (World.Gene
                            i
                            t
                            (case w of wild2 { GHC.Types.I# x ->
                             case t of wild3 { GHC.Types.I# y ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.<# x y) of wild4 {
                               GHC.Types.False
                               -> case GHC.Prim.tagToEnum#
                                         @ GHC.Types.Bool
                                         (GHC.Prim.==# x y) of wild5 {
                                    GHC.Types.False -> World.randomChromosome11
                                    GHC.Types.True -> st }
                               GHC.Types.True -> World.$fShowAgent2 } } }))) }
                   World.CTfbs ds
                   -> case ds of wild1 { World.Tfbs i w3 ->
                      case i of ww { GHC.Types.I# ww1 ->
                      case World.$wpoly_go1 @ GHC.Types.Int ww1 w1 of wild2 {
                        GHC.Base.Nothing -> (World.$fShowAgent2, wild)
                        GHC.Base.Just a1
                        -> case a1 of wild3 { GHC.Types.I# x ->
                           case x of wild4 {
                             DEFAULT -> (World.$fShowAgent2, wild)
                             1# -> (GHC.Num.$fNumInt_$c+ w w3, wild) } } } } } }) -}
instance GHC.Classes.Eq [World.Agent] = World.$fEqAgent
instance GHC.Classes.Eq [World.Gene] = World.$fEqGene
instance GHC.Classes.Eq [World.Locus] = World.$fEqLocus
instance GHC.Classes.Eq [World.Tfbs] = World.$fEqTfbs
instance GHC.Classes.Ord [World.Agent] = World.$fOrdAgent
instance GHC.Classes.Ord [World.Gene] = World.$fOrdGene
instance GHC.Classes.Ord [World.Locus] = World.$fOrdLocus
instance GHC.Classes.Ord [World.Tfbs] = World.$fOrdTfbs
instance GHC.Read.Read [World.Agent] = World.$fReadAgent
instance GHC.Read.Read [World.Gene] = World.$fReadGene
instance GHC.Read.Read [World.Locus] = World.$fReadLocus
instance GHC.Read.Read [World.Tfbs] = World.$fReadTfbs
instance GHC.Show.Show [World.Agent] = World.$fShowAgent
instance GHC.Show.Show [World.Gene] = World.$fShowGene
instance GHC.Show.Show [World.Locus] = World.$fShowLocus
instance GHC.Show.Show [World.Tfbs] = World.$fShowTfbs
"SPEC hammDist" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                           (GHC.Types.Int, GHC.Types.Int))
  World.hammDist @ (GHC.Types.Int, GHC.Types.Int) $dEq
  = World.hammDist_$shammDist
"SPEC/World $fEq[] @ Locus" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                       World.Locus)
  GHC.Classes.$fEq[] @ World.Locus $dEq = World.$fEqAgent_$s$fEq[]
"SPEC/World $fEq[]_$c/= @ Locus" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                            World.Locus)
  GHC.Classes.$fEq[]_$c/= @ World.Locus $dEq
  = World.$fEqAgent_$s$fEq[]_$c/=
"SPEC/World $fOrd[] @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                         World.Locus)
  GHC.Classes.$fOrd[] @ World.Locus $dOrd
  = World.$fOrdAgent_$s$fOrd[]
"SPEC/World $fOrd[]_$c< @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                             World.Locus)
  GHC.Classes.$fOrd[]_$c< @ World.Locus $dOrd
  = World.$fOrdAgent_$s$fOrd[]_$c<
"SPEC/World $fOrd[]_$c<= @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                              World.Locus)
  GHC.Classes.$fOrd[]_$c<= @ World.Locus $dOrd
  = World.$fOrdAgent_$s$fOrd[]_$c<=
"SPEC/World $fOrd[]_$c> @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                             World.Locus)
  GHC.Classes.$fOrd[]_$c> @ World.Locus $dOrd
  = World.$fOrdAgent_$s$fOrd[]_$c>
"SPEC/World $fOrd[]_$c>= @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                              World.Locus)
  GHC.Classes.$fOrd[]_$c>= @ World.Locus $dOrd
  = World.$fOrdAgent_$s$fOrd[]_$c>=
"SPEC/World $fOrd[]_$cmax @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                               World.Locus)
  GHC.Classes.$fOrd[]_$cmax @ World.Locus $dOrd
  = World.$fOrdAgent_$s$fOrd[]_$cmax
"SPEC/World $fOrd[]_$cmin @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                               World.Locus)
  GHC.Classes.$fOrd[]_$cmin @ World.Locus $dOrd
  = World.$fOrdAgent_$s$fOrd[]_$cmin
"SPEC/World $fOrd[]_$cp1Ord @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                 World.Locus)
  GHC.Classes.$fOrd[]_$cp1Ord @ World.Locus $dOrd
  = World.$fOrdAgent_$s$fOrd[]_$cp1Ord
"SPEC/World fromList @ ID _" [ALWAYS] forall @ a
                                             ($dOrd :: GHC.Classes.Ord World.ID)
  Data.Map.Base.fromList @ GHC.Types.Int @ a $dOrd
  = World.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

