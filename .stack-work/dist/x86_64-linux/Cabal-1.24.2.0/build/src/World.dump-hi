
==================== FINAL INTERFACE ====================
2017-04-24 13:31:43.854093 UTC

interface Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:World 8002
  interface hash: 425a25464502513a2f09dfef20926341
  ABI hash: 0d26c8647f8e525318dd9fb9138de0b7
  export-list hash: e77751d24e4beac4ad5913cc5adf0fb0
  orphan hash: 25089fa5f80132bc9019fd034df3f13b
  flag hash: 60ede7202df718eda107a0d677bc46fc
  sig of: Nothing
  used TH splices: False
  where
exports:
  World.agent0
  World.connected
  World.defaultGst
  World.devAg
  World.fitnessAgent
  World.fitnessGST
  World.gSTFromGenome
  World.goodRandomGenome
  World.groupGeneTfbs
  World.hammDist
  World.hammDistAg
  World.isGene
  World.locusEffect
  World.makeGst
  World.parseLoc
  World.randomAgent
  World.randomChromosome
  World.randomGene
  World.randomGenome
  World.randomTfbs
  World.reduceToGenes
  World.reduceToTfbss
  World.sameGST
  World.showGST
  World.takeWhileInclusive
  World.targetExpression
  World.targetGST
  World.updateAgent
  World.updateChrom
  World.updateGenome
  World.updateLoc
  World.Agent{World.Agent World.NoAgent geneStateTable genome}
  World.Agents
  World.Chromosome
  World.Env
  World.Gene{World.Gene genSt iD thres}
  World.GeneState
  World.GeneStateTable
  World.Genome
  World.ID
  World.Locus{World.CGene World.CTfbs World.Transposon}
  World.Tfbs{World.Tfbs}
  World.Thres
  World.Weight
  World.World{World.World agents env}
module dependencies: Misc MyRandom Parameters
package dependencies: MonadRandom-0.5.1@MonadRandom-0.5.1-IY6HiWu00vQLARukQW3KMH
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      random-shuffle-0.0.4@random-shuffle-0.0.4-97h14tPp7Ru21125sv6IMi
                      split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:MyRandom
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: MonadRandom-0.5.1@MonadRandom-0.5.1-IY6HiWu00vQLARukQW3KMH:Control.Monad.Trans.Random.Lazy
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity base-4.9.1.0:Data.List.NonEmpty
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Semigroup
                         base-4.9.1.0:Data.Type.Equality base-4.9.1.0:Data.Version
                         base-4.9.1.0:Data.Void base-4.9.1.0:GHC.Exts
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
import  -/  Misc e369c0044f3a6828d65da26cc67c036a
  exports: a3036bb0056918ea31bb3edb3bd0f2f1
  valueResultPairs 5e7d641eb5231974b5d0f26e9c1b319c
import  -/  MyRandom 6550107e9ca18f776f56264c334ccfaa
  exports: 9b2c6f35135fc9455c1a3dd162ebc359
  Rand 8ad6bc0a02980079a34b3d183be0e1cc
  getModifyRand 14c6a791540268febd70ac875872e46a
  getRange ed956ee86810b2d1cf682ced1c25f87c
  randomBool c9155dfdf5860317f38b9d90f38c4150
import  -/  Parameters ce21db94862d19f69aed735a8395793f
  exports: 5f973e3a01f953e950df5c127a831d15
  devTime 3138758efe15eb148b79f0a965e6e100
  maxThres 9afe6a92e63b333e74e871dd72c8c317
  minThres cf6f0fc7343b7d217e1f8024a505f326
  nrEnv 8345559e80d2531135319c3308fbfd0b
  nrGeneTypes 0c6a0c7d55e8e1350e9e495861070a78
  nrHouseHold 2fb11f80eab096177671126324812e2f
  nrOverlap 020d2d35097afaa2afd284a2b1a08f4d
  nrSpecific 3491fe8778e3293ee78ca63c14657239
  selectionPressure c4d9629fd29388c791e69055784ce3a6
import  -/  array-0.5.1.1@array-0.5.1.1:Data.Array.IArray 606f8bb830eb2a88c29c91f27c77f304
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Arr dbae05e7a9c0aba55cc706ecf0406507
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Read b6821365d2d5fa2155c9e910160e7f57
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Text.ParserCombinators.ReadPrec 5a182a8d6deb0f7d67aed5fab08a5cc0
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  base-4.9.1.0:Text.Read.Lex 16199fac3c6c2d64cc7c268f3c0d2269
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 20d4ffbee41965d03d6a989425473dc4
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base d432f6875983131473086af8cb290590
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  mersenne-random-pure64-0.2.2.0@mersenne-random-pure64-0.2.2.0-560i5rQoI3i9IX3BgSFLBV:System.Random.Mersenne.Pure64.Internal bb3ed118165b97070d684375c016de56
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State 749dca8ca0e6625b32091d445bd92b01
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State.Class 6d31234b0a911b56412061943d18b89e
import  -/  random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog:System.Random b21db0c0ea43dc1ad218556cd0b064c7
import  -/  random-shuffle-0.0.4@random-shuffle-0.0.4-97h14tPp7Ru21125sv6IMi:System.Random.Shuffle cceab7056a27578a61621d120d955aea
import  -/  split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split c60198a427bfd51d9fb4562c059ec1d2
import  -/  split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals 25dced234ed01c9c803d678763a4d772
4b2cc13ce18d28c6c31329fb43199d06
  $fEqAgent :: GHC.Classes.Eq World.Agent
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Agent World.$fEqAgent_$c== World.$fEqAgent_$c/= -}
4b60ae7c99fccc240dc855d9bd686243
  $fEqAgent1 ::
    Data.Map.Base.Map GHC.Types.Int GHC.Types.Int
    -> Data.Map.Base.Map GHC.Types.Int GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: (Data.Map.Base.$fEqMap_$c==
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   GHC.Classes.$fEqInt
                   GHC.Classes.$fEqInt) -}
4b2cc13ce18d28c6c31329fb43199d06
  $fEqAgent_$c/= :: World.Agent -> World.Agent -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: World.Agent) (b :: World.Agent) ->
                 case World.$fEqAgent_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
4b2cc13ce18d28c6c31329fb43199d06
  $fEqAgent_$c== :: World.Agent -> World.Agent -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: World.Agent) (ds1 :: World.Agent) ->
                 case ds of wild {
                   World.Agent a1 a2
                   -> case ds1 of wild1 {
                        World.Agent b1 b2
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ [World.Locus]
                                  World.$fEqAgent_$s$fEq[]
                                  a1
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> World.$fEqAgent1 a2 b2 }
                        World.NoAgent -> GHC.Types.False }
                   World.NoAgent
                   -> case ds1 of wild1 {
                        World.Agent ipv ipv1 -> GHC.Types.False
                        World.NoAgent -> GHC.Types.True } }) -}
676e2c806fae4d6241e3f9e58b772352
  $fEqAgent_$dEq :: GHC.Classes.Eq World.Locus
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) World.$fEqLocus -}
4b848fffe72f19c095161b37f8efccfa
  $fEqAgent_$s$fEq[] :: GHC.Classes.Eq [World.Locus]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [World.Locus]
                  (GHC.Classes.$fEq[]_$c== @ World.Locus World.$fEqAgent_$dEq)
                  World.$fEqAgent_$s$fEq[]_$c/= -}
747813a4a6cbef2499efb9d5ac7d3c08
  $fEqAgent_$s$fEq[]_$c/= ::
    [World.Locus] -> [World.Locus] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: [World.Locus]) (y :: [World.Locus]) ->
                 GHC.Classes.not
                   (GHC.Classes.$fEq[]_$c==
                      @ World.Locus
                      World.$fEqAgent_$dEq
                      x
                      y)) -}
0168b3fa2cd8fa618654da75e14e3f9c
  $fEqGene :: GHC.Classes.Eq World.Gene
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Gene World.$fEqLocus_$c==2 World.$fEqGene_$c/= -}
0168b3fa2cd8fa618654da75e14e3f9c
  $fEqGene_$c/= :: World.Gene -> World.Gene -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))><S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: World.Gene) (b :: World.Gene) ->
                 case World.$fEqLocus_$c==2 a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
5b6d6c8746721a23c14daf03251ad94b
  $fEqLocus :: GHC.Classes.Eq World.Locus
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Locus World.$fEqLocus_$c== World.$fEqLocus_$c/= -}
5b6d6c8746721a23c14daf03251ad94b
  $fEqLocus_$c/= :: World.Locus -> World.Locus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: World.Locus) (b :: World.Locus) ->
                 case a of wild {
                   World.Transposon
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True World.Transposon -> GHC.Types.False }
                   World.CGene a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        World.CGene b1
                        -> case a1 of ww { World.Gene ww1 ww2 ww3 ->
                           case ww1 of ww4 { GHC.Types.I# ww5 ->
                           case b1 of ww6 { World.Gene ww7 ww8 ww9 ->
                           case ww7 of ww10 { GHC.Types.I# ww11 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# ww5 ww11) of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case ww2 of wild3 { GHC.Types.I# x ->
                                case ww8 of wild4 { GHC.Types.I# y ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x y) of wild5 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True
                                  -> case ww3 of wild6 { GHC.Types.I# x1 ->
                                     case ww9 of wild7 { GHC.Types.I# y1 ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.==# x1 y1) of wild8 {
                                       GHC.Types.False -> GHC.Types.True
                                       GHC.Types.True -> GHC.Types.False } } } } } } } } } } } }
                   World.CTfbs a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        World.CTfbs b1
                        -> case a1 of wild2 { World.Tfbs a2 a3 ->
                           case b1 of wild3 { World.Tfbs b2 b3 ->
                           case a2 of wild4 { GHC.Types.I# x ->
                           case b2 of wild5 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x y) of wild6 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case a3 of wild7 { GHC.Types.I# x1 ->
                                case b3 of wild8 { GHC.Types.I# y1 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x1 y1) of wild9 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } } } } } } } }) -}
5b6d6c8746721a23c14daf03251ad94b
  $fEqLocus_$c== :: World.Locus -> World.Locus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: World.Locus) (ds1 :: World.Locus) ->
                 case ds of wild {
                   World.Transposon
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False World.Transposon -> GHC.Types.True }
                   World.CGene a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        World.CGene b1 -> World.$fEqLocus_$c==2 a1 b1 }
                   World.CTfbs a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        World.CTfbs b1 -> World.$fEqLocus_$c==1 a1 b1 } }) -}
1dae11a86c9d4aaf67e2f48cd643cf30
  $fEqLocus_$c==1 :: World.Tfbs -> World.Tfbs -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Tfbs) (w1 :: World.Tfbs) ->
                 case w of ww { World.Tfbs ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { World.Tfbs ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 World.$w$c== ww4 ww2 ww9 ww7 } } } }) -}
0168b3fa2cd8fa618654da75e14e3f9c
  $fEqLocus_$c==2 :: World.Gene -> World.Gene -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))><S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Gene) (w1 :: World.Gene) ->
                 case w of ww { World.Gene ww1 ww2 ww3 ->
                 case ww1 of ww4 { GHC.Types.I# ww5 ->
                 case w1 of ww6 { World.Gene ww7 ww8 ww9 ->
                 case ww7 of ww10 { GHC.Types.I# ww11 ->
                 World.$w$c==1 ww5 ww2 ww3 ww11 ww8 ww9 } } } }) -}
1dae11a86c9d4aaf67e2f48cd643cf30
  $fEqTfbs :: GHC.Classes.Eq World.Tfbs
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Tfbs World.$fEqLocus_$c==1 World.$fEqTfbs_$c/= -}
1dae11a86c9d4aaf67e2f48cd643cf30
  $fEqTfbs_$c/= :: World.Tfbs -> World.Tfbs -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Tfbs) (w1 :: World.Tfbs) ->
                 case w of ww { World.Tfbs ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { World.Tfbs ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 World.$w$c/= ww4 ww2 ww9 ww7 } } } }) -}
4b2cc13ce18d28c6c31329fb43199d06
  $fOrdAgent :: GHC.Classes.Ord World.Agent
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Agent
                  World.$fEqAgent
                  World.$fOrdAgent_$ccompare
                  World.$fOrdAgent_$c<
                  World.$fOrdAgent_$c<=
                  World.$fOrdAgent_$c>
                  World.$fOrdAgent_$c>=
                  World.$fOrdAgent_$cmax
                  World.$fOrdAgent_$cmin -}
91bf5792e588f949d33fba14f2f7a13d
  $fOrdAgent1 :: GHC.Classes.Ord (GHC.Types.Int, GHC.Types.Int)
  {- Unfolding: (GHC.Classes.$fOrd(,)
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   GHC.Classes.$fOrdInt
                   GHC.Classes.$fOrdInt) -}
4b2cc13ce18d28c6c31329fb43199d06
  $fOrdAgent_$c< :: World.Agent -> World.Agent -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: World.Agent) (b :: World.Agent) ->
                 case a of wild {
                   World.Agent a1 a2
                   -> case b of wild1 {
                        World.Agent b1 b2
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ [World.Locus]
                                  World.$fOrdAgent_$s$fOrd[]
                                  a1
                                  b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.True
                             GHC.Types.EQ
                             -> Data.Map.Base.$fOrdMap_$c<
                                  @ GHC.Types.Int
                                  @ GHC.Types.Int
                                  GHC.Classes.$fOrdInt
                                  GHC.Classes.$fOrdInt
                                  a2
                                  b2
                             GHC.Types.GT -> GHC.Types.False }
                        World.NoAgent -> GHC.Types.True }
                   World.NoAgent
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
4b2cc13ce18d28c6c31329fb43199d06
  $fOrdAgent_$c<= :: World.Agent -> World.Agent -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: World.Agent) (b :: World.Agent) ->
                 case a of wild {
                   World.Agent a1 a2
                   -> case b of wild1 {
                        World.Agent b1 b2
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ [World.Locus]
                                  World.$fOrdAgent_$s$fOrd[]
                                  a1
                                  b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.True
                             GHC.Types.EQ
                             -> Data.Map.Base.$fOrdMap_$c<=
                                  @ GHC.Types.Int
                                  @ GHC.Types.Int
                                  GHC.Classes.$fOrdInt
                                  GHC.Classes.$fOrdInt
                                  a2
                                  b2
                             GHC.Types.GT -> GHC.Types.False }
                        World.NoAgent -> GHC.Types.True }
                   World.NoAgent
                   -> case b of wild1 {
                        World.Agent ipv ipv1 -> GHC.Types.False
                        World.NoAgent -> GHC.Types.True } }) -}
4b2cc13ce18d28c6c31329fb43199d06
  $fOrdAgent_$c> :: World.Agent -> World.Agent -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: World.Agent) (b :: World.Agent) ->
                 case a of wild {
                   World.Agent a1 a2
                   -> case b of wild1 {
                        World.Agent b1 b2
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ [World.Locus]
                                  World.$fOrdAgent_$s$fOrd[]
                                  a1
                                  b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.False
                             GHC.Types.EQ
                             -> Data.Map.Base.$fOrdMap_$c>
                                  @ GHC.Types.Int
                                  @ GHC.Types.Int
                                  GHC.Classes.$fOrdInt
                                  GHC.Classes.$fOrdInt
                                  a2
                                  b2
                             GHC.Types.GT -> GHC.Types.True }
                        World.NoAgent -> GHC.Types.False }
                   World.NoAgent
                   -> case b of wild1 {
                        World.Agent ipv ipv1 -> GHC.Types.True
                        World.NoAgent -> GHC.Types.False } }) -}
4b2cc13ce18d28c6c31329fb43199d06
  $fOrdAgent_$c>= :: World.Agent -> World.Agent -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: World.Agent) (b :: World.Agent) ->
                 case a of wild {
                   World.Agent a1 a2
                   -> case b of wild1 {
                        World.Agent b1 b2
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ [World.Locus]
                                  World.$fOrdAgent_$s$fOrd[]
                                  a1
                                  b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.False
                             GHC.Types.EQ
                             -> Data.Map.Base.$fOrdMap_$c>=
                                  @ GHC.Types.Int
                                  @ GHC.Types.Int
                                  GHC.Classes.$fOrdInt
                                  GHC.Classes.$fOrdInt
                                  a2
                                  b2
                             GHC.Types.GT -> GHC.Types.True }
                        World.NoAgent -> GHC.Types.False }
                   World.NoAgent
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
4b2cc13ce18d28c6c31329fb43199d06
  $fOrdAgent_$ccompare ::
    World.Agent -> World.Agent -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: World.Agent) (b :: World.Agent) ->
                 case a of wild {
                   World.Agent a1 a2
                   -> case b of wild1 {
                        World.Agent b1 b2
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ [World.Locus]
                                  World.$fOrdAgent_$s$fOrd[]
                                  a1
                                  b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.LT
                             GHC.Types.EQ
                             -> GHC.Classes.$fOrd[]_$ccompare
                                  @ (GHC.Types.Int, GHC.Types.Int)
                                  World.$fOrdAgent1
                                  (Data.Map.Base.toAscList1
                                     @ GHC.Types.Int
                                     @ GHC.Types.Int
                                     (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int))
                                     a2)
                                  (Data.Map.Base.toAscList1
                                     @ GHC.Types.Int
                                     @ GHC.Types.Int
                                     (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int))
                                     b2)
                             GHC.Types.GT -> GHC.Types.GT }
                        World.NoAgent -> GHC.Types.LT }
                   World.NoAgent
                   -> case b of wild1 {
                        World.Agent ipv ipv1 -> GHC.Types.GT
                        World.NoAgent -> GHC.Types.EQ } }) -}
4b2cc13ce18d28c6c31329fb43199d06
  $fOrdAgent_$cmax :: World.Agent -> World.Agent -> World.Agent
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: World.Agent) (y :: World.Agent) ->
                 case World.$fOrdAgent_$c<= x y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
4b2cc13ce18d28c6c31329fb43199d06
  $fOrdAgent_$cmin :: World.Agent -> World.Agent -> World.Agent
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: World.Agent) (y :: World.Agent) ->
                 case World.$fOrdAgent_$c<= x y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
3d86cdbdadb6f64f82d81a350378282a
  $fOrdAgent_$s$fOrd[] :: GHC.Classes.Ord [World.Locus]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [World.Locus]
                  World.$fOrdAgent_$s$fOrd[]_$cp1Ord
                  (GHC.Classes.$fOrd[]_$ccompare @ World.Locus World.$fOrdLocus)
                  World.$fOrdAgent_$s$fOrd[]_$c<
                  World.$fOrdAgent_$s$fOrd[]_$c<=
                  World.$fOrdAgent_$s$fOrd[]_$c>
                  World.$fOrdAgent_$s$fOrd[]_$c>=
                  World.$fOrdAgent_$s$fOrd[]_$cmax
                  World.$fOrdAgent_$s$fOrd[]_$cmin -}
b0ffcccde6fd9374cbfae09fc0591bec
  $fOrdAgent_$s$fOrd[]_$c< ::
    [World.Locus] -> [World.Locus] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [World.Locus]) (y :: [World.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ World.Locus
                        World.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
cdcb11a6fb224268ed684cacd0a0695e
  $fOrdAgent_$s$fOrd[]_$c<= ::
    [World.Locus] -> [World.Locus] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [World.Locus]) (y :: [World.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ World.Locus
                        World.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
d93ac330dfd1fbfdf93352274d95cf54
  $fOrdAgent_$s$fOrd[]_$c> ::
    [World.Locus] -> [World.Locus] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [World.Locus]) (y :: [World.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ World.Locus
                        World.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
bb34c8c38f8b7b82f243d68c7df1e371
  $fOrdAgent_$s$fOrd[]_$c>= ::
    [World.Locus] -> [World.Locus] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [World.Locus]) (y :: [World.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ World.Locus
                        World.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
fb607fe22f803613d8be9105873a5633
  $fOrdAgent_$s$fOrd[]_$cmax ::
    [World.Locus] -> [World.Locus] -> [World.Locus]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [World.Locus]) (y :: [World.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ World.Locus
                        World.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
207a91f300c1112be908767526454b02
  $fOrdAgent_$s$fOrd[]_$cmin ::
    [World.Locus] -> [World.Locus] -> [World.Locus]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [World.Locus]) (y :: [World.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ World.Locus
                        World.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
ffdba5bc12fc324dd608e676e084ed98
  $fOrdAgent_$s$fOrd[]_$cp1Ord :: GHC.Classes.Eq [World.Locus]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) World.$fEqAgent_$s$fEq[] -}
0168b3fa2cd8fa618654da75e14e3f9c
  $fOrdGene :: GHC.Classes.Ord World.Gene
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Gene
                  World.$fEqGene
                  World.$fOrdLocus_$ccompare
                  World.$fOrdLocus_$c<2
                  World.$fOrdLocus_$c<=2
                  World.$fOrdLocus_$c>2
                  World.$fOrdLocus_$c>=2
                  World.$fOrdGene_$cmax
                  World.$fOrdGene_$cmin -}
0168b3fa2cd8fa618654da75e14e3f9c
  $fOrdGene_$cmax :: World.Gene -> World.Gene -> World.Gene
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),U(U(U),U(U),U(U))><S(S(S)LL),U(U(U),U(U),U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: World.Gene) (y :: World.Gene) ->
                 case World.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
0168b3fa2cd8fa618654da75e14e3f9c
  $fOrdGene_$cmin :: World.Gene -> World.Gene -> World.Gene
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),U(U(U),U(U),U(U))><S(S(S)LL),U(U(U),U(U),U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: World.Gene) (y :: World.Gene) ->
                 case World.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
5b6d6c8746721a23c14daf03251ad94b
  $fOrdLocus :: GHC.Classes.Ord World.Locus
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Locus
                  World.$fEqLocus
                  World.$fOrdLocus_$ccompare1
                  World.$fOrdLocus_$c<
                  World.$fOrdLocus_$c<=
                  World.$fOrdLocus_$c>
                  World.$fOrdLocus_$c>=
                  World.$fOrdLocus_$cmax
                  World.$fOrdLocus_$cmin -}
5b6d6c8746721a23c14daf03251ad94b
  $fOrdLocus_$c< :: World.Locus -> World.Locus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: World.Locus) (b :: World.Locus) ->
                 case a of wild {
                   World.Transposon
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True World.Transposon -> GHC.Types.False }
                   World.CGene a1
                   -> case b of wild1 {
                        World.Transposon -> GHC.Types.False
                        World.CGene b1 -> World.$fOrdLocus_$c<2 a1 b1
                        World.CTfbs ipv -> GHC.Types.True }
                   World.CTfbs a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        World.CTfbs b1 -> World.$fOrdLocus_$c<1 a1 b1 } }) -}
1dae11a86c9d4aaf67e2f48cd643cf30
  $fOrdLocus_$c<1 :: World.Tfbs -> World.Tfbs -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Tfbs) (w1 :: World.Tfbs) ->
                 case w of ww { World.Tfbs ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { World.Tfbs ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 World.$w$c< ww4 ww2 ww9 ww7 } } } }) -}
0168b3fa2cd8fa618654da75e14e3f9c
  $fOrdLocus_$c<2 :: World.Gene -> World.Gene -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))><S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: World.Gene) (y :: World.Gene) ->
                 case World.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
5b6d6c8746721a23c14daf03251ad94b
  $fOrdLocus_$c<= :: World.Locus -> World.Locus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: World.Locus) (b :: World.Locus) ->
                 case a of wild {
                   World.Transposon -> case b of wild1 { DEFAULT -> GHC.Types.True }
                   World.CGene a1
                   -> case b of wild1 {
                        World.Transposon -> GHC.Types.False
                        World.CGene b1 -> World.$fOrdLocus_$c<=2 a1 b1
                        World.CTfbs ipv -> GHC.Types.True }
                   World.CTfbs a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        World.CTfbs b1 -> World.$fOrdLocus_$c<=1 a1 b1 } }) -}
1dae11a86c9d4aaf67e2f48cd643cf30
  $fOrdLocus_$c<=1 :: World.Tfbs -> World.Tfbs -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Tfbs) (w1 :: World.Tfbs) ->
                 case w of ww { World.Tfbs ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { World.Tfbs ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 World.$w$c<= ww4 ww2 ww9 ww7 } } } }) -}
0168b3fa2cd8fa618654da75e14e3f9c
  $fOrdLocus_$c<=2 :: World.Gene -> World.Gene -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))><S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: World.Gene) (y :: World.Gene) ->
                 case World.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
5b6d6c8746721a23c14daf03251ad94b
  $fOrdLocus_$c> :: World.Locus -> World.Locus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: World.Locus) (b :: World.Locus) ->
                 case a of wild {
                   World.Transposon -> case b of wild1 { DEFAULT -> GHC.Types.False }
                   World.CGene a1
                   -> case b of wild1 {
                        World.Transposon -> GHC.Types.True
                        World.CGene b1 -> World.$fOrdLocus_$c>2 a1 b1
                        World.CTfbs ipv -> GHC.Types.False }
                   World.CTfbs a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        World.CTfbs b1 -> World.$fOrdLocus_$c>1 a1 b1 } }) -}
1dae11a86c9d4aaf67e2f48cd643cf30
  $fOrdLocus_$c>1 :: World.Tfbs -> World.Tfbs -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Tfbs) (w1 :: World.Tfbs) ->
                 case w of ww { World.Tfbs ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { World.Tfbs ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 World.$w$c> ww4 ww2 ww9 ww7 } } } }) -}
0168b3fa2cd8fa618654da75e14e3f9c
  $fOrdLocus_$c>2 :: World.Gene -> World.Gene -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))><S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: World.Gene) (y :: World.Gene) ->
                 case World.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
5b6d6c8746721a23c14daf03251ad94b
  $fOrdLocus_$c>= :: World.Locus -> World.Locus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: World.Locus) (b :: World.Locus) ->
                 case a of wild {
                   World.Transposon
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False World.Transposon -> GHC.Types.True }
                   World.CGene a1
                   -> case b of wild1 {
                        World.Transposon -> GHC.Types.True
                        World.CGene b1 -> World.$fOrdLocus_$c>=2 a1 b1
                        World.CTfbs ipv -> GHC.Types.False }
                   World.CTfbs a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        World.CTfbs b1 -> World.$fOrdLocus_$c>=1 a1 b1 } }) -}
1dae11a86c9d4aaf67e2f48cd643cf30
  $fOrdLocus_$c>=1 :: World.Tfbs -> World.Tfbs -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Tfbs) (w1 :: World.Tfbs) ->
                 case w of ww { World.Tfbs ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { World.Tfbs ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 World.$w$c>= ww4 ww2 ww9 ww7 } } } }) -}
0168b3fa2cd8fa618654da75e14e3f9c
  $fOrdLocus_$c>=2 :: World.Gene -> World.Gene -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))><S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: World.Gene) (y :: World.Gene) ->
                 case World.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
0168b3fa2cd8fa618654da75e14e3f9c
  $fOrdLocus_$ccompare ::
    World.Gene -> World.Gene -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))><S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Gene) (w1 :: World.Gene) ->
                 case w of ww { World.Gene ww1 ww2 ww3 ->
                 case ww1 of ww4 { GHC.Types.I# ww5 ->
                 case w1 of ww6 { World.Gene ww7 ww8 ww9 ->
                 case ww7 of ww10 { GHC.Types.I# ww11 ->
                 World.$w$ccompare ww5 ww2 ww3 ww11 ww8 ww9 } } } }) -}
5b6d6c8746721a23c14daf03251ad94b
  $fOrdLocus_$ccompare1 ::
    World.Locus -> World.Locus -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: World.Locus) (b :: World.Locus) ->
                 case a of wild {
                   World.Transposon
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT World.Transposon -> GHC.Types.EQ }
                   World.CGene a1
                   -> case b of wild1 {
                        World.Transposon -> GHC.Types.GT
                        World.CGene b1 -> World.$fOrdLocus_$ccompare a1 b1
                        World.CTfbs ipv -> GHC.Types.LT }
                   World.CTfbs a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        World.CTfbs b1 -> World.$fOrdLocus_$ccompare2 a1 b1 } }) -}
1dae11a86c9d4aaf67e2f48cd643cf30
  $fOrdLocus_$ccompare2 ::
    World.Tfbs -> World.Tfbs -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Tfbs) (w1 :: World.Tfbs) ->
                 case w of ww { World.Tfbs ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { World.Tfbs ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 World.$w$ccompare1 ww4 ww2 ww9 ww7 } } } }) -}
5b6d6c8746721a23c14daf03251ad94b
  $fOrdLocus_$cmax :: World.Locus -> World.Locus -> World.Locus
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: World.Locus) (y :: World.Locus) ->
                 case x of wild {
                   World.Transposon -> y
                   World.CGene a1
                   -> case y of wild1 {
                        World.Transposon -> wild
                        World.CGene b1
                        -> case a1 of ww { World.Gene ww1 ww2 ww3 ->
                           case ww1 of ww4 { GHC.Types.I# ww5 ->
                           case b1 of ww6 { World.Gene ww7 ww8 ww9 ->
                           case ww7 of ww10 { GHC.Types.I# ww11 ->
                           case World.$w$ccompare ww5 ww2 ww3 ww11 ww8 ww9 of wild2 {
                             DEFAULT -> wild1 GHC.Types.GT -> wild } } } } }
                        World.CTfbs ipv -> wild1 }
                   World.CTfbs a1
                   -> case y of wild1 {
                        DEFAULT -> wild
                        World.CTfbs b1
                        -> case a1 of wild2 { World.Tfbs a2 a3 ->
                           case b1 of wild3 { World.Tfbs b2 b3 ->
                           case a2 of wild4 { GHC.Types.I# x# ->
                           case b2 of wild5 { GHC.Types.I# y# ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# x# y#) of wild6 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x# y#) of wild7 {
                                  GHC.Types.False -> wild
                                  GHC.Types.True
                                  -> case a3 of wild8 { GHC.Types.I# x1 ->
                                     case b3 of wild9 { GHC.Types.I# y1 ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# x1 y1) of wild10 {
                                       GHC.Types.False -> wild GHC.Types.True -> wild1 } } } }
                             GHC.Types.True -> wild1 } } } } } } }) -}
5b6d6c8746721a23c14daf03251ad94b
  $fOrdLocus_$cmin :: World.Locus -> World.Locus -> World.Locus
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: World.Locus) (y :: World.Locus) ->
                 case x of wild {
                   World.Transposon -> case y of wild1 { DEFAULT -> World.Transposon }
                   World.CGene a1
                   -> case y of wild1 {
                        World.Transposon -> World.Transposon
                        World.CGene b1
                        -> case a1 of ww { World.Gene ww1 ww2 ww3 ->
                           case ww1 of ww4 { GHC.Types.I# ww5 ->
                           case b1 of ww6 { World.Gene ww7 ww8 ww9 ->
                           case ww7 of ww10 { GHC.Types.I# ww11 ->
                           case World.$w$ccompare ww5 ww2 ww3 ww11 ww8 ww9 of wild2 {
                             DEFAULT -> wild GHC.Types.GT -> wild1 } } } } }
                        World.CTfbs ipv -> wild }
                   World.CTfbs a1
                   -> case y of wild1 {
                        DEFAULT -> wild1
                        World.CTfbs b1
                        -> case a1 of wild2 { World.Tfbs a2 a3 ->
                           case b1 of wild3 { World.Tfbs b2 b3 ->
                           case a2 of wild4 { GHC.Types.I# x# ->
                           case b2 of wild5 { GHC.Types.I# y# ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# x# y#) of wild6 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x# y#) of wild7 {
                                  GHC.Types.False -> wild1
                                  GHC.Types.True
                                  -> case a3 of wild8 { GHC.Types.I# x1 ->
                                     case b3 of wild9 { GHC.Types.I# y1 ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# x1 y1) of wild10 {
                                       GHC.Types.False -> wild1 GHC.Types.True -> wild } } } }
                             GHC.Types.True -> wild } } } } } } }) -}
1dae11a86c9d4aaf67e2f48cd643cf30
  $fOrdTfbs :: GHC.Classes.Ord World.Tfbs
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Tfbs
                  World.$fEqTfbs
                  World.$fOrdLocus_$ccompare2
                  World.$fOrdLocus_$c<1
                  World.$fOrdLocus_$c<=1
                  World.$fOrdLocus_$c>1
                  World.$fOrdLocus_$c>=1
                  World.$fOrdTfbs_$cmax
                  World.$fOrdTfbs_$cmin -}
1dae11a86c9d4aaf67e2f48cd643cf30
  $fOrdTfbs_$cmax :: World.Tfbs -> World.Tfbs -> World.Tfbs
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(U(U),U(U))><S(S(S)L),1*U(U(U),U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Tfbs) (w1 :: World.Tfbs) ->
                 case w of ww { World.Tfbs ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { World.Tfbs ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww4 ww9) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww4 ww9) of wild1 {
                        GHC.Types.False -> World.Tfbs (GHC.Types.I# ww4) ww2
                        GHC.Types.True
                        -> case ww2 of wild2 { GHC.Types.I# x ->
                           case ww7 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# x y) of wild4 {
                             GHC.Types.False -> World.Tfbs (GHC.Types.I# ww4) wild2
                             GHC.Types.True -> World.Tfbs (GHC.Types.I# ww9) wild3 } } } }
                   GHC.Types.True -> World.Tfbs (GHC.Types.I# ww9) ww7 } } } } }) -}
1dae11a86c9d4aaf67e2f48cd643cf30
  $fOrdTfbs_$cmin :: World.Tfbs -> World.Tfbs -> World.Tfbs
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(U(U),U(U))><S(S(S)L),1*U(U(U),U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Tfbs) (w1 :: World.Tfbs) ->
                 case w of ww { World.Tfbs ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { World.Tfbs ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww4 ww9) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww4 ww9) of wild1 {
                        GHC.Types.False -> World.Tfbs (GHC.Types.I# ww9) ww7
                        GHC.Types.True
                        -> case ww2 of wild2 { GHC.Types.I# x ->
                           case ww7 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# x y) of wild4 {
                             GHC.Types.False -> World.Tfbs (GHC.Types.I# ww9) wild3
                             GHC.Types.True -> World.Tfbs (GHC.Types.I# ww4) wild2 } } } }
                   GHC.Types.True -> World.Tfbs (GHC.Types.I# ww4) ww2 } } } } }) -}
4b2cc13ce18d28c6c31329fb43199d06
  $fReadAgent :: GHC.Read.Read World.Agent
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Agent
                  World.$fReadAgent_$creadsPrec
                  World.$fReadAgent_$creadList
                  World.$fReadAgent_$creadPrec
                  World.$fReadAgent_$creadListPrec -}
4b2cc13ce18d28c6c31329fb43199d06
  $fReadAgent1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([World.Agent] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [World.Agent] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ World.Agent
                   World.$fReadAgent2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <World.Agent>_R))
                   eta
                   @ b
                   eta1) -}
4b2cc13ce18d28c6c31329fb43199d06
  $fReadAgent2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP World.Agent
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ World.Agent
                   World.$fReadAgent3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <World.Agent>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <World.Agent>_R)))) -}
4b2cc13ce18d28c6c31329fb43199d06
  $fReadAgent3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (World.Agent -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)> -}
4b2cc13ce18d28c6c31329fb43199d06
  $fReadAgent4 :: Text.ParserCombinators.ReadP.P [World.Agent]
  {- Unfolding: (GHC.Read.list1
                   @ World.Agent
                   World.$fReadAgent2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <World.Agent>_R))
                   GHC.Read.$fRead()5
                   @ [World.Agent]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [World.Agent])) -}
4b2cc13ce18d28c6c31329fb43199d06
  $fReadAgent_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [World.Agent]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [World.Agent]
                   World.$fReadAgent4) -}
4b2cc13ce18d28c6c31329fb43199d06
  $fReadAgent_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [World.Agent]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                World.$fReadAgent1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[World.Agent]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[World.Agent]>_R))) -}
4b2cc13ce18d28c6c31329fb43199d06
  $fReadAgent_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec World.Agent
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                World.$fReadAgent2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <World.Agent>_R)) -}
4b2cc13ce18d28c6c31329fb43199d06
  $fReadAgent_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS World.Agent
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ World.Agent
                   ((GHC.Read.parens1
                       @ World.Agent
                       World.$fReadAgent3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <World.Agent>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <World.Agent>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <World.Agent>_R)
                      @ World.Agent
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ World.Agent))) -}
0168b3fa2cd8fa618654da75e14e3f9c
  $fReadGene :: GHC.Read.Read World.Gene
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Gene
                  World.$fReadGene_$creadsPrec
                  World.$fReadGene_$creadList
                  World.$fReadGene_$creadPrec
                  World.$fReadGene_$creadListPrec -}
0168b3fa2cd8fa618654da75e14e3f9c
  $fReadGene1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([World.Gene] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [World.Gene] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ World.Gene
                   World.$fReadGene2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <World.Gene>_R))
                   eta
                   @ b
                   eta1) -}
0168b3fa2cd8fa618654da75e14e3f9c
  $fReadGene2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP World.Gene
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ World.Gene
                   World.$fReadGene3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <World.Gene>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <World.Gene>_R)))) -}
0168b3fa2cd8fa618654da75e14e3f9c
  $fReadGene3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (World.Gene -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (c :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: World.Gene -> Text.ParserCombinators.ReadP.P b) ->
                 case c of wild { GHC.Types.I# x ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# x 11#) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> World.$fReadGene5 World.$fReadGene4 @ b eta } }) -}
8c427db64fce817b134d435d27ea9d65
  $fReadGene4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
0168b3fa2cd8fa618654da75e14e3f9c
  $fReadGene5 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b1.
       (World.Gene -> Text.ParserCombinators.ReadP.P b1)
       -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 2, Strictness: <L,A><L,C(U)>m2, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b1
                   (w1 :: World.Gene -> Text.ParserCombinators.ReadP.P b1) ->
                 case World.$w$creadPrec @ b1 w1 of ww { Unit# ww1 ->
                 Text.ParserCombinators.ReadP.Look @ b1 ww1 }) -}
0168b3fa2cd8fa618654da75e14e3f9c
  $fReadGene6 :: Text.ParserCombinators.ReadP.P [World.Gene]
  {- Unfolding: (GHC.Read.list1
                   @ World.Gene
                   World.$fReadGene2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <World.Gene>_R))
                   GHC.Read.$fRead()5
                   @ [World.Gene]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [World.Gene])) -}
0168b3fa2cd8fa618654da75e14e3f9c
  $fReadGene_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [World.Gene]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [World.Gene]
                   World.$fReadGene6) -}
0168b3fa2cd8fa618654da75e14e3f9c
  $fReadGene_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [World.Gene]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                World.$fReadGene1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[World.Gene]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[World.Gene]>_R))) -}
0168b3fa2cd8fa618654da75e14e3f9c
  $fReadGene_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec World.Gene
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                World.$fReadGene2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <World.Gene>_R)) -}
0168b3fa2cd8fa618654da75e14e3f9c
  $fReadGene_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS World.Gene
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ World.Gene
                   ((GHC.Read.parens1
                       @ World.Gene
                       World.$fReadGene3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <World.Gene>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <World.Gene>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <World.Gene>_R)
                      @ World.Gene
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ World.Gene))) -}
5b6d6c8746721a23c14daf03251ad94b
  $fReadLocus :: GHC.Read.Read World.Locus
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Locus
                  World.$fReadLocus_$creadsPrec
                  World.$fReadLocus_$creadList
                  World.$fReadLocus_$creadPrec
                  World.$fReadLocus_$creadListPrec -}
5b6d6c8746721a23c14daf03251ad94b
  $fReadLocus1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([World.Locus] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [World.Locus] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ World.Locus
                   World.$fReadLocus2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <World.Locus>_R))
                   eta
                   @ b
                   eta1) -}
5b6d6c8746721a23c14daf03251ad94b
  $fReadLocus2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP World.Locus
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ World.Locus
                   World.$fReadLocus3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <World.Locus>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <World.Locus>_R)))) -}
5b6d6c8746721a23c14daf03251ad94b
  $fReadLocus3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (World.Locus -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)> -}
5b6d6c8746721a23c14daf03251ad94b
  $fReadLocus4 :: Text.ParserCombinators.ReadP.P [World.Locus]
  {- Unfolding: (GHC.Read.list1
                   @ World.Locus
                   World.$fReadLocus2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <World.Locus>_R))
                   GHC.Read.$fRead()5
                   @ [World.Locus]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [World.Locus])) -}
5b6d6c8746721a23c14daf03251ad94b
  $fReadLocus_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [World.Locus]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [World.Locus]
                   World.$fReadLocus4) -}
5b6d6c8746721a23c14daf03251ad94b
  $fReadLocus_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [World.Locus]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                World.$fReadLocus1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[World.Locus]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[World.Locus]>_R))) -}
5b6d6c8746721a23c14daf03251ad94b
  $fReadLocus_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec World.Locus
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                World.$fReadLocus2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <World.Locus>_R)) -}
5b6d6c8746721a23c14daf03251ad94b
  $fReadLocus_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS World.Locus
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ World.Locus
                   ((GHC.Read.parens1
                       @ World.Locus
                       World.$fReadLocus3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <World.Locus>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <World.Locus>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <World.Locus>_R)
                      @ World.Locus
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ World.Locus))) -}
1dae11a86c9d4aaf67e2f48cd643cf30
  $fReadTfbs :: GHC.Read.Read World.Tfbs
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Tfbs
                  World.$fReadTfbs_$creadsPrec
                  World.$fReadTfbs_$creadList
                  World.$fReadTfbs_$creadPrec
                  World.$fReadTfbs_$creadListPrec -}
1dae11a86c9d4aaf67e2f48cd643cf30
  $fReadTfbs1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([World.Tfbs] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [World.Tfbs] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ World.Tfbs
                   World.$fReadTfbs2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <World.Tfbs>_R))
                   eta
                   @ b
                   eta1) -}
1dae11a86c9d4aaf67e2f48cd643cf30
  $fReadTfbs2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP World.Tfbs
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ World.Tfbs
                   World.$fReadTfbs3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <World.Tfbs>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <World.Tfbs>_R)))) -}
1dae11a86c9d4aaf67e2f48cd643cf30
  $fReadTfbs3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (World.Tfbs -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: World.Tfbs -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 World.$w$creadPrec1 ww1 @ b w1 }) -}
4afe8864555578e1347c834a3d41272e
  $fReadTfbs4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Tfbs"#) -}
17659fbe222c9ba50543c7c1de5eaacf
  $fReadTfbs5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10#) -}
1dae11a86c9d4aaf67e2f48cd643cf30
  $fReadTfbs6 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (World.Tfbs -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U(U)><L,C(U)>,
     Unfolding: (\ (n :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: World.Tfbs -> Text.ParserCombinators.ReadP.P b) ->
                 let {
                   lvl26 :: Text.ParserCombinators.ReadPrec.Prec
                   = case n of wild { GHC.Types.I# x ->
                     GHC.Types.I# (GHC.Prim.+# x 1#) }
                 } in
                 GHC.Read.$fReadInt3
                   GHC.Read.$fReadInt_$sconvertInt
                   lvl26
                   @ b
                   (\ (a1 :: World.ID) ->
                    GHC.Read.$fReadInt3
                      GHC.Read.$fReadInt_$sconvertInt
                      lvl26
                      @ b
                      (\ (a2 :: World.Weight) -> eta (World.Tfbs a1 a2)))) -}
1dae11a86c9d4aaf67e2f48cd643cf30
  $fReadTfbs7 :: Text.ParserCombinators.ReadP.P [World.Tfbs]
  {- Unfolding: (GHC.Read.list1
                   @ World.Tfbs
                   World.$fReadTfbs2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <World.Tfbs>_R))
                   GHC.Read.$fRead()5
                   @ [World.Tfbs]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [World.Tfbs])) -}
1dae11a86c9d4aaf67e2f48cd643cf30
  $fReadTfbs_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [World.Tfbs]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [World.Tfbs]
                   World.$fReadTfbs7) -}
1dae11a86c9d4aaf67e2f48cd643cf30
  $fReadTfbs_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [World.Tfbs]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                World.$fReadTfbs1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[World.Tfbs]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[World.Tfbs]>_R))) -}
1dae11a86c9d4aaf67e2f48cd643cf30
  $fReadTfbs_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec World.Tfbs
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                World.$fReadTfbs2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <World.Tfbs>_R)) -}
1dae11a86c9d4aaf67e2f48cd643cf30
  $fReadTfbs_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS World.Tfbs
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ World.Tfbs
                   ((GHC.Read.parens1
                       @ World.Tfbs
                       World.$fReadTfbs3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <World.Tfbs>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <World.Tfbs>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <World.Tfbs>_R)
                      @ World.Tfbs
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ World.Tfbs))) -}
4b2cc13ce18d28c6c31329fb43199d06
  $fShowAgent :: GHC.Show.Show World.Agent
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Agent
                  World.$fShowAgent_$cshowsPrec
                  World.$fShowAgent_$cshow
                  World.$fShowAgent_$cshowList -}
4b2cc13ce18d28c6c31329fb43199d06
  $fShowAgent1 :: World.Agent -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (World.$fShowAgent_$cshowsPrec World.$fShowAgent2) -}
8aa245815f66493cdeef6cdcd374bd96
  $fShowAgent2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
4b2cc13ce18d28c6c31329fb43199d06
  $fShowAgent_$cshow :: World.Agent -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: World.Agent) ->
                 World.$fShowAgent_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4b2cc13ce18d28c6c31329fb43199d06
  $fShowAgent_$cshowList :: [World.Agent] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ World.Agent
                   World.$fShowAgent1) -}
4b2cc13ce18d28c6c31329fb43199d06
  $fShowAgent_$cshowsPrec ::
    GHC.Types.Int -> World.Agent -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
0168b3fa2cd8fa618654da75e14e3f9c
  $fShowGene :: GHC.Show.Show World.Gene
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Gene
                  World.$fShowGene_$cshowsPrec
                  World.$fShowGene_$cshow
                  World.$fShowGene_$cshowList -}
0168b3fa2cd8fa618654da75e14e3f9c
  $fShowGene1 :: World.Gene -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: World.Gene) (w1 :: GHC.Base.String) ->
                 case w of ww { World.Gene ww1 ww2 ww3 ->
                 World.$w$cshowsPrec 0# ww1 ww2 ww3 w1 }) -}
4489d67ecb28262bb5e4727e4595c017
  $fShowGene2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
2b3c1b5208cb4f9f5963de7300c3b48a
  $fShowGene3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "genSt = "#) -}
5200281245a82a76681356383b921a77
  $fShowGene4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "thres = "#) -}
a401a6c4c576b4e9d8332402b4960257
  $fShowGene5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
c602ddacc3677e597d8e9328054d04fe
  $fShowGene6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "iD = "#) -}
19fbabf70a9365390f724d696a993c70
  $fShowGene7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Gene {"#) -}
0168b3fa2cd8fa618654da75e14e3f9c
  $fShowGene_$cshow :: World.Gene -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: World.Gene) ->
                 World.$fShowGene_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0168b3fa2cd8fa618654da75e14e3f9c
  $fShowGene_$cshowList :: [World.Gene] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ World.Gene World.$fShowGene1) -}
0168b3fa2cd8fa618654da75e14e3f9c
  $fShowGene_$cshowsPrec ::
    GHC.Types.Int -> World.Gene -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U),1*U(U),1*U(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: World.Gene)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { World.Gene ww3 ww4 ww5 ->
                 World.$w$cshowsPrec ww1 ww3 ww4 ww5 w2 } }) -}
5b6d6c8746721a23c14daf03251ad94b
  $fShowLocus :: GHC.Show.Show World.Locus
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Locus
                  World.$fShowLocus_$cshowsPrec
                  World.$fShowLocus_$cshow
                  World.$fShowLocus_$cshowList -}
5b6d6c8746721a23c14daf03251ad94b
  $fShowLocus1 :: World.Locus -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (x :: World.Locus) (s :: GHC.Base.String)[OneShot] ->
                 GHC.Base.++ @ GHC.Types.Char (World.$fShowLocus_$cshow x) s) -}
37bf2741731177ee5fc738ad279b062d
  $fShowLocus2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "T"#) -}
5b6d6c8746721a23c14daf03251ad94b
  $fShowLocus_$cshow :: World.Locus -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: World.Locus) ->
                 case ds of wild {
                   World.Transposon -> World.$fShowLocus2
                   World.CGene ds1
                   -> case ds1 of wild1 { World.Gene i t gs ->
                      GHC.CString.unpackAppendCString#
                        "G"#
                        (case i of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt
                                0#
                                ww3
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Base.++
                           @ GHC.Types.Char
                           (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                           (GHC.CString.unpackAppendCString#
                              ":"#
                              (case t of ww1 { GHC.Types.I# ww8 ->
                               case GHC.Show.$wshowSignedInt
                                      0#
                                      ww8
                                      (GHC.Types.[] @ GHC.Types.Char) of ww9 { (#,#) ww10 ww11 ->
                               GHC.Base.++
                                 @ GHC.Types.Char
                                 (GHC.Types.: @ GHC.Types.Char ww10 ww11)
                                 (GHC.CString.unpackAppendCString#
                                    ":"#
                                    (case gs of ww12 { GHC.Types.I# ww13 ->
                                     case GHC.Show.$wshowSignedInt
                                            0#
                                            ww13
                                            (GHC.Types.[]
                                               @ GHC.Types.Char) of ww14 { (#,#) ww15 ww16 ->
                                     GHC.Types.: @ GHC.Types.Char ww15 ww16 } })) } })) } }) }
                   World.CTfbs ds1
                   -> case ds1 of wild1 { World.Tfbs i w ->
                      case i of ww2 { GHC.Types.I# ww3 ->
                      case GHC.Show.$wshowSignedInt
                             0#
                             ww3
                             (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                        (GHC.CString.unpackAppendCString#
                           ":"#
                           (case w of ww1 { GHC.Types.I# ww8 ->
                            case GHC.Show.$wshowSignedInt
                                   0#
                                   ww8
                                   (GHC.Types.[] @ GHC.Types.Char) of ww9 { (#,#) ww10 ww11 ->
                            GHC.Types.: @ GHC.Types.Char ww10 ww11 } })) } } } }) -}
5b6d6c8746721a23c14daf03251ad94b
  $fShowLocus_$cshowList :: [World.Locus] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [World.Locus]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ World.Locus World.$fShowLocus1 ls s) -}
5b6d6c8746721a23c14daf03251ad94b
  $fShowLocus_$cshowsPrec ::
    GHC.Types.Int -> World.Locus -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: World.Locus)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (World.$fShowLocus_$cshow x))
                   s) -}
1dae11a86c9d4aaf67e2f48cd643cf30
  $fShowTfbs :: GHC.Show.Show World.Tfbs
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ World.Tfbs
                  World.$fShowTfbs_$cshowsPrec
                  World.$fShowTfbs_$cshow
                  World.$fShowTfbs_$cshowList -}
1dae11a86c9d4aaf67e2f48cd643cf30
  $fShowTfbs1 :: World.Tfbs -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: World.Tfbs) (w1 :: GHC.Base.String) ->
                 case w of ww { World.Tfbs ww1 ww2 ->
                 World.$w$cshowsPrec1 0# ww1 ww2 w1 }) -}
decfa50680208f2f6e5bcb0e0ccb1619
  $fShowTfbs2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Tfbs "#) -}
1dae11a86c9d4aaf67e2f48cd643cf30
  $fShowTfbs_$cshow :: World.Tfbs -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: World.Tfbs) ->
                 World.$fShowTfbs_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1dae11a86c9d4aaf67e2f48cd643cf30
  $fShowTfbs_$cshowList :: [World.Tfbs] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ World.Tfbs World.$fShowTfbs1) -}
1dae11a86c9d4aaf67e2f48cd643cf30
  $fShowTfbs_$cshowsPrec ::
    GHC.Types.Int -> World.Tfbs -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U(U),1*U(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: World.Tfbs)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { World.Tfbs ww3 ww4 ->
                 World.$w$cshowsPrec1 ww1 ww3 ww4 w2 } }) -}
9160358354700b2a35502e761f93e3e0
  $sfromList :: [(World.ID, a)] -> Data.Map.Base.Map World.ID a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(World.ID, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ World.ID @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { GHC.Types.I# ipv ->
                           Data.Map.Base.Bin
                             @ World.ID
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Base.Tip @ World.ID @ a)
                             (Data.Map.Base.Tip @ World.ID @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of wild4 { GHC.Types.I# x1 ->
                           case ky of wild5 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>=# x1 y) of wild6 {
                             GHC.Types.False
                             -> World.$wpoly_go10
                                  @ a
                                  1#
                                  (Data.Map.Base.Bin
                                     @ World.ID
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Base.Tip @ World.ID @ a)
                                     (Data.Map.Base.Tip @ World.ID @ a))
                                  wild2
                             GHC.Types.True
                             -> World.$sfromList1
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ World.ID
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Base.Tip @ World.ID @ a)
                                     (Data.Map.Base.Tip @ World.ID @ a))
                                  wild2 } } } } } } }) -}
4e829b56dddd12d8be9e7f9c714c1e59
  $sfromList1 ::
    Data.Map.Base.Map World.ID a1
    -> [(World.ID, a1)] -> Data.Map.Base.Map World.ID a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
2c4ebb385260d0e8c10f8e1db91d60af
  $tc'Agent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8815539605711250659##
                   13466885247533482678##
                   World.$trModule
                   World.$tc'Agent1) -}
76ffdcc9f079f38e819cca40a8f870c7
  $tc'Agent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Agent"#) -}
bb2983634262ab3a642a0517dcadbe76
  $tc'CGene :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8566940281084659120##
                   13828155393599754604##
                   World.$trModule
                   World.$tc'CGene1) -}
b161489c8abe1524211118de5a3abfd9
  $tc'CGene1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CGene"#) -}
feebb58be638cbdcc965ee8e5889f3f1
  $tc'CTfbs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16173399362964974126##
                   4639430441793557412##
                   World.$trModule
                   World.$tc'CTfbs1) -}
1c079eee46b43c0d55b77ca97cfb3d08
  $tc'CTfbs1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CTfbs"#) -}
de349a074e37a73d4cdbd420f7159aa3
  $tc'Gene :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7170547374213892817##
                   12572288621122609606##
                   World.$trModule
                   World.$tc'Gene1) -}
f6bd7e886bab14dcaa322ae7d16d8ed2
  $tc'Gene1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Gene"#) -}
5356ee1c055dca9697d9e09caa84a405
  $tc'NoAgent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17009799282848697958##
                   13374225539428630463##
                   World.$trModule
                   World.$tc'NoAgent1) -}
3fbd1b4a402173f064568054895bdc96
  $tc'NoAgent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NoAgent"#) -}
4dd0c7fd7cf42788262a09d0182227d4
  $tc'Tfbs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15823747257802826069##
                   8102002258556353909##
                   World.$trModule
                   World.$tc'Tfbs1) -}
a623f0920e7a629ec6cf69279c3ec687
  $tc'Tfbs1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Tfbs"#) -}
cf1635f76721c8c71d64b8a70625f774
  $tc'Transposon :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16323311099665033555##
                   18402687709690891794##
                   World.$trModule
                   World.$tc'Transposon1) -}
eda6124380bd1845a4c972836b9fa92e
  $tc'Transposon1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Transposon"#) -}
2b61ed02bb431ae17bdeabe42bfd123f
  $tc'World :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17977656889697008625##
                   16794500224147826540##
                   World.$trModule
                   World.$tc'World1) -}
f083bf8795ad5b8d941d6453a2f784b1
  $tc'World1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'World"#) -}
2e6e711b79f686ea2747fd57b68a9bc1
  $tcAgent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3463183518803425022##
                   17157702077738342337##
                   World.$trModule
                   World.$tcAgent1) -}
81f9ccc9e57e565a8c0a1458542bc573
  $tcAgent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Agent"#) -}
b4cb8a2a82b926f619b3850f31793e65
  $tcGene :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2531877250862241328##
                   2342196000799142202##
                   World.$trModule
                   World.$tcGene1) -}
f31e0f7a23fe8bf14109b6a9469c2074
  $tcGene1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Gene"#) -}
89fe8a5395ba6d7c3d0fae109263d569
  $tcLocus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18415868840665485883##
                   1342786936760580611##
                   World.$trModule
                   World.$tcLocus1) -}
7d62f278a3e661472352eda91fbc5d85
  $tcLocus1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Locus"#) -}
c9261c3ff6e8ca5d29b8fc16a24ccdc0
  $tcTfbs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3914595543869403911##
                   5524841199114198583##
                   World.$trModule
                   World.$tcTfbs1) -}
e8402e813fbd291bb31842e8610bb60d
  $tcTfbs1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Tfbs"#) -}
4ec05cc4c36c1a5de348a2dac519d62d
  $tcWorld :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16682016622398052752##
                   13759406042148332369##
                   World.$trModule
                   World.$trModule1) -}
1188247a05a41a6274c7943b1351894c
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module World.$trModule2 World.$trModule1) -}
a1af868be48b852b153f349484b83343
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "World"#) -}
d810e24f8243a7249f8c0f3853877103
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT"#) -}
fdefdc6bda4befd59cb1cd118a74c387
  $w$c/= ::
    GHC.Prim.Int#
    -> World.Weight -> GHC.Prim.Int# -> World.Weight -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: World.Weight)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: World.Weight) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww ww2) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.I# x ->
                      case ww3 of wild2 { GHC.Types.I# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# x y) of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
797bf81c008abc2993db7e215529679f
  $w$c< ::
    GHC.Prim.Int#
    -> World.Weight -> GHC.Prim.Int# -> World.Weight -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: World.Weight)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: World.Weight) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww ww2) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww ww2) of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Classes.ltInt ww1 ww3 }
                   GHC.Types.True -> GHC.Types.True }) -}
599b6e4f2e125237c49244c5d98d8272
  $w$c<= ::
    GHC.Prim.Int#
    -> World.Weight -> GHC.Prim.Int# -> World.Weight -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: World.Weight)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: World.Weight) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww ww2) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww ww2) of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Classes.leInt ww1 ww3 }
                   GHC.Types.True -> GHC.Types.True }) -}
a0a644a452518c239ccc10b8e43eca8d
  $w$c== ::
    GHC.Prim.Int#
    -> World.Weight -> GHC.Prim.Int# -> World.Weight -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: World.Weight)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: World.Weight) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww ww2) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Classes.eqInt ww1 ww3 }) -}
4990f4b6d7c0f842f6ef314f5153e781
  $w$c==1 ::
    GHC.Prim.Int#
    -> World.Thres
    -> World.GeneState
    -> GHC.Prim.Int#
    -> World.Thres
    -> World.GeneState
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><S,U><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: World.Thres)
                   (ww2 :: World.GeneState)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: World.Thres)
                   (ww5 :: World.GeneState) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww ww3) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.I# x ->
                      case ww4 of wild2 { GHC.Types.I# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# x y) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Classes.eqInt ww2 ww5 } } } }) -}
db0e63ce4fe5450ff9d2c64e8faa6d95
  $w$c> ::
    GHC.Prim.Int#
    -> World.Weight -> GHC.Prim.Int# -> World.Weight -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: World.Weight)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: World.Weight) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww ww2) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww ww2) of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Classes.gtInt ww1 ww3 }
                   GHC.Types.True -> GHC.Types.False }) -}
e877100e51da8a100af89e1f414deabf
  $w$c>= ::
    GHC.Prim.Int#
    -> World.Weight -> GHC.Prim.Int# -> World.Weight -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: World.Weight)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: World.Weight) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww ww2) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww ww2) of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Classes.geInt ww1 ww3 }
                   GHC.Types.True -> GHC.Types.False }) -}
d1d9166fcef988f3d91463b4ea772dea
  $w$ccompare ::
    GHC.Prim.Int#
    -> World.Thres
    -> World.GeneState
    -> GHC.Prim.Int#
    -> World.Thres
    -> World.GeneState
    -> GHC.Types.Ordering
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><S,U><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: World.Thres)
                   (ww2 :: World.GeneState)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: World.Thres)
                   (ww5 :: World.GeneState) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww ww3) of wild {
                   GHC.Types.False -> GHC.Classes.compareInt# ww ww3
                   GHC.Types.True
                   -> case ww2 of wild1 { GHC.Types.I# x ->
                      case ww5 of wild2 { GHC.Types.I# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# x y) of wild3 {
                        GHC.Types.False -> GHC.Classes.compareInt# y x
                        GHC.Types.True -> GHC.Classes.compareInt ww1 ww4 } } } }) -}
347b98032b46c78ea62fd7d71f45346e
  $w$ccompare1 ::
    GHC.Prim.Int#
    -> World.Weight
    -> GHC.Prim.Int#
    -> World.Weight
    -> GHC.Types.Ordering
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: World.Weight)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: World.Weight) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww ww2) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww ww2) of wild1 {
                        GHC.Types.False -> GHC.Types.GT
                        GHC.Types.True -> GHC.Classes.compareInt ww1 ww3 }
                   GHC.Types.True -> GHC.Types.LT }) -}
0168b3fa2cd8fa618654da75e14e3f9c
  $w$creadPrec ::
    (World.Gene -> Text.ParserCombinators.ReadP.P b1)
    -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
  {- Arity: 1, Strictness: <L,C(U)>, Inline: [0] -}
1dae11a86c9d4aaf67e2f48cd643cf30
  $w$creadPrec1 ::
    GHC.Prim.Int#
    -> forall b.
       (World.Tfbs -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   @ b
                   (w :: World.Tfbs -> Text.ParserCombinators.ReadP.P b) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10#) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl81 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl82 :: Text.ParserCombinators.ReadP.P b
                            = World.$fReadTfbs6 World.$fReadTfbs5 @ b w
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ (a1 :: Text.Read.Lex.Lexeme) ->
                             case a1 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a2
                               -> case GHC.Base.eqString a2 World.$fReadTfbs4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl82 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl81) -}
                        = \ (w4 :: ()) -> lvl81
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ (a :: GHC.Base.String) ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                           `cast`
                         (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
03b977a70da3d5cd1a2c8a561837d75a
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> World.ID
    -> World.Thres
    -> World.GeneState
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: World.ID)
                   (ww2 :: World.Thres)
                   (ww3 :: World.GeneState)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       World.$fShowGene7
                       (GHC.Base.++
                          @ GHC.Types.Char
                          World.$fShowGene6
                          (case ww1 of ww4 { GHC.Types.I# ww5 ->
                           case GHC.Show.$wshowSignedInt
                                  0#
                                  ww5
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     World.$fShowGene5
                                     (GHC.Base.++
                                        @ GHC.Types.Char
                                        World.$fShowGene4
                                        (case ww2 of ww6 { GHC.Types.I# ww7 ->
                                         case GHC.Show.$wshowSignedInt
                                                0#
                                                ww7
                                                (GHC.Base.++
                                                   @ GHC.Types.Char
                                                   World.$fShowGene5
                                                   (GHC.Base.++
                                                      @ GHC.Types.Char
                                                      World.$fShowGene3
                                                      (case ww3 of ww8 { GHC.Types.I# ww9 ->
                                                       case GHC.Show.$wshowSignedInt
                                                              0#
                                                              ww9
                                                              (GHC.Base.++
                                                                 @ GHC.Types.Char
                                                                 World.$fShowGene2
                                                                 x) of ww10 { (#,#) ww11 ww12 ->
                                                       GHC.Types.:
                                                         @ GHC.Types.Char
                                                         ww11
                                                         ww12 } }))) of ww8 { (#,#) ww9 ww10 ->
                                         GHC.Types.:
                                           @ GHC.Types.Char
                                           ww9
                                           ww10 } }))) of ww6 { (#,#) ww7 ww8 ->
                           GHC.Types.: @ GHC.Types.Char ww7 ww8 } }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w)) }) -}
f82989916ab1a409431955c4c67b02d0
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> World.ID -> World.Weight -> GHC.Base.String -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: World.ID)
                   (ww2 :: World.Weight)
                   (w :: GHC.Base.String) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     case ww1 of ww3 { GHC.Types.I# ww4 ->
                     case GHC.Show.$wshowSignedInt
                            11#
                            ww4
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (case ww2 of ww5 { GHC.Types.I# ww6 ->
                                case GHC.Show.$wshowSignedInt 11# ww6 x of ww7 { (#,#) ww8 ww9 ->
                                GHC.Types.:
                                  @ GHC.Types.Char
                                  ww8
                                  ww9 } })) of ww5 { (#,#) ww6 ww7 ->
                     GHC.Types.: @ GHC.Types.Char ww6 ww7 } }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++ @ GHC.Types.Char World.$fShowTfbs2 (g w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           World.$fShowTfbs2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w))) }) -}
dcbd163cc21f59615fde5ac26d969ef5
  $w$sgo1 ::
    (World.ID -> a1 -> a1 -> a1)
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map World.ID a1
    -> Data.Map.Base.Map World.ID a1
  {- Arity: 4, Strictness: <L,1*C1(C1(C1(U)))><L,U><L,U><S,1*U>,
     Inline: [0] -}
a5b77fad4211788b1104db0b90807805
  $w$sgo10 ::
    GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map World.ID a1
    -> Data.Map.Base.Map World.ID a1
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
af66e676497279799edfd764d84d7ab4
  $w$shammDist ::
    [(GHC.Types.Int, GHC.Types.Int)]
    -> [(GHC.Types.Int, GHC.Types.Int)] -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Inline: [0] -}
37cf26b22e69afad109b5eba02767937
  $wf :: GHC.Prim.Double# -> GHC.Prim.Int# -> GHC.Prim.Double#
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>, Inline: [0] -}
18be451c4f6893cf95122a7dec253c2d
  $wfitnessGST ::
    GHC.Prim.Int# -> World.GeneStateTable -> GHC.Prim.Double#
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: World.GeneStateTable) ->
                 case w of gst { DEFAULT ->
                 case World.$w$shammDist
                        (Data.Map.Base.toAscList1
                           @ GHC.Types.Int
                           @ GHC.Types.Int
                           (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int))
                           (World.$wtargetGST ww))
                        (Data.Map.Base.toAscList1
                           @ GHC.Types.Int
                           @ GHC.Types.Int
                           (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int))
                           gst) of ww1 { DEFAULT ->
                 World.$wf
                   (GHC.Prim.-##
                      1.0##
                      (GHC.Prim./## (GHC.Prim.int2Double# ww1) 20.0##))
                   10# } }) -}
1a39a0ddba6bfdf0832c3fc59b25dfa3
  $wgo ::
    GHC.Prim.Int#
    -> [GHC.Types.Int]
    -> GHC.Prim.Int#
    -> [(World.ID, World.GeneState)]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,1*U><L,1*U>,
     Inline: [0] -}
4b81a8acf3ff228a648cdf467b02b9bb
  $wgo1 :: World.Agent -> GHC.Prim.Int# -> [World.Agent]
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
387cd3483bfbc5db6e20a004afe18371
  $wgo2 :: World.Agent -> GHC.Prim.Int# -> [World.Agent]
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
936916e49596099d4a0d0bd0b89e9380
  $wgo3 ::
    [Control.Monad.Trans.State.Strict.StateT
       System.Random.Mersenne.Pure64.Internal.PureMT
       Data.Functor.Identity.Identity
       [World.Locus]]
    -> System.Random.Mersenne.Pure64.Internal.PureMT
    -> (# [[World.Locus]],
          System.Random.Mersenne.Pure64.Internal.PureMT #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
9687e5bf42e0b2d54dfd246a93be02d5
  $wgoodRandomGenome ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (# World.Genome,
          System.Random.Mersenne.Pure64.Internal.PureMT #)
  {- Arity: 1, Strictness: <L,U(U,U,U(U))>, Inline: [0] -}
19080689e384779528916a76774fb310
  $whammDist :: GHC.Classes.Eq a => [a] -> [a] -> GHC.Prim.Int#
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)))><S,1*U><L,1*U>, Inline: [0] -}
5e3e643e2f89c8d09dedd977f21f77d9
  $whammDistAg :: World.Agent -> World.Env -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <S,1*U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (w :: World.Agent) (w1 :: World.Env) ->
                 case w of wild {
                   World.Agent ipv ipv1
                   -> World.$w$shammDist
                        (Data.Map.Base.toAscList1
                           @ GHC.Types.Int
                           @ GHC.Types.Int
                           (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int))
                           (World.targetGST w1))
                        (Data.Map.Base.toAscList @ GHC.Types.Int @ GHC.Types.Int ipv1)
                   World.NoAgent -> 20# }) -}
6315de8451a99e931e0b54fdb8656409
  $wloop ::
    GHC.Prim.Int#
    -> System.Random.Mersenne.Pure64.Internal.PureMT
    -> (# [GHC.Types.Int],
          System.Random.Mersenne.Pure64.Internal.PureMT #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><L,U>, Inline: [0] -}
0f7b30c9ce51bbb02eb038fcfbc23df8
  $wloop1 ::
    GHC.Prim.Int#
    -> System.Random.Mersenne.Pure64.Internal.PureMT
    -> (# [GHC.Types.Int],
          System.Random.Mersenne.Pure64.Internal.PureMT #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><L,U>, Inline: [0] -}
790e0479bf70ffb6aded5896290ba4be
  $wpoly_go1 ::
    GHC.Prim.Int# -> Data.Map.Base.Map World.ID a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
443cc1f18ca2d8ef940238d21d374042
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map World.ID a
    -> [(World.ID, a)]
    -> Data.Map.Base.Map World.ID a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
17e967e582086c6e85c34995ccee1935
  $wrandomAgent ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (# World.Agent, System.Random.Mersenne.Pure64.Internal.PureMT #)
  {- Arity: 1, Strictness: <L,U(U,U,U(U))>, Inline: [0] -}
7ec5eef97e294cb240f3aeba8cac59f3
  $wrandomChromosome ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (# World.Chromosome,
          System.Random.Mersenne.Pure64.Internal.PureMT #)
  {- Arity: 1, Strictness: <L,U(U,U,U(U))>, Inline: [0],
     Unfolding: (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case World.$wgo3
                        World.randomChromosome2
                        (case w of wild1 { System.Random.Mersenne.Pure64.Internal.PureMT dt dt1 nxt ->
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.<# dt1 311#) of wild2 {
                           GHC.Types.False
                           -> case nxt of dt2 { System.Random.Mersenne.Pure64.Internal.MTBlock dt3 ->
                              System.Random.Mersenne.Pure64.Internal.PureMT
                                dt3
                                0#
                                (System.Random.Mersenne.Pure64.MTBlock.nextBlock dt2) }
                           GHC.Types.True
                           -> System.Random.Mersenne.Pure64.Internal.PureMT
                                dt
                                (GHC.Prim.+# dt1 1#)
                                nxt } }) of ww { (#,#) ww1 ww2 ->
                 (# let {
                      a1 :: [World.Locus] = World.randomChromosome_go ww1
                    } in
                    case GHC.List.$wlenAcc @ World.Locus a1 0# of ww3 { DEFAULT ->
                    case System.Random.Shuffle.shuffle'1
                           @ System.Random.Mersenne.Pure64.Internal.PureMT
                           (System.Random.Shuffle.$wrseq'
                              @ System.Random.Mersenne.Pure64.Internal.PureMT
                              MyRandom.$fRandomGenPureMT
                              (GHC.Prim.-# ww3 1#)
                              w) of ww4 { (#,#) ww5 ww6 ->
                    System.Random.Shuffle.shuffle1
                      @ World.Locus
                      (System.Random.Shuffle.shuffle_x
                         @ World.Locus
                         (GHC.Base.map
                            @ World.Locus
                            @ (System.Random.Shuffle.Tree World.Locus)
                            (System.Random.Shuffle.$WLeaf @ World.Locus)
                            a1))
                      ww5 } },
                    ww2 #) }) -}
604640c7a20480e9b80a0a767f28e0b8
  $wrandomGene ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (# [World.Locus],
          System.Random.Mersenne.Pure64.Internal.PureMT #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case World.$wloop 20# w of ww { (#,#) ww1 ww2 ->
                 (# case System.Random.Shuffle.shuffle'1
                           @ System.Random.Mersenne.Pure64.Internal.PureMT
                           (System.Random.Shuffle.$wrseq'
                              @ System.Random.Mersenne.Pure64.Internal.PureMT
                              MyRandom.$fRandomGenPureMT
                              19#
                              ww2) of ww3 { (#,#) ww4 ww5 ->
                    GHC.Base.map
                      @ World.Gene
                      @ World.Locus
                      World.CGene
                      (System.Random.Shuffle.shuffle1
                         @ World.Gene
                         (System.Random.Shuffle.shuffle_x
                            @ World.Gene
                            (World.randomChromosome_go1
                               World.randomChromosome6
                               (System.Random.Shuffle.shuffle1
                                  @ GHC.Types.Int
                                  (System.Random.Shuffle.shuffle_x
                                     @ GHC.Types.Int
                                     (GHC.Base.map
                                        @ GHC.Types.Int
                                        @ (System.Random.Shuffle.Tree GHC.Types.Int)
                                        (System.Random.Shuffle.$WLeaf @ GHC.Types.Int)
                                        ww1))
                                  ww4)))
                         ww4) },
                    case ww2 of wild1 { System.Random.Mersenne.Pure64.Internal.PureMT dt dt1 nxt ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<# dt1 311#) of wild2 {
                      GHC.Types.False
                      -> case nxt of dt2 { System.Random.Mersenne.Pure64.Internal.MTBlock dt3 ->
                         System.Random.Mersenne.Pure64.Internal.PureMT
                           dt3
                           0#
                           (System.Random.Mersenne.Pure64.MTBlock.nextBlock dt2) }
                      GHC.Types.True
                      -> System.Random.Mersenne.Pure64.Internal.PureMT
                           dt
                           (GHC.Prim.+# dt1 1#)
                           nxt } } #) }) -}
5f6406f6de21a42ce3cbf57b479cf22d
  $wrandomTfbs ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> (# [World.Locus],
          System.Random.Mersenne.Pure64.Internal.PureMT #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case World.$wloop1 20# w of ww { (#,#) ww1 ww2 ->
                 (# case System.Random.Shuffle.shuffle'1
                           @ System.Random.Mersenne.Pure64.Internal.PureMT
                           (System.Random.Shuffle.$wrseq'
                              @ System.Random.Mersenne.Pure64.Internal.PureMT
                              MyRandom.$fRandomGenPureMT
                              19#
                              ww2) of ww3 { (#,#) ww4 ww5 ->
                    GHC.Base.map
                      @ World.Tfbs
                      @ World.Locus
                      World.CTfbs
                      (System.Random.Shuffle.shuffle1
                         @ World.Tfbs
                         (System.Random.Shuffle.shuffle_x
                            @ World.Tfbs
                            (World.randomChromosome_go2
                               World.randomChromosome6
                               (System.Random.Shuffle.shuffle1
                                  @ GHC.Types.Int
                                  (System.Random.Shuffle.shuffle_x
                                     @ GHC.Types.Int
                                     (GHC.Base.map
                                        @ GHC.Types.Int
                                        @ (System.Random.Shuffle.Tree GHC.Types.Int)
                                        (System.Random.Shuffle.$WLeaf @ GHC.Types.Int)
                                        ww1))
                                  ww4)))
                         ww4) },
                    case ww2 of wild1 { System.Random.Mersenne.Pure64.Internal.PureMT dt dt1 nxt ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<# dt1 311#) of wild2 {
                      GHC.Types.False
                      -> case nxt of dt2 { System.Random.Mersenne.Pure64.Internal.MTBlock dt3 ->
                         System.Random.Mersenne.Pure64.Internal.PureMT
                           dt3
                           0#
                           (System.Random.Mersenne.Pure64.MTBlock.nextBlock dt2) }
                      GHC.Types.True
                      -> System.Random.Mersenne.Pure64.Internal.PureMT
                           dt
                           (GHC.Prim.+# dt1 1#)
                           nxt } } #) }) -}
e7f2fae5d3c134e14f445c98198f0938
  $wtakeWhileInclusive ::
    (a -> GHC.Types.Bool) -> [a] -> [a] -> (# [a], [a] #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><L,U><S,1*U>,
     Inline: [0] -}
0e15b1330370699adcf4cf038770d061
  $wtargetGST :: GHC.Prim.Int# -> World.GeneStateTable
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case ww of ds {
                   DEFAULT
                   -> letrec {
                        $wgo6 :: [World.ID] -> GHC.Prim.Int# -> [(World.ID, GHC.Types.Int)]
                          {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
                        = \ (w :: [World.ID]) (ww1 :: GHC.Prim.Int#) ->
                          case w of wild {
                            [] -> GHC.Types.[] @ (World.ID, GHC.Types.Int)
                            : y ys
                            -> case ww1 of ds1 {
                                 DEFAULT
                                 -> GHC.Types.:
                                      @ (World.ID, GHC.Types.Int)
                                      (y,
                                       case y of ww2 { GHC.Types.I# ww3 ->
                                       case GHC.Prim.tagToEnum#
                                              @ GHC.Types.Bool
                                              (GHC.Prim.<# ww3 8#) of wild1 {
                                         GHC.Types.False
                                         -> case GHC.Classes.modInt#
                                                   (GHC.Prim.-# (GHC.Prim.-# ww3 8#) ds)
                                                   2# of ww4 {
                                              DEFAULT -> GHC.Types.I# 0# 0# -> GHC.Types.I# 1# }
                                         GHC.Types.True -> GHC.Types.I# 1# } })
                                      ($wgo6 ys (GHC.Prim.-# ds1 1#))
                                 1#
                                 -> GHC.Types.:
                                      @ (World.ID, GHC.Types.Int)
                                      (y,
                                       case y of ww2 { GHC.Types.I# ww3 ->
                                       case GHC.Prim.tagToEnum#
                                              @ GHC.Types.Bool
                                              (GHC.Prim.<# ww3 8#) of wild1 {
                                         GHC.Types.False
                                         -> case GHC.Classes.modInt#
                                                   (GHC.Prim.-# (GHC.Prim.-# ww3 8#) ds)
                                                   2# of ww4 {
                                              DEFAULT -> GHC.Types.I# 0# 0# -> GHC.Types.I# 1# }
                                         GHC.Types.True -> GHC.Types.I# 1# } })
                                      (GHC.Types.[] @ (World.ID, GHC.Types.Int)) } }
                      } in
                      World.$sfromList @ GHC.Types.Int ($wgo6 World.fitnessGST5 20#)
                   0# -> World.fitnessGST3
                   1# -> World.fitnessGST1 }) -}
4b2cc13ce18d28c6c31329fb43199d06
  data Agent
    = Agent {genome :: World.Genome,
             geneStateTable :: World.GeneStateTable}
    | NoAgent
f3ae9b376e823ec678a9a444b2c3e1ad
  type Agents =
    GHC.Arr.Array (GHC.Types.Int, GHC.Types.Int) World.Agent
21f2e986c4e364fedf06dd30ceaaa809
  type Chromosome = [World.Locus]
a1d0de52ada648163e32b03965fa7cc7
  type Env = GHC.Types.Int
0168b3fa2cd8fa618654da75e14e3f9c
  data Gene
    = Gene {iD :: World.ID,
            thres :: World.Thres,
            genSt :: World.GeneState}
3f23b5bb57cf65bf7e983167b8883774
  type GeneState = GHC.Types.Int
51ae71c0638fcc437cd2b94719632dc4
  type GeneStateTable = Data.Map.Base.Map World.ID World.GeneState
3496888196f811763789a9949324cfc6
  type Genome = [World.Chromosome]
b15dac8d0705e0a77c860da84093fbb0
  type ID = GHC.Types.Int
5b6d6c8746721a23c14daf03251ad94b
  data Locus = Transposon | CGene World.Gene | CTfbs World.Tfbs
1dae11a86c9d4aaf67e2f48cd643cf30
  data Tfbs = Tfbs World.ID World.Weight
1bbd2d256ebacb6daa6d0c3d5a3d8cfe
  type Thres = GHC.Types.Int
ff30e96852f95344f09d4bb7932f0f44
  type Weight = GHC.Types.Int
9af19fb01ca0eb7d59ceb0e35f564957
  data World = World {agents :: World.Agents, env :: World.Env}
d0fa5d65b55b045855c17156dd521fbc
  agent0 :: World.Agent
  {- Unfolding: (World.agent0_takeUntilSame World.agent1) -}
e828bcdc0dab3e6bea9d7b674542d798
  agent0_takeUntilSame :: [World.Agent] -> World.Agent
  {- Arity: 1, Strictness: <S,1*U> -}
9044b1a8c68c6d3d4e891fe9535da6ee
  agent1 :: [World.Agent]
  {- Unfolding: (World.$wgo1 World.agent2 20#) -}
5aa3f3ed0337e7ff8f6ed762e4e34d54
  agent2 :: World.Agent
  {- Unfolding: (World.Agent World.agent3 World.defaultGst) -}
953a20a152b909369f47fa81051bfa66
  agent3 :: [[World.Locus]]
  {- Unfolding: (GHC.Types.:
                   @ [World.Locus]
                   World.agent4
                   (GHC.Types.[] @ [World.Locus])) -}
1f090cbf8db0fa1d6d7504266df094a2
  agent4 :: [World.Locus]
  {- Unfolding: (GHC.Base.map
                   @ [GHC.Types.Char]
                   @ World.Locus
                   World.parseLoc
                   World.agent5) -}
c8ded69b18ec9cab2b6604856de00f80
  agent5 :: [[GHC.Types.Char]]
  {- Unfolding: (World.agent7 World.agent6) -}
a6a0cf82876f77fbeb670ed40de7f827
  agent6 :: [GHC.Types.Char]
be65967a1f2cea167d082245ee6372f8
  agent7 :: [GHC.Types.Char] -> [[GHC.Types.Char]]
  {- Unfolding: (Data.List.Split.Internals.splitOn
                   @ GHC.Types.Char
                   GHC.Classes.$fEqChar
                   World.agent8) -}
2100232d5c0f559b51612859f03511fb
  agent8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ","#) -}
fb18882e5ecf2f932bf9bf289cd810e0
  agents :: World.World -> World.Agents
  RecSel Left World.World
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U(U,U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: World.World) ->
                 case ds of wild { World.World ds1 ds2 -> ds1 }) -}
884c7f8bdbe4ec4c487db3cd0f6c625c
  connected :: World.Genome -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                World.connected1
                  `cast`
                (<[[World.Locus]]>_R ->_R Data.Monoid.N:All[0]) -}
041324219ed2f3798421a60cea92bb5d
  connected1 :: [[World.Locus]] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [[World.Locus]]) ->
                 World.connected_go1
                   (GHC.Base.map
                      @ [World.Locus]
                      @ GHC.Types.Int
                      (GHC.List.length @ World.Locus)
                      (World.groupGeneTfbs (World.connected_go x)))) -}
b5890a83bdd4c3a1be03393dd88bd1f9
  connected_go :: [[World.Locus]] -> [World.Locus]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
61c631cb2a01e99f5bd83096823a07c3
  connected_go1 :: [GHC.Types.Int] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
257590995398e86074dc2fc77fe21a8b
  defaultGst :: Data.Map.Base.Map World.ID World.GeneState
  {- Unfolding: (World.$sfromList
                   @ GHC.Types.Int
                   World.defaultGst1) -}
664ae63cdb01893c4a9f31f2981407a8
  defaultGst1 :: [(World.ID, World.GeneState)]
  {- Unfolding: (World.$wgo 0# World.defaultGst_xs 20#) -}
82a7fb4df700eb51a0ab6ba3c363b87b
  defaultGst_xs :: [GHC.Types.Int]
  {- HasNoCafRefs -}
57b4aafaafb403c7c20fc017e2cc3933
  devAg :: World.Agent -> World.Agent
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (x :: World.Agent) ->
                 World.agent0_takeUntilSame (World.$wgo2 x 20#)) -}
1e61971513ed1299f547f48f70f98a8f
  env :: World.World -> World.Env
  RecSel Left World.World
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: World.World) ->
                 case ds of wild { World.World ds1 ds2 -> ds2 }) -}
f4de6e89310d327417c17b60e8863395
  fitnessAgent :: World.Agent -> World.Env -> GHC.Types.Double
  {- Arity: 2, Strictness: <S,1*U><L,1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: World.Agent) (e :: World.Env) ->
                 case ds of wild {
                   World.Agent ds1 gst -> World.fitnessGST e gst
                   World.NoAgent -> World.fitnessAgent1 }) -}
3ec67734f4afa68d988539ee09a46a15
  fitnessAgent1 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 0.0##) -}
114a3807fc57f8f703a59d3a599168d2
  fitnessGST :: World.Env -> World.GeneStateTable -> GHC.Types.Double
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Env) (w1 :: World.GeneStateTable) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case World.$wfitnessGST ww1 w1 of ww2 { DEFAULT ->
                 GHC.Types.D# ww2 } }) -}
1fbc6b7f5c87b1cb20b21aef5c5b7400
  fitnessGST1 :: World.GeneStateTable
  {- Unfolding: (World.$sfromList
                   @ GHC.Types.Int
                   World.fitnessGST2) -}
8d174ef838cafdac39415b92889872b7
  fitnessGST2 :: [(World.ID, GHC.Types.Int)]
  {- Unfolding: (World.fitnessGST_go 0#) -}
5c64eb22572fe35a3df93b1bab30cc32
  fitnessGST3 :: World.GeneStateTable
  {- Unfolding: (World.$sfromList
                   @ GHC.Types.Int
                   World.fitnessGST4) -}
73678053a913ffea4d7580283fb893b8
  fitnessGST4 :: [(World.ID, GHC.Types.Int)]
  {- Unfolding: (World.fitnessGST_go1 0#) -}
0bb0542c06aedac1bcebbe71fe27ce90
  fitnessGST5 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.eftInt 0# 9223372036854775807#) -}
a9090913fee418e525ca57f7bf8a06f1
  fitnessGST_go :: GHC.Prim.Int# -> [(World.ID, GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
003aee566d256173cce2dd6b67a2ebe6
  fitnessGST_go1 :: GHC.Prim.Int# -> [(World.ID, GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
41e399a71c4da0f736314db548b71498
  gSTFromGenome :: World.Genome -> World.GeneStateTable
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (genes :: World.Genome) ->
                 World.makeGst
                   (Data.Map.Base.Tip @ World.ID @ World.GeneState)
                   (World.reduceToGenes genes)) -}
b9dd43032234aa722da5b378f9a00616
  genSt :: World.Gene -> World.GeneState
  RecSel Left World.Gene
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: World.Gene) ->
                 case ds of wild { World.Gene ds1 ds2 ds3 -> ds3 }) -}
1eb534e9006f848a972b24d47849bb37
  geneStateTable :: World.Agent -> World.GeneStateTable
  RecSel Left World.Agent
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: World.Agent) ->
                 case ds of wild {
                   World.Agent ds1 ds2 -> ds2
                   World.NoAgent -> World.geneStateTable1 }) -}
e9f9254852f480e8357d9b2bdeab1090
  geneStateTable1 :: World.GeneStateTable
  {- Strictness: x -}
c5a1c16dd5abac14aa5dfb0e5dfe1efd
  genome :: World.Agent -> World.Genome
  RecSel Left World.Agent
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: World.Agent) ->
                 case ds of wild {
                   World.Agent ds1 ds2 -> ds1 World.NoAgent -> World.genome1 }) -}
3a481cc4972d78bfe3c80c14952b855d
  genome1 :: World.Genome
  {- Strictness: x -}
326f48799e10f8b1afd9db77f8cf84e3
  goodRandomGenome :: MyRandom.Rand World.Genome
  {- Arity: 1, Strictness: <L,U(U,U,U(U))>m,
     Unfolding: InlineRule (0, True, True)
                World.goodRandomGenome1
                  `cast`
                (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                          <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                          <Data.Functor.Identity.Identity>_R
                          <World.Genome>_N)) -}
228f3d428642efd6dc20d6fea05c6f5c
  goodRandomGenome1 ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> Data.Functor.Identity.Identity
         (World.Genome, System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, Strictness: <L,U(U,U,U(U))>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case World.$wgoodRandomGenome w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <(World.Genome,
                             System.Random.Mersenne.Pure64.Internal.PureMT)>_R)) }) -}
86f7f1b99af8a53548a727052e128aee
  groupGeneTfbs :: [World.Locus] -> [[World.Locus]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
982f5ba6a225d6753f97f9d4c847b2c1
  hammDist :: GHC.Classes.Eq a => [a] -> [a] -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)))><S,1*U><L,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a (w :: GHC.Classes.Eq a) (w1 :: [a]) (w2 :: [a]) ->
                 case World.$whammDist @ a w w1 w2 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
ccf0a6969ac8d31e34f6d571639ba83a
  hammDistAg :: World.Agent -> World.Env -> GHC.Types.Int
  {- Arity: 2, Strictness: <S,1*U><L,1*U(U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Agent) (w1 :: World.Env) ->
                 case World.$whammDistAg w w1 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
7464d84394581f2f862c36fe3c1d049a
  hammDist_$shammDist ::
    [(GHC.Types.Int, GHC.Types.Int)]
    -> [(GHC.Types.Int, GHC.Types.Int)] -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [(GHC.Types.Int, GHC.Types.Int)])
                   (w1 :: [(GHC.Types.Int, GHC.Types.Int)]) ->
                 case World.$w$shammDist w w1 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
bebc7a54171246438c88da60b0528f9f
  iD :: World.Gene -> World.ID
  RecSel Left World.Gene
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: World.Gene) ->
                 case ds of wild { World.Gene ds1 ds2 ds3 -> ds1 }) -}
1e70e89d7e6e731e0008224ac64f3d5a
  isGene :: World.Locus -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: World.Locus) ->
                 case x of wild {
                   DEFAULT -> GHC.Types.False World.CGene ds -> GHC.Types.True }) -}
182a431a1a50e1056a556403fcf755df
  locusEffect :: World.Locus -> World.GeneStateTable -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: (\ (ds :: World.Locus) (gst :: World.GeneStateTable) ->
                 case ds of wild {
                   DEFAULT -> World.$fShowAgent2
                   World.CTfbs ds1
                   -> case ds1 of wild1 { World.Tfbs i w ->
                      case i of ww { GHC.Types.I# ww1 ->
                      case World.$wpoly_go1 @ GHC.Types.Int ww1 gst of wild2 {
                        GHC.Base.Nothing -> World.$fShowAgent2
                        GHC.Base.Just a1
                        -> case a1 of wild3 { GHC.Types.I# x ->
                           case x of wild4 {
                             DEFAULT -> World.$fShowAgent2 1# -> w } } } } } }) -}
48981cd4e854f95fd5a59a40e14c3c6b
  makeGst ::
    World.GeneStateTable -> [World.Gene] -> World.GeneStateTable
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
0c9f6d1c3f12bb0c1ae65152dcf2cdff
  parseLoc :: [GHC.Types.Char] -> World.Locus
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (str :: [GHC.Types.Char]) ->
                 case str of wild {
                   [] -> case GHC.List.badHead ret_ty World.Locus of {}
                   : x ds1
                   -> case x of wild1 { GHC.Types.C# x1 ->
                      let {
                        s :: [[GHC.Types.Char]] = World.parseLoc4 wild
                      } in
                      case x1 of wild2 {
                        DEFAULT
                        -> case GHC.Base.eqString wild World.$fShowLocus2 of wild3 {
                             GHC.Types.False
                             -> World.CTfbs
                                  (World.Tfbs
                                     (case Text.Read.readEither6
                                             @ World.ID
                                             (Text.ParserCombinators.ReadP.run
                                                @ World.ID
                                                World.parseLoc3
                                                (case s of wild4 {
                                                   [] -> GHC.List.badHead @ [GHC.Types.Char]
                                                   : x2 ds2 -> x2 })) of wild4 {
                                        [] -> World.parseLoc2
                                        : x2 ds
                                        -> case ds of wild5 {
                                             [] -> x2 : ipv ipv1 -> World.parseLoc1 } })
                                     (case Text.Read.readEither6
                                             @ World.Weight
                                             (Text.ParserCombinators.ReadP.run
                                                @ World.Weight
                                                World.parseLoc3
                                                (GHC.List.$w!! @ [GHC.Types.Char] s 1#)) of wild4 {
                                        [] -> World.parseLoc2
                                        : x2 ds
                                        -> case ds of wild5 {
                                             [] -> x2 : ipv ipv1 -> World.parseLoc1 } }))
                             GHC.Types.True -> World.Transposon }
                        'G'#
                        -> World.CGene
                             (World.Gene
                                (case Text.Read.readEither6
                                        @ World.ID
                                        (Text.ParserCombinators.ReadP.run
                                           @ World.ID
                                           World.parseLoc3
                                           (case s of wild3 {
                                              []
                                              -> case GHC.List.badHead ret_ty GHC.Base.String of {}
                                              : x2 ds2
                                              -> case x2 of wild4 {
                                                   [] -> GHC.List.scanl2 @ GHC.Types.Char
                                                   : ds3 xs -> xs } })) of wild3 {
                                   [] -> World.parseLoc2
                                   : x2 ds
                                   -> case ds of wild4 { [] -> x2 : ipv ipv1 -> World.parseLoc1 } })
                                (case Text.Read.readEither6
                                        @ World.Thres
                                        (Text.ParserCombinators.ReadP.run
                                           @ World.Thres
                                           World.parseLoc3
                                           (GHC.List.$w!! @ [GHC.Types.Char] s 1#)) of wild3 {
                                   [] -> World.parseLoc2
                                   : x2 ds
                                   -> case ds of wild4 { [] -> x2 : ipv ipv1 -> World.parseLoc1 } })
                                World.$fShowAgent2) } } }) -}
09f28b16126155f374bda56ca5f96329
  parseLoc1 :: World.ID
  {- Strictness: x -}
b0b4470f2ffa37bd236e97f9ec64e848
  parseLoc2 :: World.ID
  {- Strictness: x -}
d9cf7348a1f085bd33bbd8d2fc86ae90
  parseLoc3 :: Text.ParserCombinators.ReadP.P World.ID
  {- Unfolding: (GHC.Read.$fReadInt3
                   GHC.Read.$fReadInt_$sconvertInt
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ World.ID
                   (Text.Read.readEither5 @ World.ID)) -}
378921f6fdf2e5099ea4843ce1e22820
  parseLoc4 :: [GHC.Types.Char] -> [[GHC.Types.Char]]
  {- Unfolding: (Data.List.Split.Internals.splitOn
                   @ GHC.Types.Char
                   GHC.Classes.$fEqChar
                   World.parseLoc5) -}
dcb4967f83ee1088dab4dee40c4b1f58
  parseLoc5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ":"#) -}
f9327173b40bfc0a0e94611c7529abd6
  randomAgent :: MyRandom.Rand World.Agent
  {- Arity: 1, Strictness: <L,U(U,U,U(U))>m,
     Unfolding: InlineRule (0, True, True)
                World.randomAgent1
                  `cast`
                (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                          <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                          <Data.Functor.Identity.Identity>_R
                          <World.Agent>_N)) -}
89e72c8761aa0eece40df629a043f7f7
  randomAgent1 ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> Data.Functor.Identity.Identity
         (World.Agent, System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, Strictness: <L,U(U,U,U(U))>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case World.$wrandomAgent w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <(World.Agent,
                             System.Random.Mersenne.Pure64.Internal.PureMT)>_R)) }) -}
5f764449de5f88dd2d088fb9ab0254b0
  randomChromosome :: MyRandom.Rand World.Chromosome
  {- Arity: 1, Strictness: <L,U(U,U,U(U))>m,
     Unfolding: InlineRule (0, True, True)
                World.randomChromosome1
                  `cast`
                (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                          <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                          <Data.Functor.Identity.Identity>_R
                          <World.Chromosome>_N)) -}
cd60c67a81599fcf2f819de8f5ad075e
  randomChromosome1 ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> Data.Functor.Identity.Identity
         (World.Chromosome, System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, Strictness: <L,U(U,U,U(U))>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case World.$wrandomChromosome w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <(World.Chromosome,
                             System.Random.Mersenne.Pure64.Internal.PureMT)>_R)) }) -}
9e5d7debb2f665932c950148894d58f9
  randomChromosome2 ::
    [Control.Monad.Trans.State.Strict.StateT
       System.Random.Mersenne.Pure64.Internal.PureMT
       Data.Functor.Identity.Identity
       [World.Locus]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Control.Monad.Trans.State.Strict.StateT
                        System.Random.Mersenne.Pure64.Internal.PureMT
                        Data.Functor.Identity.Identity
                        [World.Locus])
                   World.randomChromosome7
                     `cast`
                   (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                             <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                             <Data.Functor.Identity.Identity>_R
                             <[World.Locus]>_N))
                   World.randomChromosome3) -}
30f52c1c8ab832871621188ee8c736ae
  randomChromosome3 ::
    [Control.Monad.Trans.State.Strict.StateT
       System.Random.Mersenne.Pure64.Internal.PureMT
       Data.Functor.Identity.Identity
       [World.Locus]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Control.Monad.Trans.State.Strict.StateT
                        System.Random.Mersenne.Pure64.Internal.PureMT
                        Data.Functor.Identity.Identity
                        [World.Locus])
                   World.randomChromosome7
                     `cast`
                   (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                             <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                             <Data.Functor.Identity.Identity>_R
                             <[World.Locus]>_N))
                   World.randomChromosome4) -}
82c364e7ddf240bdc8027187eb44f56b
  randomChromosome4 ::
    [Control.Monad.Trans.State.Strict.StateT
       System.Random.Mersenne.Pure64.Internal.PureMT
       Data.Functor.Identity.Identity
       [World.Locus]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Control.Monad.Trans.State.Strict.StateT
                        System.Random.Mersenne.Pure64.Internal.PureMT
                        Data.Functor.Identity.Identity
                        [World.Locus])
                   World.randomChromosome5
                     `cast`
                   (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                             <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                             <Data.Functor.Identity.Identity>_R
                             <[World.Locus]>_N))
                   (GHC.Types.[]
                      @ (Control.Monad.Trans.State.Strict.StateT
                           System.Random.Mersenne.Pure64.Internal.PureMT
                           Data.Functor.Identity.Identity
                           [World.Locus]))) -}
d47ada2d7e13fded7a6a35f380913b04
  randomChromosome5 ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> Data.Functor.Identity.Identity
         ([World.Locus], System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case World.$wrandomGene w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <([World.Locus],
                             System.Random.Mersenne.Pure64.Internal.PureMT)>_R)) }) -}
788c292e2ed0144e55b5d88c3b5a3cb2
  randomChromosome6 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.eftInt 0# 19#) -}
84d091093eba52fd9d24a364460471e3
  randomChromosome7 ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> Data.Functor.Identity.Identity
         ([World.Locus], System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case World.$wrandomTfbs w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <([World.Locus],
                             System.Random.Mersenne.Pure64.Internal.PureMT)>_R)) }) -}
4edba2c068af300ceb400abe3a8e7552
  randomChromosome_go :: [[World.Locus]] -> [World.Locus]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
a5cd79589feba0131b4dd09d5cfe5dd3
  randomChromosome_go1 ::
    [GHC.Types.Int]
    -> [GHC.Types.Int] -> [System.Random.Shuffle.Tree World.Gene]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
86d9053eb7e048ce4eb014160f2e2a47
  randomChromosome_go2 ::
    [GHC.Types.Int]
    -> [GHC.Types.Int] -> [System.Random.Shuffle.Tree World.Tfbs]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
9c94f1a7fb8bce54aa36748a3c519954
  randomGene :: MyRandom.Rand [World.Locus]
  {- Arity: 1, Strictness: <L,U>m,
     Unfolding: InlineRule (0, True, True)
                World.randomChromosome5
                  `cast`
                (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                          <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                          <Data.Functor.Identity.Identity>_R
                          <[World.Locus]>_N)) -}
68056b6d1e779aa36fc38a39da4f5250
  randomGenome :: MyRandom.Rand World.Genome
  {- Arity: 1, Strictness: <L,U(U,U,U(U))>m,
     Unfolding: InlineRule (0, True, True)
                World.randomGenome1
                  `cast`
                (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                          <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                          <Data.Functor.Identity.Identity>_R
                          <[World.Chromosome]>_N)) -}
3eef3d6103ab0dad777015a565dc0203
  randomGenome1 ::
    System.Random.Mersenne.Pure64.Internal.PureMT
    -> Data.Functor.Identity.Identity
         ([World.Chromosome], System.Random.Mersenne.Pure64.Internal.PureMT)
  {- Arity: 1, Strictness: <L,U(U,U,U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (s1 :: System.Random.Mersenne.Pure64.Internal.PureMT) ->
                 case (World.randomChromosome1 s1)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <(World.Chromosome,
                             System.Random.Mersenne.Pure64.Internal.PureMT)>_R) of wild { (,) a1 s' ->
                 (GHC.Types.:
                    @ World.Chromosome
                    a1
                    (GHC.Types.[] @ World.Chromosome),
                  s')
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <([World.Chromosome],
                             System.Random.Mersenne.Pure64.Internal.PureMT)>_R)) }) -}
27654e1896e5cb4f8b21d7a1385a099b
  randomTfbs :: MyRandom.Rand [World.Locus]
  {- Arity: 1, Strictness: <L,U>m,
     Unfolding: InlineRule (0, True, True)
                World.randomChromosome7
                  `cast`
                (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                          <System.Random.Mersenne.Pure64.Internal.PureMT>_N
                          <Data.Functor.Identity.Identity>_R
                          <[World.Locus]>_N)) -}
6035515055693e8a68d6c3878098d1ae
  reduceToGenes :: World.Genome -> [World.Gene]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [[World.Locus]]) ->
                 World.reduceToGenes_filterGenes
                   (GHC.List.head @ [World.Locus] x)) -}
446d588ac12ba1c2681bb05f2a940879
  reduceToGenes_filterGenes :: [World.Locus] -> [World.Gene]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
da3cda1b3e05664113bc50b51fcbae2d
  reduceToTfbss :: World.Genome -> [World.Tfbs]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [[World.Locus]]) ->
                 World.reduceToTfbss_filterTfbss
                   (GHC.List.head @ [World.Locus] x)) -}
322bc586c0ee5b13d939a89dc4d896e7
  reduceToTfbss_filterTfbss :: [World.Locus] -> [World.Tfbs]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
df7ee2fb96882e3756b3b9bf875a7c36
  sameGST :: World.Agent -> World.Agent -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: World.Agent) (ds1 :: World.Agent) ->
                 case ds of wild {
                   World.Agent ipv ipv1
                   -> case ds1 of wild1 {
                        World.Agent ipv2 ipv3
                        -> Data.Map.Base.$fEqMap_$c==
                             @ GHC.Types.Int
                             @ GHC.Types.Int
                             GHC.Classes.$fEqInt
                             GHC.Classes.$fEqInt
                             ipv1
                             ipv3
                        World.NoAgent -> GHC.Types.False }
                   World.NoAgent -> GHC.Types.True }) -}
0925b30e6df0c01378f560d17576cc17
  showGST :: World.GeneStateTable -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Data.Map.Base.Map World.ID World.GeneState) ->
                 case World.showGST_go10 (GHC.Types.[] @ GHC.Types.Char) x of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : x1 xs
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        x1
                        (Data.OldList.prependToAll
                           @ GHC.Types.Char
                           World.showGST1
                           xs) }) -}
d7b0e1ccf56a2823875d013ef6078a17
  showGST1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ' '#) -}
8c6e9d51c230a781551a166ae3d59147
  showGST_go10 ::
    [GHC.Types.Char]
    -> Data.Map.Base.Map GHC.Types.Int GHC.Types.Int
    -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U> -}
a111299c0b533a9e11c63b91187155db
  takeWhileInclusive ::
    (a -> GHC.Types.Bool) -> ([a], [a]) -> ([a], [a])
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S(LS),1*U(U,1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: a -> GHC.Types.Bool) (w1 :: ([a], [a])) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 case World.$wtakeWhileInclusive
                        @ a
                        w
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 (ww4, ww5) } }) -}
439495298b8358ac392010cf79860418
  targetExpression :: World.Env -> World.ID -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><S(S),1*U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: World.Env) (w1 :: World.ID) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww1 8#) of wild {
                   GHC.Types.False
                   -> case w of wild1 { GHC.Types.I# y ->
                      case GHC.Classes.modInt#
                             (GHC.Prim.-# (GHC.Prim.-# ww1 8#) y)
                             2# of ww2 {
                        DEFAULT -> GHC.Types.I# 0# 0# -> GHC.Types.I# 1# } }
                   GHC.Types.True -> GHC.Types.I# 1# } }) -}
121b659c2899711c0e86eeea3b96f374
  targetGST :: World.Env -> World.GeneStateTable
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: World.Env) ->
                 case w of ww { GHC.Types.I# ww1 -> World.$wtargetGST ww1 }) -}
e7ee250db89cedbc1910dfe0a81e24c4
  thres :: World.Gene -> World.Thres
  RecSel Left World.Gene
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: World.Gene) ->
                 case ds of wild { World.Gene ds1 ds2 ds3 -> ds2 }) -}
e02c73c548b1ed7e1dc3c2ab243d8f1a
  updateAgent :: World.Agent -> World.Agent
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: World.Agent) ->
                 case ds of wild {
                   World.Agent chroms gst
                   -> case gst of gst1 { DEFAULT ->
                      let {
                        newGenome :: World.Genome
                        = GHC.Base.map
                            @ [World.Locus]
                            @ [World.Locus]
                            (World.updateChrom World.$fShowAgent2 gst1)
                            chroms
                      } in
                      case World.makeGst
                             (Data.Map.Base.Tip @ World.ID @ World.GeneState)
                             (World.reduceToGenes newGenome) of wild1 {
                        Data.Map.Base.Bin dt ds1 ds2 ds3 ds4
                        -> case dt of wild2 {
                             DEFAULT -> World.NoAgent 20# -> World.Agent newGenome wild1 }
                        Data.Map.Base.Tip -> World.NoAgent } }
                   World.NoAgent -> World.NoAgent }) -}
d63a50db4ad4ee3dbcbf3382f5a93c22
  updateChrom ::
    GHC.Types.Int
    -> World.GeneStateTable -> World.Chromosome -> World.Chromosome
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(U)><L,U><S,1*U> -}
f6cf6d2a691eba430b17abf623154cf6
  updateGenome ::
    World.GeneStateTable -> World.Genome -> World.Genome
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: World.GeneStateTable) (eta :: [World.Chromosome]) ->
                 GHC.Base.build
                   @ [World.Locus]
                   (\ @ b1
                      (c :: [World.Locus] -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ [World.Locus]
                      @ b1
                      (GHC.Base.mapFB
                         @ [World.Locus]
                         @ b1
                         @ [World.Locus]
                         c
                         (World.updateChrom World.$fShowAgent2 x))
                      n
                      eta)) -}
dc9ac6acc7e505bcdc17f2b4dd62925b
  updateLoc ::
    GHC.Types.Int
    -> World.GeneStateTable
    -> World.Locus
    -> (GHC.Types.Int, World.Locus)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(U)><L,1*U><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: World.GeneStateTable)
                   (w2 :: World.Locus) ->
                 case w2 of wild {
                   World.Transposon -> (w, World.Transposon)
                   World.CGene gen
                   -> case gen of wild1 { World.Gene i t st ->
                      (World.$fShowAgent2,
                       World.CGene
                         (World.Gene
                            i
                            t
                            (case w of wild2 { GHC.Types.I# x ->
                             case t of wild3 { GHC.Types.I# y ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.<# x y) of wild4 {
                               GHC.Types.False
                               -> case GHC.Prim.tagToEnum#
                                         @ GHC.Types.Bool
                                         (GHC.Prim.==# x y) of wild5 {
                                    GHC.Types.False -> World.updateLoc1 GHC.Types.True -> st }
                               GHC.Types.True -> World.$fShowAgent2 } } }))) }
                   World.CTfbs ds
                   -> case ds of wild1 { World.Tfbs i w3 ->
                      case i of ww { GHC.Types.I# ww1 ->
                      case World.$wpoly_go1 @ GHC.Types.Int ww1 w1 of wild2 {
                        GHC.Base.Nothing -> (World.$fShowAgent2, wild)
                        GHC.Base.Just a1
                        -> case a1 of wild3 { GHC.Types.I# x ->
                           case x of wild4 {
                             DEFAULT -> (World.$fShowAgent2, wild)
                             1# -> (GHC.Num.$fNumInt_$c+ w w3, wild) } } } } } }) -}
e5b9ed66988f767f7bf6c5cd25f50efc
  updateLoc1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
instance GHC.Classes.Eq [World.Agent] = World.$fEqAgent
instance GHC.Classes.Eq [World.Gene] = World.$fEqGene
instance GHC.Classes.Eq [World.Locus] = World.$fEqLocus
instance GHC.Classes.Eq [World.Tfbs] = World.$fEqTfbs
instance GHC.Classes.Ord [World.Agent] = World.$fOrdAgent
instance GHC.Classes.Ord [World.Gene] = World.$fOrdGene
instance GHC.Classes.Ord [World.Locus] = World.$fOrdLocus
instance GHC.Classes.Ord [World.Tfbs] = World.$fOrdTfbs
instance GHC.Read.Read [World.Agent] = World.$fReadAgent
instance GHC.Read.Read [World.Gene] = World.$fReadGene
instance GHC.Read.Read [World.Locus] = World.$fReadLocus
instance GHC.Read.Read [World.Tfbs] = World.$fReadTfbs
instance GHC.Show.Show [World.Agent] = World.$fShowAgent
instance GHC.Show.Show [World.Gene] = World.$fShowGene
instance GHC.Show.Show [World.Locus] = World.$fShowLocus
instance GHC.Show.Show [World.Tfbs] = World.$fShowTfbs
"SPEC hammDist" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                           (GHC.Types.Int, GHC.Types.Int))
  World.hammDist @ (GHC.Types.Int, GHC.Types.Int) $dEq
  = World.hammDist_$shammDist
"SPEC/World $fEq[] @ Locus" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                       World.Locus)
  GHC.Classes.$fEq[] @ World.Locus $dEq = World.$fEqAgent_$s$fEq[]
"SPEC/World $fEq[]_$c/= @ Locus" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                            World.Locus)
  GHC.Classes.$fEq[]_$c/= @ World.Locus $dEq
  = World.$fEqAgent_$s$fEq[]_$c/=
"SPEC/World $fOrd[] @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                         World.Locus)
  GHC.Classes.$fOrd[] @ World.Locus $dOrd
  = World.$fOrdAgent_$s$fOrd[]
"SPEC/World $fOrd[]_$c< @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                             World.Locus)
  GHC.Classes.$fOrd[]_$c< @ World.Locus $dOrd
  = World.$fOrdAgent_$s$fOrd[]_$c<
"SPEC/World $fOrd[]_$c<= @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                              World.Locus)
  GHC.Classes.$fOrd[]_$c<= @ World.Locus $dOrd
  = World.$fOrdAgent_$s$fOrd[]_$c<=
"SPEC/World $fOrd[]_$c> @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                             World.Locus)
  GHC.Classes.$fOrd[]_$c> @ World.Locus $dOrd
  = World.$fOrdAgent_$s$fOrd[]_$c>
"SPEC/World $fOrd[]_$c>= @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                              World.Locus)
  GHC.Classes.$fOrd[]_$c>= @ World.Locus $dOrd
  = World.$fOrdAgent_$s$fOrd[]_$c>=
"SPEC/World $fOrd[]_$cmax @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                               World.Locus)
  GHC.Classes.$fOrd[]_$cmax @ World.Locus $dOrd
  = World.$fOrdAgent_$s$fOrd[]_$cmax
"SPEC/World $fOrd[]_$cmin @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                               World.Locus)
  GHC.Classes.$fOrd[]_$cmin @ World.Locus $dOrd
  = World.$fOrdAgent_$s$fOrd[]_$cmin
"SPEC/World $fOrd[]_$cp1Ord @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                 World.Locus)
  GHC.Classes.$fOrd[]_$cp1Ord @ World.Locus $dOrd
  = World.$fOrdAgent_$s$fOrd[]_$cp1Ord
"SPEC/World fromList @ ID _" [ALWAYS] forall @ a
                                             ($dOrd :: GHC.Classes.Ord World.ID)
  Data.Map.Base.fromList @ GHC.Types.Int @ a $dOrd
  = World.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

