
==================== FINAL INTERFACE ====================
2017-04-28 14:38:38.050297 UTC

interface Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types 8002
  interface hash: a6c0f9aba9de45111c8bdc46adc65664
  ABI hash: 344386ad26f015f50945c7403febc394
  export-list hash: 1903460ec2f3fff4e3f5c7bd897ec01f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 5a28ad60f874e9816d7f396ec6a10ddb
  sig of: Nothing
  used TH splices: False
  where
exports:
  Types.Agent{Types.Agent Types.NoAgent geneStateTable genome}
  Types.Agents
  Types.Chromosome
  Types.Env
  Types.Gene{Types.Gene genSt geneID thres}
  Types.GeneState{Types.GS}
  Types.GeneStateTable
  Types.GeneType{Types.iD}
  Types.Genome
  Types.ID{Types.ID}
  Types.Locus{Types.CGene Types.CTfbs Types.Transposon}
  Types.Tfbs{Types.Tfbs tfbsID wt}
  Types.Thres{Types.Thres}
  Types.Weight{Types.Weight}
  Types.World{Types.World agents env}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  array-0.5.1.1@array-0.5.1.1:Data.Array.IArray 606f8bb830eb2a88c29c91f27c77f304
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:GHC.Arr dbae05e7a9c0aba55cc706ecf0406507
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Enum 3811281f7b5f26da514529cf3ed44009
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Read b6821365d2d5fa2155c9e910160e7f57
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Text.ParserCombinators.ReadPrec 5a182a8d6deb0f7d67aed5fab08a5cc0
import  -/  base-4.9.1.0:Text.Read.Lex 16199fac3c6c2d64cc7c268f3c0d2269
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 20d4ffbee41965d03d6a989425473dc4
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base d432f6875983131473086af8cb290590
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 318df275d77dcdb18e0006d8d7870c2a
03b02abd1f9f0b17f85b54269576f890
  $fBoundedGeneState :: GHC.Enum.Bounded Types.GeneState
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.GeneState
                  Types.$fBoundedGeneState_$cminBound
                  Types.$fBoundedGeneState_$cmaxBound -}
03b02abd1f9f0b17f85b54269576f890
  $fBoundedGeneState_$cmaxBound :: Types.GeneState
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                GHC.Types.True `cast` (Sym (Types.N:GeneState[0])) -}
03b02abd1f9f0b17f85b54269576f890
  $fBoundedGeneState_$cminBound :: Types.GeneState
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                GHC.Types.False `cast` (Sym (Types.N:GeneState[0])) -}
817eaa265a1866a0c3a20a6482f764fc
  $fBoundedID :: GHC.Enum.Bounded Types.ID
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.ID
                  Types.$fBoundedID_$cminBound
                  Types.$fBoundedID_$cmaxBound -}
817eaa265a1866a0c3a20a6482f764fc
  $fBoundedID_$cmaxBound :: Types.ID
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Base.maxInt `cast` (Sym (Types.N:ID[0])) -}
817eaa265a1866a0c3a20a6482f764fc
  $fBoundedID_$cminBound :: Types.ID
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Base.minInt `cast` (Sym (Types.N:ID[0])) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fBoundedThres :: GHC.Enum.Bounded Types.Thres
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Thres
                  Types.$fBoundedThres_$cminBound
                  Types.$fBoundedThres_$cmaxBound -}
b4d1ca11eda71c74c7df7a27380685f5
  $fBoundedThres_$cmaxBound :: Types.Thres
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Base.maxInt `cast` (Sym (Types.N:Thres[0])) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fBoundedThres_$cminBound :: Types.Thres
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Base.minInt `cast` (Sym (Types.N:Thres[0])) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fBoundedWeight :: GHC.Enum.Bounded Types.Weight
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Weight
                  Types.$fBoundedWeight_$cminBound
                  Types.$fBoundedWeight_$cmaxBound -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fBoundedWeight_$cmaxBound :: Types.Weight
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Base.maxInt `cast` (Sym (Types.N:Weight[0])) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fBoundedWeight_$cminBound :: Types.Weight
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Base.minInt `cast` (Sym (Types.N:Weight[0])) -}
03b02abd1f9f0b17f85b54269576f890
  $fEnumGeneState :: GHC.Enum.Enum Types.GeneState
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.GeneState
                  Types.$fEnumGeneState_$csucc
                  Types.$fEnumGeneState_$cpred
                  Types.$fEnumGeneState_$ctoEnum
                  Types.$fEnumGeneState_$cfromEnum
                  Types.$fEnumGeneState_$cenumFrom
                  Types.$fEnumGeneState_$cenumFromThen
                  Types.$fEnumGeneState_$cenumFromTo
                  Types.$fEnumGeneState_$cenumFromThenTo -}
03b02abd1f9f0b17f85b54269576f890
  $fEnumGeneState_$cenumFrom :: Types.GeneState -> [Types.GeneState]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumBool_$cenumFrom
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R ([Sym (Types.N:GeneState[0])])_R) -}
03b02abd1f9f0b17f85b54269576f890
  $fEnumGeneState_$cenumFromThen ::
    Types.GeneState -> Types.GeneState -> [Types.GeneState]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumBool_$sboundedEnumFromThen
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R ([Sym (Types.N:GeneState[0])])_R) -}
03b02abd1f9f0b17f85b54269576f890
  $fEnumGeneState_$cenumFromThenTo ::
    Types.GeneState
    -> Types.GeneState -> Types.GeneState -> [Types.GeneState]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumBool_$cenumFromThenTo
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R ([Sym (Types.N:GeneState[0])])_R) -}
03b02abd1f9f0b17f85b54269576f890
  $fEnumGeneState_$cenumFromTo ::
    Types.GeneState -> Types.GeneState -> [Types.GeneState]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumBool_$cenumFromTo
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R ([Sym (Types.N:GeneState[0])])_R) -}
03b02abd1f9f0b17f85b54269576f890
  $fEnumGeneState_$cfromEnum :: Types.GeneState -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumBool_$cfromEnum
                  `cast`
                (Sym (Types.N:GeneState[0]) ->_R <GHC.Types.Int>_R) -}
03b02abd1f9f0b17f85b54269576f890
  $fEnumGeneState_$cpred :: Types.GeneState -> Types.GeneState
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumBool_$cpred
                  `cast`
                (Sym (Types.N:GeneState[0]) ->_R Sym (Types.N:GeneState[0])) -}
03b02abd1f9f0b17f85b54269576f890
  $fEnumGeneState_$csucc :: Types.GeneState -> Types.GeneState
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumBool_$csucc
                  `cast`
                (Sym (Types.N:GeneState[0]) ->_R Sym (Types.N:GeneState[0])) -}
03b02abd1f9f0b17f85b54269576f890
  $fEnumGeneState_$ctoEnum :: GHC.Types.Int -> Types.GeneState
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumBool_$ctoEnum
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Types.N:GeneState[0])) -}
817eaa265a1866a0c3a20a6482f764fc
  $fEnumID :: GHC.Enum.Enum Types.ID
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.ID
                  Types.$fEnumID_$csucc
                  Types.$fEnumID_$cpred
                  Types.$fEnumID_$ctoEnum
                  Types.$fEnumID_$cfromEnum
                  Types.$fEnumID_$cenumFrom
                  Types.$fEnumID_$cenumFromThen
                  Types.$fEnumID_$cenumFromTo
                  Types.$fEnumID_$cenumFromThenTo -}
817eaa265a1866a0c3a20a6482f764fc
  $fEnumID_$cenumFrom :: Types.ID -> [Types.ID]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumInt_$cenumFrom
                  `cast`
                (Sym (Types.N:ID[0]) ->_R ([Sym (Types.N:ID[0])])_R) -}
817eaa265a1866a0c3a20a6482f764fc
  $fEnumID_$cenumFromThen :: Types.ID -> Types.ID -> [Types.ID]
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumInt_$cenumFromThen
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R ([Sym (Types.N:ID[0])])_R) -}
817eaa265a1866a0c3a20a6482f764fc
  $fEnumID_$cenumFromThenTo ::
    Types.ID -> Types.ID -> Types.ID -> [Types.ID]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumInt_$cenumFromThenTo
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R ([Sym (Types.N:ID[0])])_R) -}
817eaa265a1866a0c3a20a6482f764fc
  $fEnumID_$cenumFromTo :: Types.ID -> Types.ID -> [Types.ID]
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumInt_$cenumFromTo
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R ([Sym (Types.N:ID[0])])_R) -}
817eaa265a1866a0c3a20a6482f764fc
  $fEnumID_$cfromEnum :: Types.ID -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumInt_$cfromEnum
                  `cast`
                (Sym (Types.N:ID[0]) ->_R <GHC.Types.Int>_R) -}
817eaa265a1866a0c3a20a6482f764fc
  $fEnumID_$cpred :: Types.ID -> Types.ID
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumInt_$cpred
                  `cast`
                (Sym (Types.N:ID[0]) ->_R Sym (Types.N:ID[0])) -}
817eaa265a1866a0c3a20a6482f764fc
  $fEnumID_$csucc :: Types.ID -> Types.ID
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumInt_$csucc
                  `cast`
                (Sym (Types.N:ID[0]) ->_R Sym (Types.N:ID[0])) -}
817eaa265a1866a0c3a20a6482f764fc
  $fEnumID_$ctoEnum :: GHC.Types.Int -> Types.ID
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumInt_$cfromEnum
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Types.N:ID[0])) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fEnumThres :: GHC.Enum.Enum Types.Thres
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Thres
                  Types.$fEnumThres_$csucc
                  Types.$fEnumThres_$cpred
                  Types.$fEnumThres_$ctoEnum
                  Types.$fEnumThres_$cfromEnum
                  Types.$fEnumThres_$cenumFrom
                  Types.$fEnumThres_$cenumFromThen
                  Types.$fEnumThres_$cenumFromTo
                  Types.$fEnumThres_$cenumFromThenTo -}
b4d1ca11eda71c74c7df7a27380685f5
  $fEnumThres_$cenumFrom :: Types.Thres -> [Types.Thres]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumInt_$cenumFrom
                  `cast`
                (Sym (Types.N:Thres[0]) ->_R ([Sym (Types.N:Thres[0])])_R) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fEnumThres_$cenumFromThen ::
    Types.Thres -> Types.Thres -> [Types.Thres]
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumInt_$cenumFromThen
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R ([Sym (Types.N:Thres[0])])_R) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fEnumThres_$cenumFromThenTo ::
    Types.Thres -> Types.Thres -> Types.Thres -> [Types.Thres]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumInt_$cenumFromThenTo
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R ([Sym (Types.N:Thres[0])])_R) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fEnumThres_$cenumFromTo ::
    Types.Thres -> Types.Thres -> [Types.Thres]
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumInt_$cenumFromTo
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R ([Sym (Types.N:Thres[0])])_R) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fEnumThres_$cfromEnum :: Types.Thres -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumInt_$cfromEnum
                  `cast`
                (Sym (Types.N:Thres[0]) ->_R <GHC.Types.Int>_R) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fEnumThres_$cpred :: Types.Thres -> Types.Thres
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumInt_$cpred
                  `cast`
                (Sym (Types.N:Thres[0]) ->_R Sym (Types.N:Thres[0])) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fEnumThres_$csucc :: Types.Thres -> Types.Thres
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumInt_$csucc
                  `cast`
                (Sym (Types.N:Thres[0]) ->_R Sym (Types.N:Thres[0])) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fEnumThres_$ctoEnum :: GHC.Types.Int -> Types.Thres
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumInt_$cfromEnum
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Types.N:Thres[0])) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fEnumWeight :: GHC.Enum.Enum Types.Weight
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Weight
                  Types.$fEnumWeight_$csucc
                  Types.$fEnumWeight_$cpred
                  Types.$fEnumWeight_$ctoEnum
                  Types.$fEnumWeight_$cfromEnum
                  Types.$fEnumWeight_$cenumFrom
                  Types.$fEnumWeight_$cenumFromThen
                  Types.$fEnumWeight_$cenumFromTo
                  Types.$fEnumWeight_$cenumFromThenTo -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fEnumWeight_$cenumFrom :: Types.Weight -> [Types.Weight]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumInt_$cenumFrom
                  `cast`
                (Sym (Types.N:Weight[0]) ->_R ([Sym (Types.N:Weight[0])])_R) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fEnumWeight_$cenumFromThen ::
    Types.Weight -> Types.Weight -> [Types.Weight]
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumInt_$cenumFromThen
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R ([Sym (Types.N:Weight[0])])_R) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fEnumWeight_$cenumFromThenTo ::
    Types.Weight -> Types.Weight -> Types.Weight -> [Types.Weight]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumInt_$cenumFromThenTo
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R ([Sym (Types.N:Weight[0])])_R) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fEnumWeight_$cenumFromTo ::
    Types.Weight -> Types.Weight -> [Types.Weight]
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumInt_$cenumFromTo
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R ([Sym (Types.N:Weight[0])])_R) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fEnumWeight_$cfromEnum :: Types.Weight -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumInt_$cfromEnum
                  `cast`
                (Sym (Types.N:Weight[0]) ->_R <GHC.Types.Int>_R) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fEnumWeight_$cpred :: Types.Weight -> Types.Weight
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumInt_$cpred
                  `cast`
                (Sym (Types.N:Weight[0]) ->_R Sym (Types.N:Weight[0])) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fEnumWeight_$csucc :: Types.Weight -> Types.Weight
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumInt_$csucc
                  `cast`
                (Sym (Types.N:Weight[0]) ->_R Sym (Types.N:Weight[0])) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fEnumWeight_$ctoEnum :: GHC.Types.Int -> Types.Weight
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Enum.$fEnumInt_$cfromEnum
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Types.N:Weight[0])) -}
c366e34cef18e343b1b97128d4a7d6c2
  $fEqAgent :: GHC.Classes.Eq Types.Agent
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Agent Types.$fEqAgent_$c== Types.$fEqAgent_$c/= -}
44d2b718259d965e4abc47386dfb2a8b
  $fEqAgent1 ::
    Data.Map.Base.Map Types.ID Types.GeneState
    -> Data.Map.Base.Map Types.ID Types.GeneState -> GHC.Types.Bool
  {- Unfolding: (Data.Map.Base.$fEqMap_$c==
                   @ Types.ID
                   @ Types.GeneState
                   Types.$fEqID
                   Types.$fEqGeneState) -}
c366e34cef18e343b1b97128d4a7d6c2
  $fEqAgent_$c/= :: Types.Agent -> Types.Agent -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Types.Agent) (b :: Types.Agent) ->
                 case Types.$fEqAgent_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
c366e34cef18e343b1b97128d4a7d6c2
  $fEqAgent_$c== :: Types.Agent -> Types.Agent -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.Agent) (ds1 :: Types.Agent) ->
                 case ds of wild {
                   Types.Agent a1 a2
                   -> case ds1 of wild1 {
                        Types.Agent b1 b2
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ [Types.Locus]
                                  Types.$fEqAgent_$s$fEq[]
                                  a1
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> Types.$fEqAgent1 a2 b2 }
                        Types.NoAgent -> GHC.Types.False }
                   Types.NoAgent
                   -> case ds1 of wild1 {
                        Types.Agent ipv ipv1 -> GHC.Types.False
                        Types.NoAgent -> GHC.Types.True } }) -}
0f3e72d2e817d44c13b31283768e0b74
  $fEqAgent_$dEq :: GHC.Classes.Eq Types.Locus
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Types.$fEqLocus -}
e720a8fdde3a372bdc7776c88fb77347
  $fEqAgent_$s$fEq[] :: GHC.Classes.Eq [Types.Locus]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Types.Locus]
                  (GHC.Classes.$fEq[]_$c== @ Types.Locus Types.$fEqAgent_$dEq)
                  Types.$fEqAgent_$s$fEq[]_$c/= -}
e4306220d26d0228c2cac14f729b3a27
  $fEqAgent_$s$fEq[]_$c/= ::
    [Types.Locus] -> [Types.Locus] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: [Types.Locus]) (y :: [Types.Locus]) ->
                 GHC.Classes.not
                   (GHC.Classes.$fEq[]_$c==
                      @ Types.Locus
                      Types.$fEqAgent_$dEq
                      x
                      y)) -}
855bc26dbd005a2f673e8ef7757be5ba
  $fEqGene :: GHC.Classes.Eq Types.Gene
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Gene Types.$fEqLocus_$c==2 Types.$fEqGene_$c/= -}
03b02abd1f9f0b17f85b54269576f890
  $fEqGeneState :: GHC.Classes.Eq Types.GeneState
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.GeneState
                  Types.$fEqGeneState_$c==
                  Types.$fEqGeneState_$c/= -}
03b02abd1f9f0b17f85b54269576f890
  $fEqGeneState_$c/= ::
    Types.GeneState -> Types.GeneState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEqBool_$c/=
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R <GHC.Types.Bool>_R) -}
03b02abd1f9f0b17f85b54269576f890
  $fEqGeneState_$c== ::
    Types.GeneState -> Types.GeneState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEqBool_$c==
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R <GHC.Types.Bool>_R) -}
855bc26dbd005a2f673e8ef7757be5ba
  $fEqGene_$c/= :: Types.Gene -> Types.Gene -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U)><S(S(S)LL),1*U(1*U(U),1*U(U),1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Types.Gene) (b :: Types.Gene) ->
                 case Types.$fEqLocus_$c==2 a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
817eaa265a1866a0c3a20a6482f764fc
  $fEqID :: GHC.Classes.Eq Types.ID
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:. @ Types.ID Types.$fEqID_$c== Types.$fEqID_$c/= -}
817eaa265a1866a0c3a20a6482f764fc
  $fEqID_$c/= :: Types.ID -> Types.ID -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.neInt
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R <GHC.Types.Bool>_R) -}
817eaa265a1866a0c3a20a6482f764fc
  $fEqID_$c== :: Types.ID -> Types.ID -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.eqInt
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R <GHC.Types.Bool>_R) -}
07657b88e6375bd6d708a4d154921905
  $fEqLocus :: GHC.Classes.Eq Types.Locus
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Locus Types.$fEqLocus_$c== Types.$fEqLocus_$c/= -}
07657b88e6375bd6d708a4d154921905
  $fEqLocus_$c/= :: Types.Locus -> Types.Locus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Locus) (b :: Types.Locus) ->
                 case a of wild {
                   Types.Transposon
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Types.Transposon -> GHC.Types.False }
                   Types.CGene a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Types.CGene b1
                        -> case a1 of ww { Types.Gene ww1 ww2 ww3 ->
                           case ww1 `cast` (Types.N:ID[0]) of ww4 { GHC.Types.I# ww5 ->
                           case b1 of ww6 { Types.Gene ww7 ww8 ww9 ->
                           case ww7 `cast` (Types.N:ID[0]) of ww10 { GHC.Types.I# ww11 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# ww5 ww11) of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case ww2 `cast` (Types.N:Thres[0]) of wild3 { GHC.Types.I# x ->
                                case ww8 `cast` (Types.N:Thres[0]) of wild4 { GHC.Types.I# y ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x y) of wild5 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True
                                  -> case ww3 `cast` (Types.N:GeneState[0]) of wild6 {
                                       GHC.Types.False -> ww9 `cast` (Types.N:GeneState[0])
                                       GHC.Types.True
                                       -> case ww9 `cast` (Types.N:GeneState[0]) of wild7 {
                                            GHC.Types.False -> GHC.Types.True
                                            GHC.Types.True -> GHC.Types.False } } } } } } } } } } }
                   Types.CTfbs a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Types.CTfbs b1
                        -> case a1 of wild2 { Types.Tfbs a2 a3 ->
                           case b1 of wild3 { Types.Tfbs b2 b3 ->
                           case a2 `cast` (Types.N:ID[0]) of wild4 { GHC.Types.I# x ->
                           case b2 `cast` (Types.N:ID[0]) of wild5 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x y) of wild6 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case a3 `cast` (Types.N:Weight[0]) of wild7 { GHC.Types.I# x1 ->
                                case b3 `cast` (Types.N:Weight[0]) of wild8 { GHC.Types.I# y1 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x1 y1) of wild9 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } } } } } } } }) -}
07657b88e6375bd6d708a4d154921905
  $fEqLocus_$c== :: Types.Locus -> Types.Locus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.Locus) (ds1 :: Types.Locus) ->
                 case ds of wild {
                   Types.Transposon
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.Transposon -> GHC.Types.True }
                   Types.CGene a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.CGene b1 -> Types.$fEqLocus_$c==2 a1 b1 }
                   Types.CTfbs a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.CTfbs b1 -> Types.$fEqLocus_$c==1 a1 b1 } }) -}
31a1ab223f703ab4c97341c9dd6d8d8e
  $fEqLocus_$c==1 :: Types.Tfbs -> Types.Tfbs -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Tfbs) (w1 :: Types.Tfbs) ->
                 case w of ww { Types.Tfbs ww1 ww2 ->
                 case ww1 `cast` (Types.N:ID[0]) of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Types.Tfbs ww6 ww7 ->
                 case ww6 `cast` (Types.N:ID[0]) of ww8 { GHC.Types.I# ww9 ->
                 Types.$w$c== ww4 ww2 ww9 ww7 } } } }) -}
855bc26dbd005a2f673e8ef7757be5ba
  $fEqLocus_$c==2 :: Types.Gene -> Types.Gene -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U)><S(S(S)LL),1*U(1*U(U),1*U(U),1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Gene) (w1 :: Types.Gene) ->
                 case w of ww { Types.Gene ww1 ww2 ww3 ->
                 case ww1 `cast` (Types.N:ID[0]) of ww4 { GHC.Types.I# ww5 ->
                 case w1 of ww6 { Types.Gene ww7 ww8 ww9 ->
                 case ww7 `cast` (Types.N:ID[0]) of ww10 { GHC.Types.I# ww11 ->
                 Types.$w$c==1 ww5 ww2 ww3 ww11 ww8 ww9 } } } }) -}
31a1ab223f703ab4c97341c9dd6d8d8e
  $fEqTfbs :: GHC.Classes.Eq Types.Tfbs
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Tfbs Types.$fEqLocus_$c==1 Types.$fEqTfbs_$c/= -}
31a1ab223f703ab4c97341c9dd6d8d8e
  $fEqTfbs_$c/= :: Types.Tfbs -> Types.Tfbs -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Tfbs) (w1 :: Types.Tfbs) ->
                 case w of ww { Types.Tfbs ww1 ww2 ->
                 case ww1 `cast` (Types.N:ID[0]) of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Types.Tfbs ww6 ww7 ->
                 case ww6 `cast` (Types.N:ID[0]) of ww8 { GHC.Types.I# ww9 ->
                 Types.$w$c/= ww4 ww2 ww9 ww7 } } } }) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fEqThres :: GHC.Classes.Eq Types.Thres
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Thres Types.$fEqThres_$c== Types.$fEqThres_$c/= -}
b4d1ca11eda71c74c7df7a27380685f5
  $fEqThres_$c/= :: Types.Thres -> Types.Thres -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.neInt
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R <GHC.Types.Bool>_R) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fEqThres_$c== :: Types.Thres -> Types.Thres -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.eqInt
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R <GHC.Types.Bool>_R) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fEqWeight :: GHC.Classes.Eq Types.Weight
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Weight Types.$fEqWeight_$c== Types.$fEqWeight_$c/= -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fEqWeight_$c/= :: Types.Weight -> Types.Weight -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.neInt
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R <GHC.Types.Bool>_R) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fEqWeight_$c== :: Types.Weight -> Types.Weight -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.eqInt
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R <GHC.Types.Bool>_R) -}
f6f7accb35473862d75b702a0145c137
  $fGeneTypeGene :: Types.GeneType Types.Gene
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U(U),A,A)>m,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Types.geneID `cast` (Sym (Types.N:GeneType[0] <Types.Gene>_N)) -}
f6f7accb35473862d75b702a0145c137
  $fGeneTypeTfbs :: Types.GeneType Types.Tfbs
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U),A)>m,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Types.tfbsID `cast` (Sym (Types.N:GeneType[0] <Types.Tfbs>_N)) -}
817eaa265a1866a0c3a20a6482f764fc
  $fIntegralID :: GHC.Real.Integral Types.ID
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.ID
                  Types.$fRealID
                  Types.$fEnumID
                  Types.$fIntegralID_$cquot
                  Types.$fIntegralID_$crem
                  Types.$fIntegralID_$cdiv
                  Types.$fIntegralID_$cmod
                  Types.$fIntegralID_$cquotRem
                  Types.$fIntegralID_$cdivMod
                  Types.$fIntegralID_$ctoInteger -}
817eaa265a1866a0c3a20a6482f764fc
  $fIntegralID_$cdiv :: Types.ID -> Types.ID -> Types.ID
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Real.$fIntegralInt_$cdiv
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])) -}
817eaa265a1866a0c3a20a6482f764fc
  $fIntegralID_$cdivMod ::
    Types.ID -> Types.ID -> (Types.ID, Types.ID)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Real.$fIntegralInt_$cdivMod
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R ((,) (Sym (Types.N:ID[0])) (Sym (Types.N:ID[0])))_R) -}
817eaa265a1866a0c3a20a6482f764fc
  $fIntegralID_$cmod :: Types.ID -> Types.ID -> Types.ID
  {- Arity: 2, Strictness: <L,1*U(U)><S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Real.$fIntegralInt_$cmod
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])) -}
817eaa265a1866a0c3a20a6482f764fc
  $fIntegralID_$cquot :: Types.ID -> Types.ID -> Types.ID
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Real.$fIntegralInt_$cquot
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])) -}
817eaa265a1866a0c3a20a6482f764fc
  $fIntegralID_$cquotRem ::
    Types.ID -> Types.ID -> (Types.ID, Types.ID)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Real.$fIntegralInt_$cquotRem
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R ((,) (Sym (Types.N:ID[0])) (Sym (Types.N:ID[0])))_R) -}
817eaa265a1866a0c3a20a6482f764fc
  $fIntegralID_$crem :: Types.ID -> Types.ID -> Types.ID
  {- Arity: 2, Strictness: <L,1*U(U)><S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Real.$fIntegralInt_$crem
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])) -}
817eaa265a1866a0c3a20a6482f764fc
  $fIntegralID_$ctoInteger :: Types.ID -> GHC.Integer.Type.Integer
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m1,
     Unfolding: InlineRule (0, True, True)
                GHC.Real.$fIntegralInt_$ctoInteger
                  `cast`
                (Sym (Types.N:ID[0]) ->_R <GHC.Integer.Type.Integer>_R) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fIntegralThres :: GHC.Real.Integral Types.Thres
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Thres
                  Types.$fRealThres
                  Types.$fEnumThres
                  Types.$fIntegralThres_$cquot
                  Types.$fIntegralThres_$crem
                  Types.$fIntegralThres_$cdiv
                  Types.$fIntegralThres_$cmod
                  Types.$fIntegralThres_$cquotRem
                  Types.$fIntegralThres_$cdivMod
                  Types.$fIntegralThres_$ctoInteger -}
b4d1ca11eda71c74c7df7a27380685f5
  $fIntegralThres_$cdiv :: Types.Thres -> Types.Thres -> Types.Thres
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Real.$fIntegralInt_$cdiv
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fIntegralThres_$cdivMod ::
    Types.Thres -> Types.Thres -> (Types.Thres, Types.Thres)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Real.$fIntegralInt_$cdivMod
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R ((,) (Sym (Types.N:Thres[0])) (Sym (Types.N:Thres[0])))_R) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fIntegralThres_$cmod :: Types.Thres -> Types.Thres -> Types.Thres
  {- Arity: 2, Strictness: <L,1*U(U)><S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Real.$fIntegralInt_$cmod
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fIntegralThres_$cquot :: Types.Thres -> Types.Thres -> Types.Thres
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Real.$fIntegralInt_$cquot
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fIntegralThres_$cquotRem ::
    Types.Thres -> Types.Thres -> (Types.Thres, Types.Thres)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Real.$fIntegralInt_$cquotRem
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R ((,) (Sym (Types.N:Thres[0])) (Sym (Types.N:Thres[0])))_R) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fIntegralThres_$crem :: Types.Thres -> Types.Thres -> Types.Thres
  {- Arity: 2, Strictness: <L,1*U(U)><S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Real.$fIntegralInt_$crem
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fIntegralThres_$ctoInteger ::
    Types.Thres -> GHC.Integer.Type.Integer
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m1,
     Unfolding: InlineRule (0, True, True)
                GHC.Real.$fIntegralInt_$ctoInteger
                  `cast`
                (Sym (Types.N:Thres[0]) ->_R <GHC.Integer.Type.Integer>_R) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fIntegralWeight :: GHC.Real.Integral Types.Weight
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Weight
                  Types.$fRealWeight
                  Types.$fEnumWeight
                  Types.$fIntegralWeight_$cquot
                  Types.$fIntegralWeight_$crem
                  Types.$fIntegralWeight_$cdiv
                  Types.$fIntegralWeight_$cmod
                  Types.$fIntegralWeight_$cquotRem
                  Types.$fIntegralWeight_$cdivMod
                  Types.$fIntegralWeight_$ctoInteger -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fIntegralWeight_$cdiv ::
    Types.Weight -> Types.Weight -> Types.Weight
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Real.$fIntegralInt_$cdiv
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fIntegralWeight_$cdivMod ::
    Types.Weight -> Types.Weight -> (Types.Weight, Types.Weight)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Real.$fIntegralInt_$cdivMod
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R ((,)
                         (Sym (Types.N:Weight[0])) (Sym (Types.N:Weight[0])))_R) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fIntegralWeight_$cmod ::
    Types.Weight -> Types.Weight -> Types.Weight
  {- Arity: 2, Strictness: <L,1*U(U)><S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Real.$fIntegralInt_$cmod
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fIntegralWeight_$cquot ::
    Types.Weight -> Types.Weight -> Types.Weight
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Real.$fIntegralInt_$cquot
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fIntegralWeight_$cquotRem ::
    Types.Weight -> Types.Weight -> (Types.Weight, Types.Weight)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Real.$fIntegralInt_$cquotRem
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R ((,)
                         (Sym (Types.N:Weight[0])) (Sym (Types.N:Weight[0])))_R) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fIntegralWeight_$crem ::
    Types.Weight -> Types.Weight -> Types.Weight
  {- Arity: 2, Strictness: <L,1*U(U)><S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Real.$fIntegralInt_$crem
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fIntegralWeight_$ctoInteger ::
    Types.Weight -> GHC.Integer.Type.Integer
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m1,
     Unfolding: InlineRule (0, True, True)
                GHC.Real.$fIntegralInt_$ctoInteger
                  `cast`
                (Sym (Types.N:Weight[0]) ->_R <GHC.Integer.Type.Integer>_R) -}
03b02abd1f9f0b17f85b54269576f890
  $fNumGeneState :: GHC.Num.Num Types.GeneState
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.GeneState
                  Types.$fNumGeneState_$c+
                  Types.$fNumGeneState_$c-
                  Types.$fNumGeneState_$c*
                  Types.$fNumGeneState_$cnegate
                  (GHC.Base.id @ Types.GeneState)
                  (GHC.Base.id @ Types.GeneState)
                  Types.$fNumGeneState_$cfromInteger -}
e8a02b7bdd6c36d7005783d9a03ae81c
  $fNumGeneState1 :: GHC.Integer.Type.Integer -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.gtInteger#
                        a
                        Types.$fNumGeneState_dt of wild { DEFAULT ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool wild }) -}
03b02abd1f9f0b17f85b54269576f890
  $fNumGeneState_$c* ::
    Types.GeneState -> Types.GeneState -> Types.GeneState
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Types.GeneState) (ds1 :: Types.GeneState) ->
                 case ds `cast` (Types.N:GeneState[0]) of wild {
                   GHC.Types.False
                   -> case ds1 `cast` (Types.N:GeneState[0]) of wild1 {
                        GHC.Types.False
                        -> GHC.Types.True `cast` (Sym (Types.N:GeneState[0]))
                        GHC.Types.True
                        -> GHC.Types.False `cast` (Sym (Types.N:GeneState[0])) }
                   GHC.Types.True
                   -> GHC.Types.False `cast` (Sym (Types.N:GeneState[0])) }) -}
03b02abd1f9f0b17f85b54269576f890
  $fNumGeneState_$c+ ::
    Types.GeneState -> Types.GeneState -> Types.GeneState
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.||
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])) -}
03b02abd1f9f0b17f85b54269576f890
  $fNumGeneState_$c- ::
    Types.GeneState -> Types.GeneState -> Types.GeneState
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.GeneState) (y :: Types.GeneState) ->
                 Types.$fNumGeneState_$c+ x (Types.$fNumGeneState_$cnegate y)) -}
03b02abd1f9f0b17f85b54269576f890
  $fNumGeneState_$cfromInteger ::
    GHC.Integer.Type.Integer -> Types.GeneState
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Types.$fNumGeneState1
                  `cast`
                (<GHC.Integer.Type.Integer>_R ->_R Sym (Types.N:GeneState[0])) -}
03b02abd1f9f0b17f85b54269576f890
  $fNumGeneState_$cnegate :: Types.GeneState -> Types.GeneState
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.not
                  `cast`
                (Sym (Types.N:GeneState[0]) ->_R Sym (Types.N:GeneState[0])) -}
69ca9ece8263afdd2acc83600d568cd7
  $fNumGeneState_dt :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
817eaa265a1866a0c3a20a6482f764fc
  $fNumID :: GHC.Num.Num Types.ID
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.ID
                  Types.$fNumID_$c+
                  Types.$fNumID_$c-
                  Types.$fNumID_$c*
                  Types.$fNumID_$cnegate
                  Types.$fNumID_$cabs
                  Types.$fNumID_$csignum
                  Types.$fNumID_$cfromInteger -}
817eaa265a1866a0c3a20a6482f764fc
  $fNumID_$c* :: Types.ID -> Types.ID -> Types.ID
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Num.$fNumInt_$c*
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])) -}
817eaa265a1866a0c3a20a6482f764fc
  $fNumID_$c+ :: Types.ID -> Types.ID -> Types.ID
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Num.$fNumInt_$c+
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])) -}
817eaa265a1866a0c3a20a6482f764fc
  $fNumID_$c- :: Types.ID -> Types.ID -> Types.ID
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Num.$fNumInt_$c-
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])) -}
817eaa265a1866a0c3a20a6482f764fc
  $fNumID_$cabs :: Types.ID -> Types.ID
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Num.$fNumInt_$cabs
                  `cast`
                (Sym (Types.N:ID[0]) ->_R Sym (Types.N:ID[0])) -}
817eaa265a1866a0c3a20a6482f764fc
  $fNumID_$cfromInteger :: GHC.Integer.Type.Integer -> Types.ID
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Num.$fNumInt_$cfromInteger
                  `cast`
                (<GHC.Integer.Type.Integer>_R ->_R Sym (Types.N:ID[0])) -}
817eaa265a1866a0c3a20a6482f764fc
  $fNumID_$cnegate :: Types.ID -> Types.ID
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Num.$fNumInt_$cnegate
                  `cast`
                (Sym (Types.N:ID[0]) ->_R Sym (Types.N:ID[0])) -}
817eaa265a1866a0c3a20a6482f764fc
  $fNumID_$csignum :: Types.ID -> Types.ID
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Num.$fNumInt_$csignum
                  `cast`
                (Sym (Types.N:ID[0]) ->_R Sym (Types.N:ID[0])) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fNumThres :: GHC.Num.Num Types.Thres
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Thres
                  Types.$fNumThres_$c+
                  Types.$fNumThres_$c-
                  Types.$fNumThres_$c*
                  Types.$fNumThres_$cnegate
                  Types.$fNumThres_$cabs
                  Types.$fNumThres_$csignum
                  Types.$fNumThres_$cfromInteger -}
b4d1ca11eda71c74c7df7a27380685f5
  $fNumThres_$c* :: Types.Thres -> Types.Thres -> Types.Thres
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Num.$fNumInt_$c*
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fNumThres_$c+ :: Types.Thres -> Types.Thres -> Types.Thres
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Num.$fNumInt_$c+
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fNumThres_$c- :: Types.Thres -> Types.Thres -> Types.Thres
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Num.$fNumInt_$c-
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fNumThres_$cabs :: Types.Thres -> Types.Thres
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Num.$fNumInt_$cabs
                  `cast`
                (Sym (Types.N:Thres[0]) ->_R Sym (Types.N:Thres[0])) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fNumThres_$cfromInteger :: GHC.Integer.Type.Integer -> Types.Thres
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Num.$fNumInt_$cfromInteger
                  `cast`
                (<GHC.Integer.Type.Integer>_R ->_R Sym (Types.N:Thres[0])) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fNumThres_$cnegate :: Types.Thres -> Types.Thres
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Num.$fNumInt_$cnegate
                  `cast`
                (Sym (Types.N:Thres[0]) ->_R Sym (Types.N:Thres[0])) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fNumThres_$csignum :: Types.Thres -> Types.Thres
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Num.$fNumInt_$csignum
                  `cast`
                (Sym (Types.N:Thres[0]) ->_R Sym (Types.N:Thres[0])) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fNumWeight :: GHC.Num.Num Types.Weight
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Weight
                  Types.$fNumWeight_$c+
                  Types.$fNumWeight_$c-
                  Types.$fNumWeight_$c*
                  Types.$fNumWeight_$cnegate
                  Types.$fNumWeight_$cabs
                  Types.$fNumWeight_$csignum
                  Types.$fNumWeight_$cfromInteger -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fNumWeight_$c* :: Types.Weight -> Types.Weight -> Types.Weight
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Num.$fNumInt_$c*
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fNumWeight_$c+ :: Types.Weight -> Types.Weight -> Types.Weight
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Num.$fNumInt_$c+
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fNumWeight_$c- :: Types.Weight -> Types.Weight -> Types.Weight
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Num.$fNumInt_$c-
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fNumWeight_$cabs :: Types.Weight -> Types.Weight
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Num.$fNumInt_$cabs
                  `cast`
                (Sym (Types.N:Weight[0]) ->_R Sym (Types.N:Weight[0])) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fNumWeight_$cfromInteger ::
    GHC.Integer.Type.Integer -> Types.Weight
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Num.$fNumInt_$cfromInteger
                  `cast`
                (<GHC.Integer.Type.Integer>_R ->_R Sym (Types.N:Weight[0])) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fNumWeight_$cnegate :: Types.Weight -> Types.Weight
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Num.$fNumInt_$cnegate
                  `cast`
                (Sym (Types.N:Weight[0]) ->_R Sym (Types.N:Weight[0])) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fNumWeight_$csignum :: Types.Weight -> Types.Weight
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Num.$fNumInt_$csignum
                  `cast`
                (Sym (Types.N:Weight[0]) ->_R Sym (Types.N:Weight[0])) -}
c366e34cef18e343b1b97128d4a7d6c2
  $fOrdAgent :: GHC.Classes.Ord Types.Agent
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Agent
                  Types.$fEqAgent
                  Types.$fOrdAgent_$ccompare
                  Types.$fOrdAgent_$c<
                  Types.$fOrdAgent_$c<=
                  Types.$fOrdAgent_$c>
                  Types.$fOrdAgent_$c>=
                  Types.$fOrdAgent_$cmax
                  Types.$fOrdAgent_$cmin -}
d45de5cb76c2c4d1214b8540e88c1f34
  $fOrdAgent1 :: GHC.Classes.Ord (Types.ID, Types.GeneState)
  {- Unfolding: (GHC.Classes.$fOrd(,)
                   @ Types.ID
                   @ Types.GeneState
                   Types.$fOrdID
                   Types.$fOrdGeneState) -}
c366e34cef18e343b1b97128d4a7d6c2
  $fOrdAgent_$c< :: Types.Agent -> Types.Agent -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Agent) (b :: Types.Agent) ->
                 case a of wild {
                   Types.Agent a1 a2
                   -> case b of wild1 {
                        Types.Agent b1 b2
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ [Types.Locus]
                                  Types.$fOrdAgent_$s$fOrd[]
                                  a1
                                  b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.True
                             GHC.Types.EQ
                             -> Data.Map.Base.$fOrdMap_$c<
                                  @ Types.ID
                                  @ Types.GeneState
                                  Types.$fOrdID
                                  Types.$fOrdGeneState
                                  a2
                                  b2
                             GHC.Types.GT -> GHC.Types.False }
                        Types.NoAgent -> GHC.Types.True }
                   Types.NoAgent
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
c366e34cef18e343b1b97128d4a7d6c2
  $fOrdAgent_$c<= :: Types.Agent -> Types.Agent -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Agent) (b :: Types.Agent) ->
                 case a of wild {
                   Types.Agent a1 a2
                   -> case b of wild1 {
                        Types.Agent b1 b2
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ [Types.Locus]
                                  Types.$fOrdAgent_$s$fOrd[]
                                  a1
                                  b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.True
                             GHC.Types.EQ
                             -> Data.Map.Base.$fOrdMap_$c<=
                                  @ Types.ID
                                  @ Types.GeneState
                                  Types.$fOrdID
                                  Types.$fOrdGeneState
                                  a2
                                  b2
                             GHC.Types.GT -> GHC.Types.False }
                        Types.NoAgent -> GHC.Types.True }
                   Types.NoAgent
                   -> case b of wild1 {
                        Types.Agent ipv ipv1 -> GHC.Types.False
                        Types.NoAgent -> GHC.Types.True } }) -}
c366e34cef18e343b1b97128d4a7d6c2
  $fOrdAgent_$c> :: Types.Agent -> Types.Agent -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Agent) (b :: Types.Agent) ->
                 case a of wild {
                   Types.Agent a1 a2
                   -> case b of wild1 {
                        Types.Agent b1 b2
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ [Types.Locus]
                                  Types.$fOrdAgent_$s$fOrd[]
                                  a1
                                  b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.False
                             GHC.Types.EQ
                             -> Data.Map.Base.$fOrdMap_$c>
                                  @ Types.ID
                                  @ Types.GeneState
                                  Types.$fOrdID
                                  Types.$fOrdGeneState
                                  a2
                                  b2
                             GHC.Types.GT -> GHC.Types.True }
                        Types.NoAgent -> GHC.Types.False }
                   Types.NoAgent
                   -> case b of wild1 {
                        Types.Agent ipv ipv1 -> GHC.Types.True
                        Types.NoAgent -> GHC.Types.False } }) -}
c366e34cef18e343b1b97128d4a7d6c2
  $fOrdAgent_$c>= :: Types.Agent -> Types.Agent -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Agent) (b :: Types.Agent) ->
                 case a of wild {
                   Types.Agent a1 a2
                   -> case b of wild1 {
                        Types.Agent b1 b2
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ [Types.Locus]
                                  Types.$fOrdAgent_$s$fOrd[]
                                  a1
                                  b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.False
                             GHC.Types.EQ
                             -> Data.Map.Base.$fOrdMap_$c>=
                                  @ Types.ID
                                  @ Types.GeneState
                                  Types.$fOrdID
                                  Types.$fOrdGeneState
                                  a2
                                  b2
                             GHC.Types.GT -> GHC.Types.True }
                        Types.NoAgent -> GHC.Types.False }
                   Types.NoAgent
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
c366e34cef18e343b1b97128d4a7d6c2
  $fOrdAgent_$ccompare ::
    Types.Agent -> Types.Agent -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Agent) (b :: Types.Agent) ->
                 case a of wild {
                   Types.Agent a1 a2
                   -> case b of wild1 {
                        Types.Agent b1 b2
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ [Types.Locus]
                                  Types.$fOrdAgent_$s$fOrd[]
                                  a1
                                  b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.LT
                             GHC.Types.EQ
                             -> GHC.Classes.$fOrd[]_$ccompare
                                  @ (Types.ID, Types.GeneState)
                                  Types.$fOrdAgent1
                                  (Data.Map.Base.toAscList1
                                     @ Types.ID
                                     @ Types.GeneState
                                     (GHC.Types.[] @ (Types.ID, Types.GeneState))
                                     a2)
                                  (Data.Map.Base.toAscList1
                                     @ Types.ID
                                     @ Types.GeneState
                                     (GHC.Types.[] @ (Types.ID, Types.GeneState))
                                     b2)
                             GHC.Types.GT -> GHC.Types.GT }
                        Types.NoAgent -> GHC.Types.LT }
                   Types.NoAgent
                   -> case b of wild1 {
                        Types.Agent ipv ipv1 -> GHC.Types.GT
                        Types.NoAgent -> GHC.Types.EQ } }) -}
c366e34cef18e343b1b97128d4a7d6c2
  $fOrdAgent_$cmax :: Types.Agent -> Types.Agent -> Types.Agent
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Agent) (y :: Types.Agent) ->
                 case Types.$fOrdAgent_$c<= x y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
c366e34cef18e343b1b97128d4a7d6c2
  $fOrdAgent_$cmin :: Types.Agent -> Types.Agent -> Types.Agent
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Agent) (y :: Types.Agent) ->
                 case Types.$fOrdAgent_$c<= x y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
4fd63cec90a9a79921d5d41cac2bcad9
  $fOrdAgent_$s$fOrd[] :: GHC.Classes.Ord [Types.Locus]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Types.Locus]
                  Types.$fOrdAgent_$s$fOrd[]_$cp1Ord
                  (GHC.Classes.$fOrd[]_$ccompare @ Types.Locus Types.$fOrdLocus)
                  Types.$fOrdAgent_$s$fOrd[]_$c<
                  Types.$fOrdAgent_$s$fOrd[]_$c<=
                  Types.$fOrdAgent_$s$fOrd[]_$c>
                  Types.$fOrdAgent_$s$fOrd[]_$c>=
                  Types.$fOrdAgent_$s$fOrd[]_$cmax
                  Types.$fOrdAgent_$s$fOrd[]_$cmin -}
50ae2d316b73d4470380fcd51ca9ae8e
  $fOrdAgent_$s$fOrd[]_$c< ::
    [Types.Locus] -> [Types.Locus] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Types.Locus]) (y :: [Types.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Types.Locus
                        Types.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
2b1578a8525d7b9cd6dd1e01b2620520
  $fOrdAgent_$s$fOrd[]_$c<= ::
    [Types.Locus] -> [Types.Locus] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Types.Locus]) (y :: [Types.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Types.Locus
                        Types.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
426f2c87074a42bc10aca76baf82742a
  $fOrdAgent_$s$fOrd[]_$c> ::
    [Types.Locus] -> [Types.Locus] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Types.Locus]) (y :: [Types.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Types.Locus
                        Types.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
c06c8817a05478390c93e4e1c404a28d
  $fOrdAgent_$s$fOrd[]_$c>= ::
    [Types.Locus] -> [Types.Locus] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Types.Locus]) (y :: [Types.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Types.Locus
                        Types.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
c21c471e50b8c94e0ed41ef03d8ce321
  $fOrdAgent_$s$fOrd[]_$cmax ::
    [Types.Locus] -> [Types.Locus] -> [Types.Locus]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Types.Locus]) (y :: [Types.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Types.Locus
                        Types.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
5108e2b449e9229f3e6d79a4d2c9f3ba
  $fOrdAgent_$s$fOrd[]_$cmin ::
    [Types.Locus] -> [Types.Locus] -> [Types.Locus]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Types.Locus]) (y :: [Types.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Types.Locus
                        Types.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
76a8022842d4dca3a11b5f71bfe7db46
  $fOrdAgent_$s$fOrd[]_$cp1Ord :: GHC.Classes.Eq [Types.Locus]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Types.$fEqAgent_$s$fEq[] -}
855bc26dbd005a2f673e8ef7757be5ba
  $fOrdGene :: GHC.Classes.Ord Types.Gene
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Gene
                  Types.$fEqGene
                  Types.$fOrdLocus_$ccompare
                  Types.$fOrdLocus_$c<2
                  Types.$fOrdLocus_$c<=2
                  Types.$fOrdLocus_$c>2
                  Types.$fOrdLocus_$c>=2
                  Types.$fOrdGene_$cmax
                  Types.$fOrdGene_$cmin -}
03b02abd1f9f0b17f85b54269576f890
  $fOrdGeneState :: GHC.Classes.Ord Types.GeneState
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.GeneState
                  Types.$fEqGeneState
                  Types.$fOrdGeneState_$ccompare
                  Types.$fOrdGeneState_$c<
                  Types.$fOrdGeneState_$c<=
                  Types.$fOrdGeneState_$c>
                  Types.$fOrdGeneState_$c>=
                  Types.$fOrdGeneState_$cmax
                  Types.$fOrdGeneState_$cmin -}
03b02abd1f9f0b17f85b54269576f890
  $fOrdGeneState_$c< ::
    Types.GeneState -> Types.GeneState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fOrdBool_$c<
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R <GHC.Types.Bool>_R) -}
03b02abd1f9f0b17f85b54269576f890
  $fOrdGeneState_$c<= ::
    Types.GeneState -> Types.GeneState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fOrdBool_$c<=
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R <GHC.Types.Bool>_R) -}
03b02abd1f9f0b17f85b54269576f890
  $fOrdGeneState_$c> ::
    Types.GeneState -> Types.GeneState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fOrdBool_$c>
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R <GHC.Types.Bool>_R) -}
03b02abd1f9f0b17f85b54269576f890
  $fOrdGeneState_$c>= ::
    Types.GeneState -> Types.GeneState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fOrdBool_$c>=
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R <GHC.Types.Bool>_R) -}
03b02abd1f9f0b17f85b54269576f890
  $fOrdGeneState_$ccompare ::
    Types.GeneState -> Types.GeneState -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fOrdBool_$ccompare
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R <GHC.Types.Ordering>_R) -}
03b02abd1f9f0b17f85b54269576f890
  $fOrdGeneState_$cmax ::
    Types.GeneState -> Types.GeneState -> Types.GeneState
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fOrdBool_$cmax
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])) -}
03b02abd1f9f0b17f85b54269576f890
  $fOrdGeneState_$cmin ::
    Types.GeneState -> Types.GeneState -> Types.GeneState
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fOrdBool_$cmin
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])) -}
855bc26dbd005a2f673e8ef7757be5ba
  $fOrdGene_$cmax :: Types.Gene -> Types.Gene -> Types.Gene
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),U(U(U),U(U),U)><S(S(S)LL),U(U(U),U(U),U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Gene) (y :: Types.Gene) ->
                 case Types.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
855bc26dbd005a2f673e8ef7757be5ba
  $fOrdGene_$cmin :: Types.Gene -> Types.Gene -> Types.Gene
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),U(U(U),U(U),U)><S(S(S)LL),U(U(U),U(U),U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Gene) (y :: Types.Gene) ->
                 case Types.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
817eaa265a1866a0c3a20a6482f764fc
  $fOrdID :: GHC.Classes.Ord Types.ID
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.ID
                  Types.$fEqID
                  Types.$fOrdID_$ccompare
                  Types.$fOrdID_$c<
                  Types.$fOrdID_$c<=
                  Types.$fOrdID_$c>
                  Types.$fOrdID_$c>=
                  Types.$fOrdID_$cmax
                  Types.$fOrdID_$cmin -}
817eaa265a1866a0c3a20a6482f764fc
  $fOrdID_$c< :: Types.ID -> Types.ID -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.ltInt
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R <GHC.Types.Bool>_R) -}
817eaa265a1866a0c3a20a6482f764fc
  $fOrdID_$c<= :: Types.ID -> Types.ID -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.leInt
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R <GHC.Types.Bool>_R) -}
817eaa265a1866a0c3a20a6482f764fc
  $fOrdID_$c> :: Types.ID -> Types.ID -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.gtInt
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R <GHC.Types.Bool>_R) -}
817eaa265a1866a0c3a20a6482f764fc
  $fOrdID_$c>= :: Types.ID -> Types.ID -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.geInt
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R <GHC.Types.Bool>_R) -}
817eaa265a1866a0c3a20a6482f764fc
  $fOrdID_$ccompare :: Types.ID -> Types.ID -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.compareInt
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R <GHC.Types.Ordering>_R) -}
817eaa265a1866a0c3a20a6482f764fc
  $fOrdID_$cmax :: Types.ID -> Types.ID -> Types.ID
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fOrdInt_$cmax
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])) -}
817eaa265a1866a0c3a20a6482f764fc
  $fOrdID_$cmin :: Types.ID -> Types.ID -> Types.ID
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fOrdInt_$cmin
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])) -}
07657b88e6375bd6d708a4d154921905
  $fOrdLocus :: GHC.Classes.Ord Types.Locus
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Locus
                  Types.$fEqLocus
                  Types.$fOrdLocus_$ccompare1
                  Types.$fOrdLocus_$c<
                  Types.$fOrdLocus_$c<=
                  Types.$fOrdLocus_$c>
                  Types.$fOrdLocus_$c>=
                  Types.$fOrdLocus_$cmax
                  Types.$fOrdLocus_$cmin -}
07657b88e6375bd6d708a4d154921905
  $fOrdLocus_$c< :: Types.Locus -> Types.Locus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Locus) (b :: Types.Locus) ->
                 case a of wild {
                   Types.Transposon
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Types.Transposon -> GHC.Types.False }
                   Types.CGene a1
                   -> case b of wild1 {
                        Types.Transposon -> GHC.Types.False
                        Types.CGene b1 -> Types.$fOrdLocus_$c<2 a1 b1
                        Types.CTfbs ipv -> GHC.Types.True }
                   Types.CTfbs a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.CTfbs b1 -> Types.$fOrdLocus_$c<1 a1 b1 } }) -}
31a1ab223f703ab4c97341c9dd6d8d8e
  $fOrdLocus_$c<1 :: Types.Tfbs -> Types.Tfbs -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Tfbs) (w1 :: Types.Tfbs) ->
                 case w of ww { Types.Tfbs ww1 ww2 ->
                 case ww1 `cast` (Types.N:ID[0]) of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Types.Tfbs ww6 ww7 ->
                 case ww6 `cast` (Types.N:ID[0]) of ww8 { GHC.Types.I# ww9 ->
                 Types.$w$c< ww4 ww2 ww9 ww7 } } } }) -}
855bc26dbd005a2f673e8ef7757be5ba
  $fOrdLocus_$c<2 :: Types.Gene -> Types.Gene -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U)><S(S(S)LL),1*U(1*U(U),1*U(U),1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Gene) (y :: Types.Gene) ->
                 case Types.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
07657b88e6375bd6d708a4d154921905
  $fOrdLocus_$c<= :: Types.Locus -> Types.Locus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Locus) (b :: Types.Locus) ->
                 case a of wild {
                   Types.Transposon -> case b of wild1 { DEFAULT -> GHC.Types.True }
                   Types.CGene a1
                   -> case b of wild1 {
                        Types.Transposon -> GHC.Types.False
                        Types.CGene b1 -> Types.$fOrdLocus_$c<=2 a1 b1
                        Types.CTfbs ipv -> GHC.Types.True }
                   Types.CTfbs a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.CTfbs b1 -> Types.$fOrdLocus_$c<=1 a1 b1 } }) -}
31a1ab223f703ab4c97341c9dd6d8d8e
  $fOrdLocus_$c<=1 :: Types.Tfbs -> Types.Tfbs -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Tfbs) (w1 :: Types.Tfbs) ->
                 case w of ww { Types.Tfbs ww1 ww2 ->
                 case ww1 `cast` (Types.N:ID[0]) of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Types.Tfbs ww6 ww7 ->
                 case ww6 `cast` (Types.N:ID[0]) of ww8 { GHC.Types.I# ww9 ->
                 Types.$w$c<= ww4 ww2 ww9 ww7 } } } }) -}
855bc26dbd005a2f673e8ef7757be5ba
  $fOrdLocus_$c<=2 :: Types.Gene -> Types.Gene -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U)><S(S(S)LL),1*U(1*U(U),1*U(U),1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Gene) (y :: Types.Gene) ->
                 case Types.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
07657b88e6375bd6d708a4d154921905
  $fOrdLocus_$c> :: Types.Locus -> Types.Locus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Locus) (b :: Types.Locus) ->
                 case a of wild {
                   Types.Transposon -> case b of wild1 { DEFAULT -> GHC.Types.False }
                   Types.CGene a1
                   -> case b of wild1 {
                        Types.Transposon -> GHC.Types.True
                        Types.CGene b1 -> Types.$fOrdLocus_$c>2 a1 b1
                        Types.CTfbs ipv -> GHC.Types.False }
                   Types.CTfbs a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Types.CTfbs b1 -> Types.$fOrdLocus_$c>1 a1 b1 } }) -}
31a1ab223f703ab4c97341c9dd6d8d8e
  $fOrdLocus_$c>1 :: Types.Tfbs -> Types.Tfbs -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Tfbs) (w1 :: Types.Tfbs) ->
                 case w of ww { Types.Tfbs ww1 ww2 ->
                 case ww1 `cast` (Types.N:ID[0]) of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Types.Tfbs ww6 ww7 ->
                 case ww6 `cast` (Types.N:ID[0]) of ww8 { GHC.Types.I# ww9 ->
                 Types.$w$c> ww4 ww2 ww9 ww7 } } } }) -}
855bc26dbd005a2f673e8ef7757be5ba
  $fOrdLocus_$c>2 :: Types.Gene -> Types.Gene -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U)><S(S(S)LL),1*U(1*U(U),1*U(U),1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Gene) (y :: Types.Gene) ->
                 case Types.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
07657b88e6375bd6d708a4d154921905
  $fOrdLocus_$c>= :: Types.Locus -> Types.Locus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Locus) (b :: Types.Locus) ->
                 case a of wild {
                   Types.Transposon
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False Types.Transposon -> GHC.Types.True }
                   Types.CGene a1
                   -> case b of wild1 {
                        Types.Transposon -> GHC.Types.True
                        Types.CGene b1 -> Types.$fOrdLocus_$c>=2 a1 b1
                        Types.CTfbs ipv -> GHC.Types.False }
                   Types.CTfbs a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Types.CTfbs b1 -> Types.$fOrdLocus_$c>=1 a1 b1 } }) -}
31a1ab223f703ab4c97341c9dd6d8d8e
  $fOrdLocus_$c>=1 :: Types.Tfbs -> Types.Tfbs -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Tfbs) (w1 :: Types.Tfbs) ->
                 case w of ww { Types.Tfbs ww1 ww2 ->
                 case ww1 `cast` (Types.N:ID[0]) of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Types.Tfbs ww6 ww7 ->
                 case ww6 `cast` (Types.N:ID[0]) of ww8 { GHC.Types.I# ww9 ->
                 Types.$w$c>= ww4 ww2 ww9 ww7 } } } }) -}
855bc26dbd005a2f673e8ef7757be5ba
  $fOrdLocus_$c>=2 :: Types.Gene -> Types.Gene -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U)><S(S(S)LL),1*U(1*U(U),1*U(U),1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Gene) (y :: Types.Gene) ->
                 case Types.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
855bc26dbd005a2f673e8ef7757be5ba
  $fOrdLocus_$ccompare ::
    Types.Gene -> Types.Gene -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U)><S(S(S)LL),1*U(1*U(U),1*U(U),1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Gene) (w1 :: Types.Gene) ->
                 case w of ww { Types.Gene ww1 ww2 ww3 ->
                 case ww1 `cast` (Types.N:ID[0]) of ww4 { GHC.Types.I# ww5 ->
                 case w1 of ww6 { Types.Gene ww7 ww8 ww9 ->
                 case ww7 `cast` (Types.N:ID[0]) of ww10 { GHC.Types.I# ww11 ->
                 Types.$w$ccompare ww5 ww2 ww3 ww11 ww8 ww9 } } } }) -}
07657b88e6375bd6d708a4d154921905
  $fOrdLocus_$ccompare1 ::
    Types.Locus -> Types.Locus -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Locus) (b :: Types.Locus) ->
                 case a of wild {
                   Types.Transposon
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT Types.Transposon -> GHC.Types.EQ }
                   Types.CGene a1
                   -> case b of wild1 {
                        Types.Transposon -> GHC.Types.GT
                        Types.CGene b1 -> Types.$fOrdLocus_$ccompare a1 b1
                        Types.CTfbs ipv -> GHC.Types.LT }
                   Types.CTfbs a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Types.CTfbs b1 -> Types.$fOrdLocus_$ccompare2 a1 b1 } }) -}
31a1ab223f703ab4c97341c9dd6d8d8e
  $fOrdLocus_$ccompare2 ::
    Types.Tfbs -> Types.Tfbs -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Tfbs) (w1 :: Types.Tfbs) ->
                 case w of ww { Types.Tfbs ww1 ww2 ->
                 case ww1 `cast` (Types.N:ID[0]) of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Types.Tfbs ww6 ww7 ->
                 case ww6 `cast` (Types.N:ID[0]) of ww8 { GHC.Types.I# ww9 ->
                 Types.$w$ccompare1 ww4 ww2 ww9 ww7 } } } }) -}
07657b88e6375bd6d708a4d154921905
  $fOrdLocus_$cmax :: Types.Locus -> Types.Locus -> Types.Locus
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Types.Locus) (y :: Types.Locus) ->
                 case x of wild {
                   Types.Transposon -> y
                   Types.CGene a1
                   -> case y of wild1 {
                        Types.Transposon -> wild
                        Types.CGene b1
                        -> case a1 of ww { Types.Gene ww1 ww2 ww3 ->
                           case ww1 `cast` (Types.N:ID[0]) of ww4 { GHC.Types.I# ww5 ->
                           case b1 of ww6 { Types.Gene ww7 ww8 ww9 ->
                           case ww7 `cast` (Types.N:ID[0]) of ww10 { GHC.Types.I# ww11 ->
                           case Types.$w$ccompare ww5 ww2 ww3 ww11 ww8 ww9 of wild2 {
                             DEFAULT -> wild1 GHC.Types.GT -> wild } } } } }
                        Types.CTfbs ipv -> wild1 }
                   Types.CTfbs a1
                   -> case y of wild1 {
                        DEFAULT -> wild
                        Types.CTfbs b1
                        -> case a1 of wild2 { Types.Tfbs a2 a3 ->
                           case b1 of wild3 { Types.Tfbs b2 b3 ->
                           case a2 `cast` (Types.N:ID[0]) of wild4 { GHC.Types.I# x# ->
                           case b2 `cast` (Types.N:ID[0]) of wild5 { GHC.Types.I# y# ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# x# y#) of wild6 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x# y#) of wild7 {
                                  GHC.Types.False -> wild
                                  GHC.Types.True
                                  -> case a3
                                            `cast`
                                          (Types.N:Weight[0]) of wild8 { GHC.Types.I# x1 ->
                                     case b3
                                            `cast`
                                          (Types.N:Weight[0]) of wild9 { GHC.Types.I# y1 ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# x1 y1) of wild10 {
                                       GHC.Types.False -> wild GHC.Types.True -> wild1 } } } }
                             GHC.Types.True -> wild1 } } } } } } }) -}
07657b88e6375bd6d708a4d154921905
  $fOrdLocus_$cmin :: Types.Locus -> Types.Locus -> Types.Locus
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Types.Locus) (y :: Types.Locus) ->
                 case x of wild {
                   Types.Transposon -> case y of wild1 { DEFAULT -> Types.Transposon }
                   Types.CGene a1
                   -> case y of wild1 {
                        Types.Transposon -> Types.Transposon
                        Types.CGene b1
                        -> case a1 of ww { Types.Gene ww1 ww2 ww3 ->
                           case ww1 `cast` (Types.N:ID[0]) of ww4 { GHC.Types.I# ww5 ->
                           case b1 of ww6 { Types.Gene ww7 ww8 ww9 ->
                           case ww7 `cast` (Types.N:ID[0]) of ww10 { GHC.Types.I# ww11 ->
                           case Types.$w$ccompare ww5 ww2 ww3 ww11 ww8 ww9 of wild2 {
                             DEFAULT -> wild GHC.Types.GT -> wild1 } } } } }
                        Types.CTfbs ipv -> wild }
                   Types.CTfbs a1
                   -> case y of wild1 {
                        DEFAULT -> wild1
                        Types.CTfbs b1
                        -> case a1 of wild2 { Types.Tfbs a2 a3 ->
                           case b1 of wild3 { Types.Tfbs b2 b3 ->
                           case a2 `cast` (Types.N:ID[0]) of wild4 { GHC.Types.I# x# ->
                           case b2 `cast` (Types.N:ID[0]) of wild5 { GHC.Types.I# y# ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# x# y#) of wild6 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x# y#) of wild7 {
                                  GHC.Types.False -> wild1
                                  GHC.Types.True
                                  -> case a3
                                            `cast`
                                          (Types.N:Weight[0]) of wild8 { GHC.Types.I# x1 ->
                                     case b3
                                            `cast`
                                          (Types.N:Weight[0]) of wild9 { GHC.Types.I# y1 ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# x1 y1) of wild10 {
                                       GHC.Types.False -> wild1 GHC.Types.True -> wild } } } }
                             GHC.Types.True -> wild } } } } } } }) -}
31a1ab223f703ab4c97341c9dd6d8d8e
  $fOrdTfbs :: GHC.Classes.Ord Types.Tfbs
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Tfbs
                  Types.$fEqTfbs
                  Types.$fOrdLocus_$ccompare2
                  Types.$fOrdLocus_$c<1
                  Types.$fOrdLocus_$c<=1
                  Types.$fOrdLocus_$c>1
                  Types.$fOrdLocus_$c>=1
                  Types.$fOrdTfbs_$cmax
                  Types.$fOrdTfbs_$cmin -}
31a1ab223f703ab4c97341c9dd6d8d8e
  $fOrdTfbs_$cmax :: Types.Tfbs -> Types.Tfbs -> Types.Tfbs
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(U(U),U(U))><S(S(S)L),1*U(U(U),U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Tfbs) (w1 :: Types.Tfbs) ->
                 case w of ww { Types.Tfbs ww1 ww2 ->
                 case ww1 `cast` (Types.N:ID[0]) of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Types.Tfbs ww6 ww7 ->
                 case ww6 `cast` (Types.N:ID[0]) of ww8 { GHC.Types.I# ww9 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww4 ww9) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww4 ww9) of wild1 {
                        GHC.Types.False
                        -> Types.Tfbs (GHC.Types.I# ww4) `cast` (Sym (Types.N:ID[0])) ww2
                        GHC.Types.True
                        -> case ww2 `cast` (Types.N:Weight[0]) of wild2 { GHC.Types.I# x ->
                           case ww7 `cast` (Types.N:Weight[0]) of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# x y) of wild4 {
                             GHC.Types.False
                             -> Types.Tfbs
                                  (GHC.Types.I# ww4) `cast` (Sym (Types.N:ID[0]))
                                  wild2 `cast` (Sym (Types.N:Weight[0]))
                             GHC.Types.True
                             -> Types.Tfbs
                                  (GHC.Types.I# ww9) `cast` (Sym (Types.N:ID[0]))
                                  wild3 `cast` (Sym (Types.N:Weight[0])) } } } }
                   GHC.Types.True
                   -> Types.Tfbs
                        (GHC.Types.I# ww9) `cast` (Sym (Types.N:ID[0]))
                        ww7 } } } } }) -}
31a1ab223f703ab4c97341c9dd6d8d8e
  $fOrdTfbs_$cmin :: Types.Tfbs -> Types.Tfbs -> Types.Tfbs
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(U(U),U(U))><S(S(S)L),1*U(U(U),U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Tfbs) (w1 :: Types.Tfbs) ->
                 case w of ww { Types.Tfbs ww1 ww2 ->
                 case ww1 `cast` (Types.N:ID[0]) of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Types.Tfbs ww6 ww7 ->
                 case ww6 `cast` (Types.N:ID[0]) of ww8 { GHC.Types.I# ww9 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww4 ww9) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww4 ww9) of wild1 {
                        GHC.Types.False
                        -> Types.Tfbs (GHC.Types.I# ww9) `cast` (Sym (Types.N:ID[0])) ww7
                        GHC.Types.True
                        -> case ww2 `cast` (Types.N:Weight[0]) of wild2 { GHC.Types.I# x ->
                           case ww7 `cast` (Types.N:Weight[0]) of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# x y) of wild4 {
                             GHC.Types.False
                             -> Types.Tfbs
                                  (GHC.Types.I# ww9) `cast` (Sym (Types.N:ID[0]))
                                  wild3 `cast` (Sym (Types.N:Weight[0]))
                             GHC.Types.True
                             -> Types.Tfbs
                                  (GHC.Types.I# ww4) `cast` (Sym (Types.N:ID[0]))
                                  wild2 `cast` (Sym (Types.N:Weight[0])) } } } }
                   GHC.Types.True
                   -> Types.Tfbs
                        (GHC.Types.I# ww4) `cast` (Sym (Types.N:ID[0]))
                        ww2 } } } } }) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fOrdThres :: GHC.Classes.Ord Types.Thres
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Thres
                  Types.$fEqThres
                  Types.$fOrdThres_$ccompare
                  Types.$fOrdThres_$c<
                  Types.$fOrdThres_$c<=
                  Types.$fOrdThres_$c>
                  Types.$fOrdThres_$c>=
                  Types.$fOrdThres_$cmax
                  Types.$fOrdThres_$cmin -}
b4d1ca11eda71c74c7df7a27380685f5
  $fOrdThres_$c< :: Types.Thres -> Types.Thres -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.ltInt
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R <GHC.Types.Bool>_R) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fOrdThres_$c<= :: Types.Thres -> Types.Thres -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.leInt
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R <GHC.Types.Bool>_R) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fOrdThres_$c> :: Types.Thres -> Types.Thres -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.gtInt
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R <GHC.Types.Bool>_R) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fOrdThres_$c>= :: Types.Thres -> Types.Thres -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.geInt
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R <GHC.Types.Bool>_R) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fOrdThres_$ccompare ::
    Types.Thres -> Types.Thres -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.compareInt
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R <GHC.Types.Ordering>_R) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fOrdThres_$cmax :: Types.Thres -> Types.Thres -> Types.Thres
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fOrdInt_$cmax
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fOrdThres_$cmin :: Types.Thres -> Types.Thres -> Types.Thres
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fOrdInt_$cmin
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fOrdWeight :: GHC.Classes.Ord Types.Weight
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Weight
                  Types.$fEqWeight
                  Types.$fOrdWeight_$ccompare
                  Types.$fOrdWeight_$c<
                  Types.$fOrdWeight_$c<=
                  Types.$fOrdWeight_$c>
                  Types.$fOrdWeight_$c>=
                  Types.$fOrdWeight_$cmax
                  Types.$fOrdWeight_$cmin -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fOrdWeight_$c< :: Types.Weight -> Types.Weight -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.ltInt
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R <GHC.Types.Bool>_R) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fOrdWeight_$c<= :: Types.Weight -> Types.Weight -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.leInt
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R <GHC.Types.Bool>_R) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fOrdWeight_$c> :: Types.Weight -> Types.Weight -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.gtInt
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R <GHC.Types.Bool>_R) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fOrdWeight_$c>= :: Types.Weight -> Types.Weight -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.geInt
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R <GHC.Types.Bool>_R) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fOrdWeight_$ccompare ::
    Types.Weight -> Types.Weight -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.compareInt
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R <GHC.Types.Ordering>_R) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fOrdWeight_$cmax :: Types.Weight -> Types.Weight -> Types.Weight
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fOrdInt_$cmax
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fOrdWeight_$cmin :: Types.Weight -> Types.Weight -> Types.Weight
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fOrdInt_$cmin
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])) -}
c366e34cef18e343b1b97128d4a7d6c2
  $fReadAgent :: GHC.Read.Read Types.Agent
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Agent
                  Types.$fReadAgent_$creadsPrec
                  Types.$fReadAgent_$creadList
                  Types.$fReadAgent_$creadPrec
                  Types.$fReadAgent_$creadListPrec -}
c366e34cef18e343b1b97128d4a7d6c2
  $fReadAgent1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Types.Agent] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Types.Agent] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ Types.Agent
                   Types.$fReadAgent2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Types.Agent>_R))
                   eta
                   @ b
                   eta1) -}
c366e34cef18e343b1b97128d4a7d6c2
  $fReadAgent2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.Agent
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ Types.Agent
                   Types.$fReadAgent3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.Agent>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Types.Agent>_R)))) -}
c366e34cef18e343b1b97128d4a7d6c2
  $fReadAgent3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Types.Agent -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)> -}
c366e34cef18e343b1b97128d4a7d6c2
  $fReadAgent4 :: Text.ParserCombinators.ReadP.P [Types.Agent]
  {- Unfolding: (GHC.Read.list1
                   @ Types.Agent
                   Types.$fReadAgent2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Types.Agent>_R))
                   GHC.Read.$fRead()5
                   @ [Types.Agent]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Types.Agent])) -}
c366e34cef18e343b1b97128d4a7d6c2
  $fReadAgent_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Types.Agent]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Types.Agent]
                   Types.$fReadAgent4) -}
c366e34cef18e343b1b97128d4a7d6c2
  $fReadAgent_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Types.Agent]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Types.$fReadAgent1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Types.Agent]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Types.Agent]>_R))) -}
c366e34cef18e343b1b97128d4a7d6c2
  $fReadAgent_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Types.Agent
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Types.$fReadAgent2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Types.Agent>_R)) -}
c366e34cef18e343b1b97128d4a7d6c2
  $fReadAgent_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Types.Agent
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Types.Agent
                   ((GHC.Read.parens1
                       @ Types.Agent
                       Types.$fReadAgent3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.Agent>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Types.Agent>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.Agent>_R)
                      @ Types.Agent
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Types.Agent))) -}
855bc26dbd005a2f673e8ef7757be5ba
  $fReadGene :: GHC.Read.Read Types.Gene
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Gene
                  Types.$fReadGene_$creadsPrec
                  Types.$fReadGene_$creadList
                  Types.$fReadGene_$creadPrec
                  Types.$fReadGene_$creadListPrec -}
855bc26dbd005a2f673e8ef7757be5ba
  $fReadGene1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Types.Gene] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Types.Gene] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ Types.Gene
                   Types.$fReadGene2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Types.Gene>_R))
                   eta
                   @ b
                   eta1) -}
855bc26dbd005a2f673e8ef7757be5ba
  $fReadGene2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.Gene
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ Types.Gene
                   Types.$fReadGene3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.Gene>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Types.Gene>_R)))) -}
855bc26dbd005a2f673e8ef7757be5ba
  $fReadGene3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Types.Gene -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (c :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Types.Gene -> Text.ParserCombinators.ReadP.P b) ->
                 case c of wild { GHC.Types.I# x ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# x 11#) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> Types.$fReadGene5 Types.$fReadGene4 @ b eta } }) -}
b1cc6161529fcb714bf855d977bfc39b
  $fReadGene4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
855bc26dbd005a2f673e8ef7757be5ba
  $fReadGene5 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b1.
       (Types.Gene -> Text.ParserCombinators.ReadP.P b1)
       -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 2, Strictness: <L,A><L,C(U)>m2, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b1
                   (w1 :: Types.Gene -> Text.ParserCombinators.ReadP.P b1) ->
                 case Types.$w$creadPrec @ b1 w1 of ww { Unit# ww1 ->
                 Text.ParserCombinators.ReadP.Look @ b1 ww1 }) -}
855bc26dbd005a2f673e8ef7757be5ba
  $fReadGene6 :: Text.ParserCombinators.ReadP.P [Types.Gene]
  {- Unfolding: (GHC.Read.list1
                   @ Types.Gene
                   Types.$fReadGene2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Types.Gene>_R))
                   GHC.Read.$fRead()5
                   @ [Types.Gene]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Types.Gene])) -}
03b02abd1f9f0b17f85b54269576f890
  $fReadGeneState :: GHC.Read.Read Types.GeneState
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.GeneState
                  Types.$fReadGeneState_$creadsPrec
                  Types.$fReadGeneState_$creadList
                  Types.$fReadGeneState_$creadPrec
                  Types.$fReadGeneState_$creadListPrec -}
03b02abd1f9f0b17f85b54269576f890
  $fReadGeneState1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Types.GeneState] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Types.GeneState] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ Types.GeneState
                   Types.$fReadGeneState2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Types.GeneState>_R))
                   eta
                   @ b
                   eta1) -}
03b02abd1f9f0b17f85b54269576f890
  $fReadGeneState2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.GeneState
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ Types.GeneState
                   Types.$fReadGeneState3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Types.GeneState>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Types.GeneState>_R)))) -}
03b02abd1f9f0b17f85b54269576f890
  $fReadGeneState3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Types.GeneState -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: Types.GeneState -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$creadPrec1 ww1 @ b w1 }) -}
6fea0ae9542a4ac2d68bfffaafe15acd
  $fReadGeneState4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GS"#) -}
03b02abd1f9f0b17f85b54269576f890
  $fReadGeneState5 ::
    Text.ParserCombinators.ReadP.P [Types.GeneState]
  {- Unfolding: (GHC.Read.list1
                   @ Types.GeneState
                   Types.$fReadGeneState2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Types.GeneState>_R))
                   GHC.Read.$fRead()5
                   @ [Types.GeneState]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Types.GeneState])) -}
03b02abd1f9f0b17f85b54269576f890
  $fReadGeneState_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Types.GeneState]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Types.GeneState]
                   Types.$fReadGeneState5) -}
03b02abd1f9f0b17f85b54269576f890
  $fReadGeneState_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Types.GeneState]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Types.$fReadGeneState1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Types.GeneState]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Types.GeneState]>_R))) -}
03b02abd1f9f0b17f85b54269576f890
  $fReadGeneState_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Types.GeneState
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Types.$fReadGeneState2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Types.GeneState>_R)) -}
03b02abd1f9f0b17f85b54269576f890
  $fReadGeneState_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Types.GeneState
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Types.GeneState
                   ((GHC.Read.parens1
                       @ Types.GeneState
                       Types.$fReadGeneState3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Types.GeneState>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Types.GeneState>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.GeneState>_R)
                      @ Types.GeneState
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Types.GeneState))) -}
855bc26dbd005a2f673e8ef7757be5ba
  $fReadGene_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Types.Gene]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Types.Gene]
                   Types.$fReadGene6) -}
855bc26dbd005a2f673e8ef7757be5ba
  $fReadGene_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Types.Gene]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Types.$fReadGene1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Types.Gene]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Types.Gene]>_R))) -}
855bc26dbd005a2f673e8ef7757be5ba
  $fReadGene_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Types.Gene
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Types.$fReadGene2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Types.Gene>_R)) -}
855bc26dbd005a2f673e8ef7757be5ba
  $fReadGene_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Types.Gene
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Types.Gene
                   ((GHC.Read.parens1
                       @ Types.Gene
                       Types.$fReadGene3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.Gene>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Types.Gene>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.Gene>_R)
                      @ Types.Gene
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Types.Gene))) -}
817eaa265a1866a0c3a20a6482f764fc
  $fReadID :: GHC.Read.Read Types.ID
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.ID
                  Types.$fReadID_$creadsPrec
                  Types.$fReadID_$creadList
                  Types.$fReadID_$creadPrec
                  Types.$fReadID_$creadListPrec -}
817eaa265a1866a0c3a20a6482f764fc
  $fReadID1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Types.ID] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Types.ID] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ Types.ID
                   Types.$fReadID2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Types.ID>_R))
                   eta
                   @ b
                   eta1) -}
817eaa265a1866a0c3a20a6482f764fc
  $fReadID2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.ID
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ Types.ID
                   Types.$fReadID3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.ID>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Types.ID>_R)))) -}
817eaa265a1866a0c3a20a6482f764fc
  $fReadID3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Types.ID -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: Types.ID -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$creadPrec2 ww1 @ b w1 }) -}
a1bce88861c33c0cc5864ed16135b747
  $fReadID4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ID"#) -}
817eaa265a1866a0c3a20a6482f764fc
  $fReadID5 :: Text.ParserCombinators.ReadP.P [Types.ID]
  {- Unfolding: (GHC.Read.list1
                   @ Types.ID
                   Types.$fReadID2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Types.ID>_R))
                   GHC.Read.$fRead()5
                   @ [Types.ID]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Types.ID])) -}
817eaa265a1866a0c3a20a6482f764fc
  $fReadID_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Types.ID]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Types.ID]
                   Types.$fReadID5) -}
817eaa265a1866a0c3a20a6482f764fc
  $fReadID_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Types.ID]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Types.$fReadID1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <[Types.ID]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Types.ID]>_R))) -}
817eaa265a1866a0c3a20a6482f764fc
  $fReadID_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Types.ID
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Types.$fReadID2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Types.ID>_R)) -}
817eaa265a1866a0c3a20a6482f764fc
  $fReadID_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Types.ID
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Types.ID
                   ((GHC.Read.parens1
                       @ Types.ID
                       Types.$fReadID3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.ID>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Types.ID>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.ID>_R)
                      @ Types.ID
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Types.ID))) -}
07657b88e6375bd6d708a4d154921905
  $fReadLocus :: GHC.Read.Read Types.Locus
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Locus
                  Types.$fReadLocus_$creadsPrec
                  Types.$fReadLocus_$creadList
                  Types.$fReadLocus_$creadPrec
                  Types.$fReadLocus_$creadListPrec -}
07657b88e6375bd6d708a4d154921905
  $fReadLocus1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Types.Locus] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Types.Locus] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ Types.Locus
                   Types.$fReadLocus2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Types.Locus>_R))
                   eta
                   @ b
                   eta1) -}
07657b88e6375bd6d708a4d154921905
  $fReadLocus2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.Locus
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ Types.Locus
                   Types.$fReadLocus3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.Locus>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Types.Locus>_R)))) -}
07657b88e6375bd6d708a4d154921905
  $fReadLocus3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Types.Locus -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)> -}
07657b88e6375bd6d708a4d154921905
  $fReadLocus4 :: Text.ParserCombinators.ReadP.P [Types.Locus]
  {- Unfolding: (GHC.Read.list1
                   @ Types.Locus
                   Types.$fReadLocus2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Types.Locus>_R))
                   GHC.Read.$fRead()5
                   @ [Types.Locus]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Types.Locus])) -}
07657b88e6375bd6d708a4d154921905
  $fReadLocus_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Types.Locus]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Types.Locus]
                   Types.$fReadLocus4) -}
07657b88e6375bd6d708a4d154921905
  $fReadLocus_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Types.Locus]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Types.$fReadLocus1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Types.Locus]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Types.Locus]>_R))) -}
07657b88e6375bd6d708a4d154921905
  $fReadLocus_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Types.Locus
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Types.$fReadLocus2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Types.Locus>_R)) -}
07657b88e6375bd6d708a4d154921905
  $fReadLocus_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Types.Locus
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Types.Locus
                   ((GHC.Read.parens1
                       @ Types.Locus
                       Types.$fReadLocus3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.Locus>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Types.Locus>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.Locus>_R)
                      @ Types.Locus
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Types.Locus))) -}
31a1ab223f703ab4c97341c9dd6d8d8e
  $fReadTfbs :: GHC.Read.Read Types.Tfbs
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Tfbs
                  Types.$fReadTfbs_$creadsPrec
                  Types.$fReadTfbs_$creadList
                  Types.$fReadTfbs_$creadPrec
                  Types.$fReadTfbs_$creadListPrec -}
31a1ab223f703ab4c97341c9dd6d8d8e
  $fReadTfbs1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Types.Tfbs] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Types.Tfbs] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ Types.Tfbs
                   Types.$fReadTfbs2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Types.Tfbs>_R))
                   eta
                   @ b
                   eta1) -}
31a1ab223f703ab4c97341c9dd6d8d8e
  $fReadTfbs2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.Tfbs
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ Types.Tfbs
                   Types.$fReadTfbs3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.Tfbs>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Types.Tfbs>_R)))) -}
31a1ab223f703ab4c97341c9dd6d8d8e
  $fReadTfbs3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Types.Tfbs -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (c :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Types.Tfbs -> Text.ParserCombinators.ReadP.P b) ->
                 case c of wild { GHC.Types.I# x ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# x 11#) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> Types.$fReadTfbs4 Types.$fReadGene4 @ b eta } }) -}
31a1ab223f703ab4c97341c9dd6d8d8e
  $fReadTfbs4 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b1.
       (Types.Tfbs -> Text.ParserCombinators.ReadP.P b1)
       -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 2, Strictness: <L,A><L,C(U)>m2, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b1
                   (w1 :: Types.Tfbs -> Text.ParserCombinators.ReadP.P b1) ->
                 case Types.$w$creadPrec3 @ b1 w1 of ww { Unit# ww1 ->
                 Text.ParserCombinators.ReadP.Look @ b1 ww1 }) -}
31a1ab223f703ab4c97341c9dd6d8d8e
  $fReadTfbs5 :: Text.ParserCombinators.ReadP.P [Types.Tfbs]
  {- Unfolding: (GHC.Read.list1
                   @ Types.Tfbs
                   Types.$fReadTfbs2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Types.Tfbs>_R))
                   GHC.Read.$fRead()5
                   @ [Types.Tfbs]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Types.Tfbs])) -}
31a1ab223f703ab4c97341c9dd6d8d8e
  $fReadTfbs_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Types.Tfbs]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Types.Tfbs]
                   Types.$fReadTfbs5) -}
31a1ab223f703ab4c97341c9dd6d8d8e
  $fReadTfbs_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Types.Tfbs]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Types.$fReadTfbs1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Types.Tfbs]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Types.Tfbs]>_R))) -}
31a1ab223f703ab4c97341c9dd6d8d8e
  $fReadTfbs_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Types.Tfbs
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Types.$fReadTfbs2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Types.Tfbs>_R)) -}
31a1ab223f703ab4c97341c9dd6d8d8e
  $fReadTfbs_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Types.Tfbs
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Types.Tfbs
                   ((GHC.Read.parens1
                       @ Types.Tfbs
                       Types.$fReadTfbs3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.Tfbs>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Types.Tfbs>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.Tfbs>_R)
                      @ Types.Tfbs
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Types.Tfbs))) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fReadThres :: GHC.Read.Read Types.Thres
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Thres
                  Types.$fReadThres_$creadsPrec
                  Types.$fReadThres_$creadList
                  Types.$fReadThres_$creadPrec
                  Types.$fReadThres_$creadListPrec -}
b4d1ca11eda71c74c7df7a27380685f5
  $fReadThres1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Types.Thres] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Types.Thres] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ Types.Thres
                   Types.$fReadThres2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Types.Thres>_R))
                   eta
                   @ b
                   eta1) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fReadThres2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.Thres
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ Types.Thres
                   Types.$fReadThres3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.Thres>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Types.Thres>_R)))) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fReadThres3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Types.Thres -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: Types.Thres -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$creadPrec4 ww1 @ b w1 }) -}
bfd2d5c590d1ba57d285328a78886389
  $fReadThres4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Thres"#) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fReadThres5 :: Text.ParserCombinators.ReadP.P [Types.Thres]
  {- Unfolding: (GHC.Read.list1
                   @ Types.Thres
                   Types.$fReadThres2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Types.Thres>_R))
                   GHC.Read.$fRead()5
                   @ [Types.Thres]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Types.Thres])) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fReadThres_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Types.Thres]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Types.Thres]
                   Types.$fReadThres5) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fReadThres_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Types.Thres]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Types.$fReadThres1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Types.Thres]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Types.Thres]>_R))) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fReadThres_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Types.Thres
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Types.$fReadThres2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Types.Thres>_R)) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fReadThres_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Types.Thres
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Types.Thres
                   ((GHC.Read.parens1
                       @ Types.Thres
                       Types.$fReadThres3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.Thres>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Types.Thres>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.Thres>_R)
                      @ Types.Thres
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Types.Thres))) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fReadWeight :: GHC.Read.Read Types.Weight
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Weight
                  Types.$fReadWeight_$creadsPrec
                  Types.$fReadWeight_$creadList
                  Types.$fReadWeight_$creadPrec
                  Types.$fReadWeight_$creadListPrec -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fReadWeight1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Types.Weight] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Types.Weight] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ Types.Weight
                   Types.$fReadWeight2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Types.Weight>_R))
                   eta
                   @ b
                   eta1) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fReadWeight2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.Weight
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ Types.Weight
                   Types.$fReadWeight3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Types.Weight>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Types.Weight>_R)))) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fReadWeight3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Types.Weight -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: Types.Weight -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$creadPrec5 ww1 @ b w1 }) -}
8756c49313c39c2425e3c3078c151dd4
  $fReadWeight4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Weight"#) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fReadWeight5 :: Text.ParserCombinators.ReadP.P [Types.Weight]
  {- Unfolding: (GHC.Read.list1
                   @ Types.Weight
                   Types.$fReadWeight2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Types.Weight>_R))
                   GHC.Read.$fRead()5
                   @ [Types.Weight]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Types.Weight])) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fReadWeight_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Types.Weight]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Types.Weight]
                   Types.$fReadWeight5) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fReadWeight_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Types.Weight]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Types.$fReadWeight1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Types.Weight]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Types.Weight]>_R))) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fReadWeight_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Types.Weight
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Types.$fReadWeight2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Types.Weight>_R)) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fReadWeight_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Types.Weight
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Types.Weight
                   ((GHC.Read.parens1
                       @ Types.Weight
                       Types.$fReadWeight3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Types.Weight>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Types.Weight>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.Weight>_R)
                      @ Types.Weight
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Types.Weight))) -}
03b02abd1f9f0b17f85b54269576f890
  $fRealGeneState :: GHC.Real.Real Types.GeneState
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.GeneState
                  Types.$fNumGeneState
                  Types.$fOrdGeneState
                  Types.$fRealGeneState_$ctoRational -}
5441044398afc16625d033568ec32a4f
  $fRealGeneState1 :: GHC.Real.Rational
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   Types.$fRealGeneState_dt
                   GHC.Real.$fEnumRatio1) -}
5fbefcf0ffe88da1fd1186e45094ff1a
  $fRealGeneState2 :: GHC.Real.Rational
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   Types.$fNumGeneState_dt
                   GHC.Real.$fEnumRatio1) -}
03b02abd1f9f0b17f85b54269576f890
  $fRealGeneState_$ctoRational ::
    Types.GeneState -> GHC.Real.Rational
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.GeneState) ->
                 case ds `cast` (Types.N:GeneState[0]) of wild {
                   GHC.Types.False -> Types.$fRealGeneState2
                   GHC.Types.True -> Types.$fRealGeneState1 }) -}
42d14b89487f43f3fd73575933b6d069
  $fRealGeneState_dt :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
817eaa265a1866a0c3a20a6482f764fc
  $fRealID :: GHC.Real.Real Types.ID
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.ID
                  Types.$fNumID
                  Types.$fOrdID
                  Types.$fRealID_$ctoRational -}
817eaa265a1866a0c3a20a6482f764fc
  $fRealID_$ctoRational :: Types.ID -> GHC.Real.Rational
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Real.$fEnumRatio_$ctoRational
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R <GHC.Real.Ratio GHC.Integer.Type.Integer>_R) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fRealThres :: GHC.Real.Real Types.Thres
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Thres
                  Types.$fNumThres
                  Types.$fOrdThres
                  Types.$fRealThres_$ctoRational -}
b4d1ca11eda71c74c7df7a27380685f5
  $fRealThres_$ctoRational :: Types.Thres -> GHC.Real.Rational
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Real.$fEnumRatio_$ctoRational
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R <GHC.Real.Ratio GHC.Integer.Type.Integer>_R) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fRealWeight :: GHC.Real.Real Types.Weight
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Weight
                  Types.$fNumWeight
                  Types.$fOrdWeight
                  Types.$fRealWeight_$ctoRational -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fRealWeight_$ctoRational :: Types.Weight -> GHC.Real.Rational
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Real.$fEnumRatio_$ctoRational
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R <GHC.Real.Ratio GHC.Integer.Type.Integer>_R) -}
c366e34cef18e343b1b97128d4a7d6c2
  $fShowAgent :: GHC.Show.Show Types.Agent
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Agent
                  Types.$fShowAgent_$cshowsPrec
                  Types.$fShowAgent_$cshow
                  Types.$fShowAgent_$cshowList -}
c366e34cef18e343b1b97128d4a7d6c2
  $fShowAgent1 :: Types.Agent -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Types.$fShowAgent_$cshowsPrec Types.$fShowAgent2) -}
fe36e289b264c43ad8f5ba77c6a80f4c
  $fShowAgent2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
c366e34cef18e343b1b97128d4a7d6c2
  $fShowAgent_$cshow :: Types.Agent -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.Agent) ->
                 Types.$fShowAgent_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c366e34cef18e343b1b97128d4a7d6c2
  $fShowAgent_$cshowList :: [Types.Agent] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.Agent
                   Types.$fShowAgent1) -}
c366e34cef18e343b1b97128d4a7d6c2
  $fShowAgent_$cshowsPrec ::
    GHC.Types.Int -> Types.Agent -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
855bc26dbd005a2f673e8ef7757be5ba
  $fShowGene :: GHC.Show.Show Types.Gene
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Gene
                  Types.$fShowGene_$cshowsPrec
                  Types.$fShowGene_$cshow
                  Types.$fShowGene_$cshowList -}
855bc26dbd005a2f673e8ef7757be5ba
  $fShowGene1 :: Types.Gene -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Types.Gene) (w1 :: GHC.Base.String) ->
                 case w of ww { Types.Gene ww1 ww2 ww3 ->
                 Types.$w$cshowsPrec 0# ww1 ww2 ww3 w1 }) -}
0f7a971ca6c37d5cf119a7fc86fa3bd4
  $fShowGene10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Gene {"#) -}
23608464de754bede4fe3b72ddd2de2f
  $fShowGene2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
4ac91082b55b85da0a6f2b08014c1ac6
  $fShowGene3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GS "#) -}
ed75a970001df1ad39000589562e4ec4
  $fShowGene4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "genSt = "#) -}
f6975fd87089eebe0ef24f75d08f5ef5
  $fShowGene5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Thres "#) -}
b6429d7b77cf0b359286d84380e670b0
  $fShowGene6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "thres = "#) -}
12d9ffdcea5c0480b588c4195ab82d83
  $fShowGene7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
e5b2825ccc6f5ce1a89eddc53fbc948a
  $fShowGene8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ID "#) -}
f77d32ce236342d895d45faa708fe532
  $fShowGene9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "geneID = "#) -}
03b02abd1f9f0b17f85b54269576f890
  $fShowGeneState :: GHC.Show.Show Types.GeneState
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.GeneState
                  Types.$fShowGeneState_$cshowsPrec
                  Types.$fShowGeneState_$cshow
                  Types.$fShowGeneState_$cshowList -}
03b02abd1f9f0b17f85b54269576f890
  $fShowGeneState1 :: Types.GeneState -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Types.GeneState) (w1 :: GHC.Base.String) ->
                 Types.$w$cshowsPrec1 0# w w1) -}
03b02abd1f9f0b17f85b54269576f890
  $fShowGeneState_$cshow :: Types.GeneState -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.GeneState) ->
                 Types.$fShowGeneState_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
03b02abd1f9f0b17f85b54269576f890
  $fShowGeneState_$cshowList :: [Types.GeneState] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.GeneState
                   Types.$fShowGeneState1) -}
03b02abd1f9f0b17f85b54269576f890
  $fShowGeneState_$cshowsPrec ::
    GHC.Types.Int -> Types.GeneState -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.GeneState)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec1 ww1 w1 w2 }) -}
855bc26dbd005a2f673e8ef7757be5ba
  $fShowGene_$cshow :: Types.Gene -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U),1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.Gene) ->
                 Types.$fShowGene_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
855bc26dbd005a2f673e8ef7757be5ba
  $fShowGene_$cshowList :: [Types.Gene] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Types.Gene Types.$fShowGene1) -}
855bc26dbd005a2f673e8ef7757be5ba
  $fShowGene_$cshowsPrec ::
    GHC.Types.Int -> Types.Gene -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U),1*U(U),1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.Gene)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.Gene ww3 ww4 ww5 ->
                 Types.$w$cshowsPrec ww1 ww3 ww4 ww5 w2 } }) -}
817eaa265a1866a0c3a20a6482f764fc
  $fShowID :: GHC.Show.Show Types.ID
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.ID
                  Types.$fShowID_$cshowsPrec
                  Types.$fShowID_$cshow
                  Types.$fShowID_$cshowList -}
817eaa265a1866a0c3a20a6482f764fc
  $fShowID1 :: Types.ID -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Types.ID) (w1 :: GHC.Base.String) ->
                 Types.$w$cshowsPrec3 0# w w1) -}
817eaa265a1866a0c3a20a6482f764fc
  $fShowID_$cshow :: Types.ID -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: (\ (x :: Types.ID) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Types.$fShowGene8
                   (case x `cast` (Types.N:ID[0]) of ww2 { GHC.Types.I# ww3 ->
                    case GHC.Show.$wshowSignedInt
                           11#
                           ww3
                           (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                    GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) -}
817eaa265a1866a0c3a20a6482f764fc
  $fShowID_$cshowList :: [Types.ID] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Types.ID Types.$fShowID1) -}
817eaa265a1866a0c3a20a6482f764fc
  $fShowID_$cshowsPrec :: GHC.Types.Int -> Types.ID -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U(U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Types.ID) (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec3 ww1 w1 w2 }) -}
07657b88e6375bd6d708a4d154921905
  $fShowLocus :: GHC.Show.Show Types.Locus
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Locus
                  Types.$fShowLocus_$cshowsPrec
                  Types.$fShowLocus_$cshow
                  Types.$fShowLocus_$cshowList -}
07657b88e6375bd6d708a4d154921905
  $fShowLocus1 :: Types.Locus -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Types.$fShowLocus_$cshowsPrec Types.$fShowAgent2) -}
401198291717e068894babf93a8e4dfb
  $fShowLocus2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Weight "#) -}
3075d2cbc1234ab44fe3d4d23a69d8a6
  $fShowLocus3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "wt = "#) -}
7d8647f620261047e19eb9d7a131f203
  $fShowLocus4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "tfbsID = "#) -}
1f92996b5962f3388e5d3effb7c55254
  $fShowLocus5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Tfbs {"#) -}
48059f9cf35fad70d0ff615506c8baa6
  $fShowLocus6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CTfbs "#) -}
077aadd66d9bc08aeacc70d8de34b76d
  $fShowLocus7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CGene "#) -}
3eb6a6d6e6df16ffcf83fbd59c540c5a
  $fShowLocus8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Transposon"#) -}
07657b88e6375bd6d708a4d154921905
  $fShowLocus_$cshow :: Types.Locus -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.Locus) ->
                 Types.$fShowLocus_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
07657b88e6375bd6d708a4d154921905
  $fShowLocus_$cshowList :: [Types.Locus] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.Locus
                   Types.$fShowLocus1) -}
07657b88e6375bd6d708a4d154921905
  $fShowLocus_$cshowsPrec ::
    GHC.Types.Int -> Types.Locus -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: Types.Locus)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Types.Transposon
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowLocus8 eta
                   Types.CGene b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Types.$fShowLocus7
                             (case b1 of ww { Types.Gene ww1 ww2 ww3 ->
                              Types.$w$cshowsPrec 11# ww1 ww2 ww3 eta })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowLocus7
                                (case b1 of ww { Types.Gene ww1 ww2 ww3 ->
                                 Types.$w$cshowsPrec
                                   11#
                                   ww1
                                   ww2
                                   ww3
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 eta) })) } }
                   Types.CTfbs b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Types.$fShowLocus6
                             (case b1 of ww { Types.Tfbs ww1 ww2 ->
                              Types.$w$cshowsPrec4 11# ww1 ww2 eta })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowLocus6
                                (case b1 of ww { Types.Tfbs ww1 ww2 ->
                                 Types.$w$cshowsPrec4
                                   11#
                                   ww1
                                   ww2
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 eta) })) } } }) -}
31a1ab223f703ab4c97341c9dd6d8d8e
  $fShowTfbs :: GHC.Show.Show Types.Tfbs
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Tfbs
                  Types.$fShowTfbs_$cshowsPrec
                  Types.$fShowTfbs_$cshow
                  Types.$fShowTfbs_$cshowList -}
31a1ab223f703ab4c97341c9dd6d8d8e
  $fShowTfbs1 :: Types.Tfbs -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Types.Tfbs) (w1 :: GHC.Base.String) ->
                 case w of ww { Types.Tfbs ww1 ww2 ->
                 Types.$w$cshowsPrec4 0# ww1 ww2 w1 }) -}
31a1ab223f703ab4c97341c9dd6d8d8e
  $fShowTfbs_$cshow :: Types.Tfbs -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.Tfbs) ->
                 Types.$fShowTfbs_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
31a1ab223f703ab4c97341c9dd6d8d8e
  $fShowTfbs_$cshowList :: [Types.Tfbs] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Types.Tfbs Types.$fShowTfbs1) -}
31a1ab223f703ab4c97341c9dd6d8d8e
  $fShowTfbs_$cshowsPrec ::
    GHC.Types.Int -> Types.Tfbs -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U(U),1*U(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.Tfbs)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.Tfbs ww3 ww4 ->
                 Types.$w$cshowsPrec4 ww1 ww3 ww4 w2 } }) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fShowThres :: GHC.Show.Show Types.Thres
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Thres
                  Types.$fShowThres_$cshowsPrec
                  Types.$fShowThres_$cshow
                  Types.$fShowThres_$cshowList -}
b4d1ca11eda71c74c7df7a27380685f5
  $fShowThres1 :: Types.Thres -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Types.Thres) (w1 :: GHC.Base.String) ->
                 Types.$w$cshowsPrec2 0# w w1) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fShowThres_$cshow :: Types.Thres -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: (\ (x :: Types.Thres) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Types.$fShowGene5
                   (case x `cast` (Types.N:Thres[0]) of ww2 { GHC.Types.I# ww3 ->
                    case GHC.Show.$wshowSignedInt
                           11#
                           ww3
                           (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                    GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fShowThres_$cshowList :: [Types.Thres] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.Thres
                   Types.$fShowThres1) -}
b4d1ca11eda71c74c7df7a27380685f5
  $fShowThres_$cshowsPrec ::
    GHC.Types.Int -> Types.Thres -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U(U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.Thres)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec2 ww1 w1 w2 }) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fShowWeight :: GHC.Show.Show Types.Weight
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Weight
                  Types.$fShowWeight_$cshowsPrec
                  Types.$fShowWeight_$cshow
                  Types.$fShowWeight_$cshowList -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fShowWeight1 :: Types.Weight -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Types.Weight) (w1 :: GHC.Base.String) ->
                 Types.$w$cshowsPrec5 0# w w1) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fShowWeight_$cshow :: Types.Weight -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: (\ (x :: Types.Weight) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Types.$fShowLocus2
                   (case x `cast` (Types.N:Weight[0]) of ww2 { GHC.Types.I# ww3 ->
                    case GHC.Show.$wshowSignedInt
                           11#
                           ww3
                           (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                    GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fShowWeight_$cshowList :: [Types.Weight] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.Weight
                   Types.$fShowWeight1) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $fShowWeight_$cshowsPrec ::
    GHC.Types.Int -> Types.Weight -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U(U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.Weight)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec5 ww1 w1 w2 }) -}
7d5be095411582e7a5f6d10508da59c1
  $tc'Agent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13717071026600258116##
                   2177163121068691261##
                   Types.$trModule
                   Types.$tc'Agent1) -}
3c04853acc9ee95a5456ec8aadf36cb3
  $tc'Agent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Agent"#) -}
928d6d9f5096af6a1412aa929fad2d5b
  $tc'C:GeneType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13040004606787765055##
                   8661752189272511450##
                   Types.$trModule
                   Types.$tc'C:GeneType1) -}
41525d7b2dc84181fdd09609405eb88e
  $tc'C:GeneType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:GeneType"#) -}
9ee134fb859a03a4a9f509815aa0787c
  $tc'CGene :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6138648782990100781##
                   1923583818575878211##
                   Types.$trModule
                   Types.$tc'CGene1) -}
7e6174766e3ea7cff3c273769cc15cc7
  $tc'CGene1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CGene"#) -}
f4f6f8434b3e356dbd731c408ca701d2
  $tc'CTfbs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   999369668416252004##
                   14736510968910818022##
                   Types.$trModule
                   Types.$tc'CTfbs1) -}
e17ca8d917982176eb19550234f511bd
  $tc'CTfbs1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CTfbs"#) -}
e00be0e80a64ee10a2ed2399cc03a358
  $tc'GS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14321501116839215569##
                   11026533644566359055##
                   Types.$trModule
                   Types.$tc'GS1) -}
d91aa3268dbaa7907776a006eef38360
  $tc'GS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'GS"#) -}
f798e77680afa10468a76e428b1b1577
  $tc'Gene :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6951063806264134193##
                   17792599242417815642##
                   Types.$trModule
                   Types.$tc'Gene1) -}
44b3f4fbdbd8b35d3193292f96b14b62
  $tc'Gene1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Gene"#) -}
dd57a5a1305677e81506c63f8a38c669
  $tc'ID :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13278953122234441593##
                   8952106218379984385##
                   Types.$trModule
                   Types.$tc'ID1) -}
142a725713b379fcbccceb1480f3ac41
  $tc'ID1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ID"#) -}
e55a1fc7c730914fe6375cd64cfef15a
  $tc'NoAgent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5545003087215351968##
                   16717262006119024740##
                   Types.$trModule
                   Types.$tc'NoAgent1) -}
c137df1672861bcf050154ae1873abc8
  $tc'NoAgent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NoAgent"#) -}
1453fc9ff5e557c92f4dcb6ed4340a52
  $tc'Tfbs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12525212971019027270##
                   16726322911236538465##
                   Types.$trModule
                   Types.$tc'Tfbs1) -}
de03b4f3898bb8f996d1c153594cba66
  $tc'Tfbs1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Tfbs"#) -}
735559b865e56fdf6a3ba74576eede8b
  $tc'Thres :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2497977958049164095##
                   1933558436790113065##
                   Types.$trModule
                   Types.$tc'Thres1) -}
0a2dc86236a6d179345f88fddef3ab27
  $tc'Thres1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Thres"#) -}
f6b1eceab37f5e4d645f4386b9197dfa
  $tc'Transposon :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2787302764975854594##
                   16772105340701017257##
                   Types.$trModule
                   Types.$tc'Transposon1) -}
2493a77b6ca3b55fa1f6e731001f68fc
  $tc'Transposon1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Transposon"#) -}
3ad447912053966c92232c40658f187a
  $tc'Weight :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16116657425749902062##
                   12334414328793412370##
                   Types.$trModule
                   Types.$tc'Weight1) -}
d651df1a9744633087640295018f19d2
  $tc'Weight1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Weight"#) -}
c636cfeabd3fa233b44421e3533b9251
  $tc'World :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2637944662775867122##
                   23725289311612328##
                   Types.$trModule
                   Types.$tc'World1) -}
db548382b902a02e90cafff8855896cb
  $tc'World1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'World"#) -}
73bfc89c3c914f4f754e86ea3511efe9
  $tcAgent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7663583667388270771##
                   12561804582262700945##
                   Types.$trModule
                   Types.$tcAgent1) -}
6c3e9cbe354ddd64750f511ed75dfec2
  $tcAgent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Agent"#) -}
33ac4cd5fc8228dcd5626791022a652a
  $tcGene :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14272149258308690436##
                   7314584920444681646##
                   Types.$trModule
                   Types.$tcGene1) -}
5fd5b632a135585b0f9f1a9c5baae80e
  $tcGene1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Gene"#) -}
be9f2d3dfcc508b63b0522c68f6f72e3
  $tcGeneState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   148212473901593329##
                   14227789473737973249##
                   Types.$trModule
                   Types.$tcGeneState1) -}
cf5bd95e4c6f79a9b182ca3eb49c5a5e
  $tcGeneState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "GeneState"#) -}
d2a79691cf65890b08210fb03882f0da
  $tcGeneType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14737859080173886656##
                   17262482802804506138##
                   Types.$trModule
                   Types.$tcGeneType1) -}
7b06322407b6f1dfda9aebc67fc09a11
  $tcGeneType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "GeneType"#) -}
d22ff42516942bff59a96ec26e3aa6b7
  $tcID :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   43396462399028478##
                   4779250508417933572##
                   Types.$trModule
                   Types.$tcID1) -}
8f890dc2429beb7f3719508c75ea8eab
  $tcID1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ID"#) -}
ef53c8f192a384939988b045a91e1a59
  $tcLocus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3664281678073843944##
                   12707566988757385379##
                   Types.$trModule
                   Types.$tcLocus1) -}
fb97faa0398b4582f36c329037f4e6ba
  $tcLocus1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Locus"#) -}
29e228f35345eb6931658b4b57d98e34
  $tcTfbs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   711592396603320655##
                   6031788743173806144##
                   Types.$trModule
                   Types.$tcTfbs1) -}
9a07adc4df1abc2fcf09bd2ac3a4bb92
  $tcTfbs1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Tfbs"#) -}
a82a6ad5e57480f4a5e7b2742eaae4b2
  $tcThres :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17798332674343525700##
                   14010780145419418785##
                   Types.$trModule
                   Types.$tcThres1) -}
e1e13f57e9e8acb1c94c92724428871b
  $tcThres1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Thres"#) -}
76c85cd2fb5d31afceea9f0270d5a61c
  $tcWeight :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17527411985410523053##
                   14281726704456241046##
                   Types.$trModule
                   Types.$tcWeight1) -}
75b7d5e7044f5b7579612f070ed7a58c
  $tcWeight1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Weight"#) -}
53e3cd1bd8b1fd658f18b0f6f92cb048
  $tcWorld :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10819147255238240947##
                   13115467634172629186##
                   Types.$trModule
                   Types.$tcWorld1) -}
4ed0e9b6cae0a4d1191bbfd6f7de0957
  $tcWorld1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "World"#) -}
23cca45dad514d1fa45ea690f1aea7ea
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Types.$trModule2 Types.$trModule1) -}
5e26ed2093dfba35d50576c08b3296eb
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Types"#) -}
2171a7e866c3021bca8dd1cef1160bca
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT"#) -}
4088df8747c6b9282ef1932123131b03
  $w$c/= ::
    GHC.Prim.Int#
    -> Types.Weight -> GHC.Prim.Int# -> Types.Weight -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Types.Weight)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Types.Weight) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww ww2) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case ww1 `cast` (Types.N:Weight[0]) of wild1 { GHC.Types.I# x ->
                      case ww3 `cast` (Types.N:Weight[0]) of wild2 { GHC.Types.I# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# x y) of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
bdd761cad3d074f84b042030c9187c98
  $w$c< ::
    GHC.Prim.Int#
    -> Types.Weight -> GHC.Prim.Int# -> Types.Weight -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Types.Weight)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Types.Weight) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww ww2) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww ww2) of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> GHC.Classes.ltInt
                             ww1 `cast` (Types.N:Weight[0])
                             ww3 `cast` (Types.N:Weight[0]) }
                   GHC.Types.True -> GHC.Types.True }) -}
1ec785de3bf0371550c4650e5daab302
  $w$c<= ::
    GHC.Prim.Int#
    -> Types.Weight -> GHC.Prim.Int# -> Types.Weight -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Types.Weight)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Types.Weight) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww ww2) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww ww2) of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> GHC.Classes.leInt
                             ww1 `cast` (Types.N:Weight[0])
                             ww3 `cast` (Types.N:Weight[0]) }
                   GHC.Types.True -> GHC.Types.True }) -}
050df7dbe9593308eb5be86ee3fe5526
  $w$c== ::
    GHC.Prim.Int#
    -> Types.Weight -> GHC.Prim.Int# -> Types.Weight -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Types.Weight)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Types.Weight) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww ww2) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> GHC.Classes.eqInt
                        ww1 `cast` (Types.N:Weight[0])
                        ww3 `cast` (Types.N:Weight[0]) }) -}
28d4a32409abd72d8174ed2769620918
  $w$c==1 ::
    GHC.Prim.Int#
    -> Types.Thres
    -> Types.GeneState
    -> GHC.Prim.Int#
    -> Types.Thres
    -> Types.GeneState
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U><S,U><L,1*U(U)><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Types.Thres)
                   (ww2 :: Types.GeneState)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: Types.Thres)
                   (ww5 :: Types.GeneState) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww ww3) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 `cast` (Types.N:Thres[0]) of wild1 { GHC.Types.I# x ->
                      case ww4 `cast` (Types.N:Thres[0]) of wild2 { GHC.Types.I# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# x y) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> GHC.Classes.$fEqBool_$c==
                             ww2 `cast` (Types.N:GeneState[0])
                             ww5 `cast` (Types.N:GeneState[0]) } } } }) -}
ca9ac9aed3995ef94eb0315e30b591d6
  $w$c> ::
    GHC.Prim.Int#
    -> Types.Weight -> GHC.Prim.Int# -> Types.Weight -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Types.Weight)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Types.Weight) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww ww2) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww ww2) of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True
                        -> GHC.Classes.gtInt
                             ww1 `cast` (Types.N:Weight[0])
                             ww3 `cast` (Types.N:Weight[0]) }
                   GHC.Types.True -> GHC.Types.False }) -}
5240d7f861b1732e4e57262b5a8df772
  $w$c>= ::
    GHC.Prim.Int#
    -> Types.Weight -> GHC.Prim.Int# -> Types.Weight -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Types.Weight)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Types.Weight) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww ww2) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww ww2) of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True
                        -> GHC.Classes.geInt
                             ww1 `cast` (Types.N:Weight[0])
                             ww3 `cast` (Types.N:Weight[0]) }
                   GHC.Types.True -> GHC.Types.False }) -}
e0c84503a4b218339c891e73e2dc134f
  $w$ccompare ::
    GHC.Prim.Int#
    -> Types.Thres
    -> Types.GeneState
    -> GHC.Prim.Int#
    -> Types.Thres
    -> Types.GeneState
    -> GHC.Types.Ordering
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U><S,U><L,1*U(U)><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Types.Thres)
                   (ww2 :: Types.GeneState)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: Types.Thres)
                   (ww5 :: Types.GeneState) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww ww3) of wild {
                   GHC.Types.False -> GHC.Classes.compareInt# ww ww3
                   GHC.Types.True
                   -> case ww2 `cast` (Types.N:GeneState[0]) of wild1 {
                        GHC.Types.False
                        -> case ww5 `cast` (Types.N:GeneState[0]) of wild2 {
                             GHC.Types.False
                             -> GHC.Classes.compareInt
                                  ww1 `cast` (Types.N:Thres[0])
                                  ww4 `cast` (Types.N:Thres[0])
                             GHC.Types.True -> GHC.Types.GT }
                        GHC.Types.True
                        -> case ww5 `cast` (Types.N:GeneState[0]) of wild2 {
                             GHC.Types.False -> GHC.Types.LT
                             GHC.Types.True
                             -> GHC.Classes.compareInt
                                  ww1 `cast` (Types.N:Thres[0])
                                  ww4 `cast` (Types.N:Thres[0]) } } }) -}
724e2a0d999b50bf5be042a5ce573221
  $w$ccompare1 ::
    GHC.Prim.Int#
    -> Types.Weight
    -> GHC.Prim.Int#
    -> Types.Weight
    -> GHC.Types.Ordering
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Types.Weight)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Types.Weight) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww ww2) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww ww2) of wild1 {
                        GHC.Types.False -> GHC.Types.GT
                        GHC.Types.True
                        -> GHC.Classes.compareInt
                             ww1 `cast` (Types.N:Weight[0])
                             ww3 `cast` (Types.N:Weight[0]) }
                   GHC.Types.True -> GHC.Types.LT }) -}
855bc26dbd005a2f673e8ef7757be5ba
  $w$creadPrec ::
    (Types.Gene -> Text.ParserCombinators.ReadP.P b1)
    -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
  {- Arity: 1, Strictness: <L,C(U)>, Inline: [0] -}
03b02abd1f9f0b17f85b54269576f890
  $w$creadPrec1 ::
    GHC.Prim.Int#
    -> forall b.
       (Types.GeneState -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   @ b
                   (w :: Types.GeneState -> Text.ParserCombinators.ReadP.P b) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10#) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl81 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl82 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$fReadBool3
                                Types.$fReadGene4
                                @ b
                                (\ (a1 :: GHC.Types.Bool) ->
                                 w a1 `cast` (Sym (Types.N:GeneState[0])))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ (a1 :: Text.Read.Lex.Lexeme) ->
                             case a1 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a2
                               -> case GHC.Base.eqString a2 Types.$fReadGeneState4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl82 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl81) -}
                        = \ (w4 :: ()) -> lvl81
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ (a :: GHC.Base.String) ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                           `cast`
                         (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
817eaa265a1866a0c3a20a6482f764fc
  $w$creadPrec2 ::
    GHC.Prim.Int#
    -> forall b.
       (Types.ID -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   @ b
                   (w :: Types.ID -> Text.ParserCombinators.ReadP.P b) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10#) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl81 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl82 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$fReadInt3
                                GHC.Read.$fReadInt_$sconvertInt
                                Types.$fReadGene4
                                @ b
                                (\ (a1 :: GHC.Types.Int) -> w a1 `cast` (Sym (Types.N:ID[0])))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ (a1 :: Text.Read.Lex.Lexeme) ->
                             case a1 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a2
                               -> case GHC.Base.eqString a2 Types.$fReadID4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl82 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl81) -}
                        = \ (w4 :: ()) -> lvl81
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ (a :: GHC.Base.String) ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                           `cast`
                         (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
31a1ab223f703ab4c97341c9dd6d8d8e
  $w$creadPrec3 ::
    (Types.Tfbs -> Text.ParserCombinators.ReadP.P b1)
    -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
  {- Arity: 1, Strictness: <L,C(U)>, Inline: [0] -}
b4d1ca11eda71c74c7df7a27380685f5
  $w$creadPrec4 ::
    GHC.Prim.Int#
    -> forall b.
       (Types.Thres -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   @ b
                   (w :: Types.Thres -> Text.ParserCombinators.ReadP.P b) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10#) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl81 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl82 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$fReadInt3
                                GHC.Read.$fReadInt_$sconvertInt
                                Types.$fReadGene4
                                @ b
                                (\ (a1 :: GHC.Types.Int) -> w a1 `cast` (Sym (Types.N:Thres[0])))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ (a1 :: Text.Read.Lex.Lexeme) ->
                             case a1 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a2
                               -> case GHC.Base.eqString a2 Types.$fReadThres4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl82 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl81) -}
                        = \ (w4 :: ()) -> lvl81
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ (a :: GHC.Base.String) ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                           `cast`
                         (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $w$creadPrec5 ::
    GHC.Prim.Int#
    -> forall b.
       (Types.Weight -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   @ b
                   (w :: Types.Weight -> Text.ParserCombinators.ReadP.P b) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10#) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl81 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl82 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$fReadInt3
                                GHC.Read.$fReadInt_$sconvertInt
                                Types.$fReadGene4
                                @ b
                                (\ (a1 :: GHC.Types.Int) -> w a1 `cast` (Sym (Types.N:Weight[0])))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ (a1 :: Text.Read.Lex.Lexeme) ->
                             case a1 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a2
                               -> case GHC.Base.eqString a2 Types.$fReadWeight4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl82 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl81) -}
                        = \ (w4 :: ()) -> lvl81
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ (a :: GHC.Base.String) ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                           `cast`
                         (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
498eb13bfc0b097a4ac6ecb17d06b0f2
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Types.ID
    -> Types.Thres
    -> Types.GeneState
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Types.ID)
                   (ww2 :: Types.Thres)
                   (ww3 :: Types.GeneState)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Types.$fShowGene10
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Types.$fShowGene9
                          (Types.$w$cshowsPrec3
                             0#
                             ww1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowGene7
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Types.$fShowGene6
                                   (Types.$w$cshowsPrec2
                                      0#
                                      ww2
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Types.$fShowGene7
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            Types.$fShowGene4
                                            (Types.$w$cshowsPrec1
                                               0#
                                               ww3
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  Types.$fShowGene2
                                                  x)))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w)) }) -}
03b02abd1f9f0b17f85b54269576f890
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Types.GeneState -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Types.GeneState)
                   (w1 :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Types.$fShowGene3
                       (case w `cast` (Types.N:GeneState[0]) of wild {
                          GHC.Types.False -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows18 x
                          GHC.Types.True
                          -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows17 x })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w1
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1)) }) -}
b4d1ca11eda71c74c7df7a27380685f5
  $w$cshowsPrec2 ::
    GHC.Prim.Int# -> Types.Thres -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U(U)><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Types.Thres)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowGene5
                        (case w `cast` (Types.N:Thres[0]) of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt 11# ww3 w1 of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Types.$fShowGene5
                           (case w `cast` (Types.N:Thres[0]) of ww2 { GHC.Types.I# ww3 ->
                            case GHC.Show.$wshowSignedInt
                                   11#
                                   ww3
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.shows4
                                      w1) of ww4 { (#,#) ww5 ww6 ->
                            GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) }) -}
817eaa265a1866a0c3a20a6482f764fc
  $w$cshowsPrec3 ::
    GHC.Prim.Int# -> Types.ID -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U(U)><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Types.ID)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowGene8
                        (case w `cast` (Types.N:ID[0]) of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt 11# ww3 w1 of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Types.$fShowGene8
                           (case w `cast` (Types.N:ID[0]) of ww2 { GHC.Types.I# ww3 ->
                            case GHC.Show.$wshowSignedInt
                                   11#
                                   ww3
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.shows4
                                      w1) of ww4 { (#,#) ww5 ww6 ->
                            GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) }) -}
d89ed4d9971579713c793c4a90436af9
  $w$cshowsPrec4 ::
    GHC.Prim.Int#
    -> Types.ID -> Types.Weight -> GHC.Base.String -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Types.ID)
                   (ww2 :: Types.Weight)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Types.$fShowLocus5
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Types.$fShowLocus4
                          (Types.$w$cshowsPrec3
                             0#
                             ww1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowGene7
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Types.$fShowLocus3
                                   (Types.$w$cshowsPrec5
                                      0#
                                      ww2
                                      (GHC.Base.++ @ GHC.Types.Char Types.$fShowGene2 x))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w)) }) -}
95aa6bc61f3ed402a00e2e8be584a9c3
  $w$cshowsPrec5 ::
    GHC.Prim.Int# -> Types.Weight -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U(U)><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Types.Weight)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowLocus2
                        (case w `cast` (Types.N:Weight[0]) of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt 11# ww3 w1 of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Types.$fShowLocus2
                           (case w `cast` (Types.N:Weight[0]) of ww2 { GHC.Types.I# ww3 ->
                            case GHC.Show.$wshowSignedInt
                                   11#
                                   ww3
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.shows4
                                      w1) of ww4 { (#,#) ww5 ww6 ->
                            GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) }) -}
c366e34cef18e343b1b97128d4a7d6c2
  data Agent
    = Agent {genome :: Types.Genome,
             geneStateTable :: Types.GeneStateTable}
    | NoAgent
d3519252ea53dc1090c337e42ea711ed
  type Agents =
    GHC.Arr.Array (GHC.Types.Int, GHC.Types.Int) Types.Agent
a45a495818bb58e4eb217380cb6d210a
  type Chromosome = [Types.Locus]
86d083c95cb440c346ac68b02f16b953
  type Env = GHC.Types.Int
855bc26dbd005a2f673e8ef7757be5ba
  data Gene
    = Gene {geneID :: Types.ID,
            thres :: Types.Thres,
            genSt :: Types.GeneState}
03b02abd1f9f0b17f85b54269576f890
  newtype GeneState = GS GHC.Types.Bool
bb3b2c0c1c94fb002ce6e46aadd8b1da
  type GeneStateTable = Data.Map.Base.Map Types.ID Types.GeneState
f6f7accb35473862d75b702a0145c137
  class GeneType a where
    iD :: a -> Types.ID
    {-# MINIMAL iD #-}
3bce35ea30a7a3eb58af4c6cfab74479
  type Genome = [Types.Chromosome]
817eaa265a1866a0c3a20a6482f764fc
  newtype ID = ID GHC.Types.Int
07657b88e6375bd6d708a4d154921905
  data Locus = Transposon | CGene Types.Gene | CTfbs Types.Tfbs
31a1ab223f703ab4c97341c9dd6d8d8e
  data Tfbs = Tfbs {tfbsID :: Types.ID, wt :: Types.Weight}
b4d1ca11eda71c74c7df7a27380685f5
  newtype Thres = Thres GHC.Types.Int
95aa6bc61f3ed402a00e2e8be584a9c3
  newtype Weight = Weight GHC.Types.Int
e2028f20bf2ac3a63493ac015c2c65e9
  data World = World {agents :: Types.Agents, env :: Types.Env}
2bc3d2925881c9e59bead66a9d7c065e
  agents :: Types.World -> Types.Agents
  RecSel Left Types.World
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U(U,U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.World) ->
                 case ds of wild { Types.World ds1 ds2 -> ds1 }) -}
6f4566b485b711eb343b76370f75ecbb
  env :: Types.World -> Types.Env
  RecSel Left Types.World
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.World) ->
                 case ds of wild { Types.World ds1 ds2 -> ds2 }) -}
cb48762210a4dea2f2cac95159bedeaf
  genSt :: Types.Gene -> Types.GeneState
  RecSel Left Types.Gene
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.Gene) ->
                 case ds of wild { Types.Gene ds1 ds2 ds3 -> ds3 }) -}
60c11022ca35a1fae2505bbfceb25986
  geneID :: Types.Gene -> Types.ID
  RecSel Left Types.Gene
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.Gene) ->
                 case ds of wild { Types.Gene ds1 ds2 ds3 -> ds1 }) -}
c25d8717abe1bae082eda7e9a6c438c4
  geneStateTable :: Types.Agent -> Types.GeneStateTable
  RecSel Left Types.Agent
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.Agent) ->
                 case ds of wild {
                   Types.Agent ds1 ds2 -> ds2
                   Types.NoAgent -> Types.geneStateTable1 }) -}
ab1afbbb1ddfc566f1f879898bb57166
  geneStateTable1 :: Types.GeneStateTable
  {- Strictness: x -}
11d8a3f40be1d9eda29de80663873961
  genome :: Types.Agent -> Types.Genome
  RecSel Left Types.Agent
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.Agent) ->
                 case ds of wild {
                   Types.Agent ds1 ds2 -> ds1 Types.NoAgent -> Types.genome1 }) -}
3b732aa4430edca0185cb29c43f72032
  genome1 :: Types.Genome
  {- Strictness: x -}
27c3b8a1d890daa97f838161b7bbcff8
  tfbsID :: Types.Tfbs -> Types.ID
  RecSel Left Types.Tfbs
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.Tfbs) ->
                 case ds of wild { Types.Tfbs ds1 ds2 -> ds1 }) -}
a592cc33e93025684dc810790e30bf15
  thres :: Types.Gene -> Types.Thres
  RecSel Left Types.Gene
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.Gene) ->
                 case ds of wild { Types.Gene ds1 ds2 ds3 -> ds2 }) -}
cdcc271738b535aa713f4f651b69e59d
  wt :: Types.Tfbs -> Types.Weight
  RecSel Left Types.Tfbs
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.Tfbs) ->
                 case ds of wild { Types.Tfbs ds1 ds2 -> ds2 }) -}
instance GHC.Enum.Bounded [Types.GeneState]
  = Types.$fBoundedGeneState
instance GHC.Enum.Bounded [Types.ID] = Types.$fBoundedID
instance GHC.Enum.Bounded [Types.Thres] = Types.$fBoundedThres
instance GHC.Enum.Bounded [Types.Weight] = Types.$fBoundedWeight
instance GHC.Enum.Enum [Types.GeneState] = Types.$fEnumGeneState
instance GHC.Enum.Enum [Types.ID] = Types.$fEnumID
instance GHC.Enum.Enum [Types.Thres] = Types.$fEnumThres
instance GHC.Enum.Enum [Types.Weight] = Types.$fEnumWeight
instance GHC.Classes.Eq [Types.Agent] = Types.$fEqAgent
instance GHC.Classes.Eq [Types.Gene] = Types.$fEqGene
instance GHC.Classes.Eq [Types.GeneState] = Types.$fEqGeneState
instance GHC.Classes.Eq [Types.ID] = Types.$fEqID
instance GHC.Classes.Eq [Types.Locus] = Types.$fEqLocus
instance GHC.Classes.Eq [Types.Tfbs] = Types.$fEqTfbs
instance GHC.Classes.Eq [Types.Thres] = Types.$fEqThres
instance GHC.Classes.Eq [Types.Weight] = Types.$fEqWeight
instance Types.GeneType [Types.Gene] = Types.$fGeneTypeGene
instance Types.GeneType [Types.Tfbs] = Types.$fGeneTypeTfbs
instance GHC.Real.Integral [Types.ID] = Types.$fIntegralID
instance GHC.Real.Integral [Types.Thres] = Types.$fIntegralThres
instance GHC.Real.Integral [Types.Weight] = Types.$fIntegralWeight
instance GHC.Num.Num [Types.GeneState] = Types.$fNumGeneState
instance GHC.Num.Num [Types.ID] = Types.$fNumID
instance GHC.Num.Num [Types.Thres] = Types.$fNumThres
instance GHC.Num.Num [Types.Weight] = Types.$fNumWeight
instance GHC.Classes.Ord [Types.Agent] = Types.$fOrdAgent
instance GHC.Classes.Ord [Types.Gene] = Types.$fOrdGene
instance GHC.Classes.Ord [Types.GeneState] = Types.$fOrdGeneState
instance GHC.Classes.Ord [Types.ID] = Types.$fOrdID
instance GHC.Classes.Ord [Types.Locus] = Types.$fOrdLocus
instance GHC.Classes.Ord [Types.Tfbs] = Types.$fOrdTfbs
instance GHC.Classes.Ord [Types.Thres] = Types.$fOrdThres
instance GHC.Classes.Ord [Types.Weight] = Types.$fOrdWeight
instance GHC.Read.Read [Types.Agent] = Types.$fReadAgent
instance GHC.Read.Read [Types.Gene] = Types.$fReadGene
instance GHC.Read.Read [Types.GeneState] = Types.$fReadGeneState
instance GHC.Read.Read [Types.ID] = Types.$fReadID
instance GHC.Read.Read [Types.Locus] = Types.$fReadLocus
instance GHC.Read.Read [Types.Tfbs] = Types.$fReadTfbs
instance GHC.Read.Read [Types.Thres] = Types.$fReadThres
instance GHC.Read.Read [Types.Weight] = Types.$fReadWeight
instance GHC.Real.Real [Types.GeneState] = Types.$fRealGeneState
instance GHC.Real.Real [Types.ID] = Types.$fRealID
instance GHC.Real.Real [Types.Thres] = Types.$fRealThres
instance GHC.Real.Real [Types.Weight] = Types.$fRealWeight
instance GHC.Show.Show [Types.Agent] = Types.$fShowAgent
instance GHC.Show.Show [Types.Gene] = Types.$fShowGene
instance GHC.Show.Show [Types.GeneState] = Types.$fShowGeneState
instance GHC.Show.Show [Types.ID] = Types.$fShowID
instance GHC.Show.Show [Types.Locus] = Types.$fShowLocus
instance GHC.Show.Show [Types.Tfbs] = Types.$fShowTfbs
instance GHC.Show.Show [Types.Thres] = Types.$fShowThres
instance GHC.Show.Show [Types.Weight] = Types.$fShowWeight
"SPEC/Types $fEq[] @ Locus" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                       Types.Locus)
  GHC.Classes.$fEq[] @ Types.Locus $dEq = Types.$fEqAgent_$s$fEq[]
"SPEC/Types $fEq[]_$c/= @ Locus" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                            Types.Locus)
  GHC.Classes.$fEq[]_$c/= @ Types.Locus $dEq
  = Types.$fEqAgent_$s$fEq[]_$c/=
"SPEC/Types $fOrd[] @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                         Types.Locus)
  GHC.Classes.$fOrd[] @ Types.Locus $dOrd
  = Types.$fOrdAgent_$s$fOrd[]
"SPEC/Types $fOrd[]_$c< @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                             Types.Locus)
  GHC.Classes.$fOrd[]_$c< @ Types.Locus $dOrd
  = Types.$fOrdAgent_$s$fOrd[]_$c<
"SPEC/Types $fOrd[]_$c<= @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                              Types.Locus)
  GHC.Classes.$fOrd[]_$c<= @ Types.Locus $dOrd
  = Types.$fOrdAgent_$s$fOrd[]_$c<=
"SPEC/Types $fOrd[]_$c> @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                             Types.Locus)
  GHC.Classes.$fOrd[]_$c> @ Types.Locus $dOrd
  = Types.$fOrdAgent_$s$fOrd[]_$c>
"SPEC/Types $fOrd[]_$c>= @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                              Types.Locus)
  GHC.Classes.$fOrd[]_$c>= @ Types.Locus $dOrd
  = Types.$fOrdAgent_$s$fOrd[]_$c>=
"SPEC/Types $fOrd[]_$cmax @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                               Types.Locus)
  GHC.Classes.$fOrd[]_$cmax @ Types.Locus $dOrd
  = Types.$fOrdAgent_$s$fOrd[]_$cmax
"SPEC/Types $fOrd[]_$cmin @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                               Types.Locus)
  GHC.Classes.$fOrd[]_$cmin @ Types.Locus $dOrd
  = Types.$fOrdAgent_$s$fOrd[]_$cmin
"SPEC/Types $fOrd[]_$cp1Ord @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                 Types.Locus)
  GHC.Classes.$fOrd[]_$cp1Ord @ Types.Locus $dOrd
  = Types.$fOrdAgent_$s$fOrd[]_$cp1Ord
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

