
==================== FINAL INTERFACE ====================
2017-04-26 15:36:04.9951 UTC

interface Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types [hpc] 8002
  interface hash: 5a6a57ab256f9265975cc7015498d32e
  ABI hash: 067da2fa0f710839b88e4fd1e1eded28
  export-list hash: 6ec82bea59d093b10ad3149623a0d676
  orphan hash: 9906868ef256a977fb3c9aa1c2c4b7d8
  flag hash: 5ecbc7edbeefed5afd57cc93de5d9db9
  sig of: Nothing
  used TH splices: False
  where
exports:
  Types.parseLoc
  Types.showGST
  Types.Agent{Types.Agent Types.NoAgent geneStateTable genome}
  Types.Agents
  Types.Chromosome
  Types.Env
  Types.Gene{Types.Gene genSt geneID thres}
  Types.GeneState{Types.GS}
  Types.GeneStateTable
  Types.GeneType{Types.iD}
  Types.Genome
  Types.ID{Types.ID}
  Types.Locus{Types.CGene Types.CTfbs Types.Transposon}
  Types.Tfbs{Types.Tfbs tfbsID wt}
  Types.Thres{Types.Thres}
  Types.Weight{Types.Weight}
  Types.World{Types.World agents env}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  array-0.5.1.1@array-0.5.1.1:Data.Array.IArray 606f8bb830eb2a88c29c91f27c77f304
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Arr dbae05e7a9c0aba55cc706ecf0406507
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Enum 3811281f7b5f26da514529cf3ed44009
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Read b6821365d2d5fa2155c9e910160e7f57
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Text.ParserCombinators.ReadPrec 5a182a8d6deb0f7d67aed5fab08a5cc0
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  base-4.9.1.0:Text.Read.Lex 16199fac3c6c2d64cc7c268f3c0d2269
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 20d4ffbee41965d03d6a989425473dc4
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base a29df8c78ba14cbcd4d90f97bd8d22e9
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 318df275d77dcdb18e0006d8d7870c2a
import  -/  split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split c60198a427bfd51d9fb4562c059ec1d2
import  -/  split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals 84cef3a4becd62b741fe379ec3b99783
d668358e4ab5e6774fd62fda536c7903
  $fBoundedGeneState :: GHC.Enum.Bounded Types.GeneState
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.GeneState
                  Types.$fBoundedGeneState_$cminBound
                  Types.$fBoundedGeneState_$cmaxBound -}
525bb21f8fe4ee1fd2b229c2b471f7df
  $fBoundedGeneState1 :: GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.maxBound} True False} GHC.Types.True) -}
182626c9bf010322f83568ab89b158b5
  $fBoundedGeneState2 :: GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.minBound} True False} GHC.Types.False) -}
d668358e4ab5e6774fd62fda536c7903
  $fBoundedGeneState_$cmaxBound :: Types.GeneState
  {- Unfolding: InlineRule (0, True, True)
                Types.$fBoundedGeneState1 `cast` (Sym (Types.N:GeneState[0])) -}
d668358e4ab5e6774fd62fda536c7903
  $fBoundedGeneState_$cminBound :: Types.GeneState
  {- Unfolding: InlineRule (0, True, True)
                Types.$fBoundedGeneState2 `cast` (Sym (Types.N:GeneState[0])) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fBoundedThres :: GHC.Enum.Bounded Types.Thres
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Thres
                  Types.$fBoundedThres_$cminBound
                  Types.$fBoundedThres_$cmaxBound -}
3080d917bbc7ac1a8c60c3242988dab9
  $fBoundedThres1 :: GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.maxBound} True False} GHC.Base.maxInt) -}
f175a15155a3ce01f7d98aa06fcce18c
  $fBoundedThres2 :: GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.minBound} True False} GHC.Base.minInt) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fBoundedThres_$cmaxBound :: Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fBoundedThres1 `cast` (Sym (Types.N:Thres[0])) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fBoundedThres_$cminBound :: Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fBoundedThres2 `cast` (Sym (Types.N:Thres[0])) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fBoundedWeight :: GHC.Enum.Bounded Types.Weight
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Weight
                  Types.$fBoundedWeight_$cminBound
                  Types.$fBoundedWeight_$cmaxBound -}
da31e06ffc0c75e530ccf907ce242156
  $fBoundedWeight1 :: GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.maxBound} True False} GHC.Base.maxInt) -}
5241c8db28d6f26dc54b50cb6cad37d3
  $fBoundedWeight2 :: GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.minBound} True False} GHC.Base.minInt) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fBoundedWeight_$cmaxBound :: Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fBoundedWeight1 `cast` (Sym (Types.N:Weight[0])) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fBoundedWeight_$cminBound :: Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fBoundedWeight2 `cast` (Sym (Types.N:Weight[0])) -}
d668358e4ab5e6774fd62fda536c7903
  $fEnumGeneState :: GHC.Enum.Enum Types.GeneState
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.GeneState
                  Types.$fEnumGeneState_$csucc
                  Types.$fEnumGeneState_$cpred
                  Types.$fEnumGeneState_$ctoEnum
                  Types.$fEnumGeneState_$cfromEnum
                  Types.$fEnumGeneState_$cenumFrom
                  Types.$fEnumGeneState_$cenumFromThen
                  Types.$fEnumGeneState_$cenumFromTo
                  Types.$fEnumGeneState_$cenumFromThenTo -}
5b05136c6849b5d0cfb93bfbb4a70e6c
  $fEnumGeneState1 ::
    GHC.Types.Bool
    -> GHC.Types.Bool -> GHC.Types.Bool -> [GHC.Types.Bool]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.enumFromThenTo} True True} GHC.Enum.$fEnumBool_$cenumFromThenTo) -}
df0fc79d6ba8a6e45c7dbfa4ff7897ce
  $fEnumGeneState2 ::
    GHC.Types.Bool -> GHC.Types.Bool -> [GHC.Types.Bool]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.enumFromTo} True True} GHC.Enum.$fEnumBool_$cenumFromTo) -}
f52d2a3187b55e68521e4eeb2eee1673
  $fEnumGeneState3 ::
    GHC.Types.Bool -> GHC.Types.Bool -> [GHC.Types.Bool]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.enumFromThen} True True} GHC.Enum.$fEnumBool_$sboundedEnumFromThen) -}
08df3f2881ebb604651c13f8a33750b8
  $fEnumGeneState4 :: GHC.Types.Bool -> [GHC.Types.Bool]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.enumFrom} True True} GHC.Enum.$fEnumBool_$cenumFrom) -}
032e36f72346dbbbb39c0c5b55b2b867
  $fEnumGeneState5 :: GHC.Types.Bool -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.fromEnum} True True} GHC.Enum.$fEnumBool_$cfromEnum) -}
f582893845cf8692c5089564d2a6ee78
  $fEnumGeneState6 :: GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.toEnum} True True} GHC.Enum.$fEnumBool_$ctoEnum) -}
c4f07b837b285b9db0e04a94b06df524
  $fEnumGeneState7 :: GHC.Types.Bool -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.pred} True True} GHC.Enum.$fEnumBool_$cpred) -}
25f73afd51ca2c83b3bcd1a882c2cb4b
  $fEnumGeneState8 :: GHC.Types.Bool -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.succ} True True} GHC.Enum.$fEnumBool_$csucc) -}
d668358e4ab5e6774fd62fda536c7903
  $fEnumGeneState_$cenumFrom :: Types.GeneState -> [Types.GeneState]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumGeneState4
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R ([Sym (Types.N:GeneState[0])])_R) -}
d668358e4ab5e6774fd62fda536c7903
  $fEnumGeneState_$cenumFromThen ::
    Types.GeneState -> Types.GeneState -> [Types.GeneState]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumGeneState3
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R ([Sym (Types.N:GeneState[0])])_R) -}
d668358e4ab5e6774fd62fda536c7903
  $fEnumGeneState_$cenumFromThenTo ::
    Types.GeneState
    -> Types.GeneState -> Types.GeneState -> [Types.GeneState]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumGeneState1
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R ([Sym (Types.N:GeneState[0])])_R) -}
d668358e4ab5e6774fd62fda536c7903
  $fEnumGeneState_$cenumFromTo ::
    Types.GeneState -> Types.GeneState -> [Types.GeneState]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumGeneState2
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R ([Sym (Types.N:GeneState[0])])_R) -}
d668358e4ab5e6774fd62fda536c7903
  $fEnumGeneState_$cfromEnum :: Types.GeneState -> GHC.Types.Int
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumGeneState5
                  `cast`
                (Sym (Types.N:GeneState[0]) ->_R <GHC.Types.Int>_R) -}
d668358e4ab5e6774fd62fda536c7903
  $fEnumGeneState_$cpred :: Types.GeneState -> Types.GeneState
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumGeneState7
                  `cast`
                (Sym (Types.N:GeneState[0]) ->_R Sym (Types.N:GeneState[0])) -}
d668358e4ab5e6774fd62fda536c7903
  $fEnumGeneState_$csucc :: Types.GeneState -> Types.GeneState
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumGeneState8
                  `cast`
                (Sym (Types.N:GeneState[0]) ->_R Sym (Types.N:GeneState[0])) -}
d668358e4ab5e6774fd62fda536c7903
  $fEnumGeneState_$ctoEnum :: GHC.Types.Int -> Types.GeneState
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumGeneState6
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Types.N:GeneState[0])) -}
f02152849ccc1a6d1ba195f399237c56
  $fEnumID :: GHC.Enum.Enum Types.ID
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.ID
                  Types.$fEnumID_$csucc
                  Types.$fEnumID_$cpred
                  Types.$fEnumID_$ctoEnum
                  Types.$fEnumID_$cfromEnum
                  Types.$fEnumID_$cenumFrom
                  Types.$fEnumID_$cenumFromThen
                  Types.$fEnumID_$cenumFromTo
                  Types.$fEnumID_$cenumFromThenTo -}
bee67a053efe99828327851f2317cda7
  $fEnumID1 ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Int]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.enumFromThenTo} True True} GHC.Enum.$fEnumInt_$cenumFromThenTo) -}
b920c613107d23b45086d5eb113d20e5
  $fEnumID2 :: GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Int]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.enumFromTo} True True} GHC.Enum.$fEnumInt_$cenumFromTo) -}
5b56216d39198a373a138ee8fb73599b
  $fEnumID3 :: GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Int]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.enumFromThen} True True} GHC.Enum.$fEnumInt_$cenumFromThen) -}
d006bff5ca38f7b64dba3a950d10a7d5
  $fEnumID4 :: GHC.Types.Int -> [GHC.Types.Int]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.enumFrom} True True} GHC.Enum.$fEnumInt_$cenumFrom) -}
e9ea5830aa38218beef39456e839c6cd
  $fEnumID5 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.fromEnum} True True} GHC.Enum.$fEnumInt_$cfromEnum) -}
3b5a54bbd90e21f950901e95b78ae0cc
  $fEnumID6 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.toEnum} True True} GHC.Enum.$fEnumInt_$cfromEnum) -}
c09b2f789d864dac7895b603d9bbd05b
  $fEnumID7 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.pred} True True} GHC.Enum.$fEnumInt_$cpred) -}
bd1bffe3dc729657d94b0da5146229f3
  $fEnumID8 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.succ} True True} GHC.Enum.$fEnumInt_$csucc) -}
f02152849ccc1a6d1ba195f399237c56
  $fEnumID_$cenumFrom :: Types.ID -> [Types.ID]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumID4
                  `cast`
                (Sym (Types.N:ID[0]) ->_R ([Sym (Types.N:ID[0])])_R) -}
f02152849ccc1a6d1ba195f399237c56
  $fEnumID_$cenumFromThen :: Types.ID -> Types.ID -> [Types.ID]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumID3
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R ([Sym (Types.N:ID[0])])_R) -}
f02152849ccc1a6d1ba195f399237c56
  $fEnumID_$cenumFromThenTo ::
    Types.ID -> Types.ID -> Types.ID -> [Types.ID]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumID1
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R ([Sym (Types.N:ID[0])])_R) -}
f02152849ccc1a6d1ba195f399237c56
  $fEnumID_$cenumFromTo :: Types.ID -> Types.ID -> [Types.ID]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumID2
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R ([Sym (Types.N:ID[0])])_R) -}
f02152849ccc1a6d1ba195f399237c56
  $fEnumID_$cfromEnum :: Types.ID -> GHC.Types.Int
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumID5
                  `cast`
                (Sym (Types.N:ID[0]) ->_R <GHC.Types.Int>_R) -}
f02152849ccc1a6d1ba195f399237c56
  $fEnumID_$cpred :: Types.ID -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumID7
                  `cast`
                (Sym (Types.N:ID[0]) ->_R Sym (Types.N:ID[0])) -}
f02152849ccc1a6d1ba195f399237c56
  $fEnumID_$csucc :: Types.ID -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumID8
                  `cast`
                (Sym (Types.N:ID[0]) ->_R Sym (Types.N:ID[0])) -}
f02152849ccc1a6d1ba195f399237c56
  $fEnumID_$ctoEnum :: GHC.Types.Int -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumID6
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Types.N:ID[0])) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fEnumThres :: GHC.Enum.Enum Types.Thres
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Thres
                  Types.$fEnumThres_$csucc
                  Types.$fEnumThres_$cpred
                  Types.$fEnumThres_$ctoEnum
                  Types.$fEnumThres_$cfromEnum
                  Types.$fEnumThres_$cenumFrom
                  Types.$fEnumThres_$cenumFromThen
                  Types.$fEnumThres_$cenumFromTo
                  Types.$fEnumThres_$cenumFromThenTo -}
0eaafc9893ae0b78cfe22a21a866eab0
  $fEnumThres1 ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Int]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.enumFromThenTo} True True} GHC.Enum.$fEnumInt_$cenumFromThenTo) -}
73f7cbf31fe6a4ea72363aa19025821d
  $fEnumThres2 :: GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Int]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.enumFromTo} True True} GHC.Enum.$fEnumInt_$cenumFromTo) -}
0ad0ed3f53f4af49c940b7e2ad754e47
  $fEnumThres3 :: GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Int]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.enumFromThen} True True} GHC.Enum.$fEnumInt_$cenumFromThen) -}
fe9d2b15736c5716e62f2213e668f931
  $fEnumThres4 :: GHC.Types.Int -> [GHC.Types.Int]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.enumFrom} True True} GHC.Enum.$fEnumInt_$cenumFrom) -}
0cefbd6dca994f12c474ed113b0e14d7
  $fEnumThres5 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.fromEnum} True True} GHC.Enum.$fEnumInt_$cfromEnum) -}
33f6d6cf050404825ee07857832abc20
  $fEnumThres6 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.toEnum} True True} GHC.Enum.$fEnumInt_$cfromEnum) -}
821c74b845e3121864f39093b207d08a
  $fEnumThres7 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.pred} True True} GHC.Enum.$fEnumInt_$cpred) -}
4a59b521fd512ae40800c2afe730e603
  $fEnumThres8 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.succ} True True} GHC.Enum.$fEnumInt_$csucc) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fEnumThres_$cenumFrom :: Types.Thres -> [Types.Thres]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumThres4
                  `cast`
                (Sym (Types.N:Thres[0]) ->_R ([Sym (Types.N:Thres[0])])_R) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fEnumThres_$cenumFromThen ::
    Types.Thres -> Types.Thres -> [Types.Thres]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumThres3
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R ([Sym (Types.N:Thres[0])])_R) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fEnumThres_$cenumFromThenTo ::
    Types.Thres -> Types.Thres -> Types.Thres -> [Types.Thres]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumThres1
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R ([Sym (Types.N:Thres[0])])_R) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fEnumThres_$cenumFromTo ::
    Types.Thres -> Types.Thres -> [Types.Thres]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumThres2
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R ([Sym (Types.N:Thres[0])])_R) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fEnumThres_$cfromEnum :: Types.Thres -> GHC.Types.Int
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumThres5
                  `cast`
                (Sym (Types.N:Thres[0]) ->_R <GHC.Types.Int>_R) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fEnumThres_$cpred :: Types.Thres -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumThres7
                  `cast`
                (Sym (Types.N:Thres[0]) ->_R Sym (Types.N:Thres[0])) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fEnumThres_$csucc :: Types.Thres -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumThres8
                  `cast`
                (Sym (Types.N:Thres[0]) ->_R Sym (Types.N:Thres[0])) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fEnumThres_$ctoEnum :: GHC.Types.Int -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumThres6
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Types.N:Thres[0])) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fEnumWeight :: GHC.Enum.Enum Types.Weight
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Weight
                  Types.$fEnumWeight_$csucc
                  Types.$fEnumWeight_$cpred
                  Types.$fEnumWeight_$ctoEnum
                  Types.$fEnumWeight_$cfromEnum
                  Types.$fEnumWeight_$cenumFrom
                  Types.$fEnumWeight_$cenumFromThen
                  Types.$fEnumWeight_$cenumFromTo
                  Types.$fEnumWeight_$cenumFromThenTo -}
33ad8833010faf993a2fbc8debb4b42f
  $fEnumWeight1 ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Int]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.enumFromThenTo} True True} GHC.Enum.$fEnumInt_$cenumFromThenTo) -}
78ea0f24771cf2650450f9b1c781d3ce
  $fEnumWeight2 :: GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Int]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.enumFromTo} True True} GHC.Enum.$fEnumInt_$cenumFromTo) -}
1309ff52096cc71d6567bd06d70a6e4d
  $fEnumWeight3 :: GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Int]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.enumFromThen} True True} GHC.Enum.$fEnumInt_$cenumFromThen) -}
462668fd2aba280818cde97bcebac904
  $fEnumWeight4 :: GHC.Types.Int -> [GHC.Types.Int]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.enumFrom} True True} GHC.Enum.$fEnumInt_$cenumFrom) -}
7572ba8633a1af98978a3090ddbeae1f
  $fEnumWeight5 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.fromEnum} True True} GHC.Enum.$fEnumInt_$cfromEnum) -}
5e471552f5591a12c37cf33b58891a65
  $fEnumWeight6 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.toEnum} True True} GHC.Enum.$fEnumInt_$cfromEnum) -}
7c483ac553ea0b95e19156f26533532d
  $fEnumWeight7 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.pred} True True} GHC.Enum.$fEnumInt_$cpred) -}
40168c8e105727860d5983a244d040a5
  $fEnumWeight8 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.succ} True True} GHC.Enum.$fEnumInt_$csucc) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fEnumWeight_$cenumFrom :: Types.Weight -> [Types.Weight]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumWeight4
                  `cast`
                (Sym (Types.N:Weight[0]) ->_R ([Sym (Types.N:Weight[0])])_R) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fEnumWeight_$cenumFromThen ::
    Types.Weight -> Types.Weight -> [Types.Weight]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumWeight3
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R ([Sym (Types.N:Weight[0])])_R) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fEnumWeight_$cenumFromThenTo ::
    Types.Weight -> Types.Weight -> Types.Weight -> [Types.Weight]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumWeight1
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R ([Sym (Types.N:Weight[0])])_R) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fEnumWeight_$cenumFromTo ::
    Types.Weight -> Types.Weight -> [Types.Weight]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumWeight2
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R ([Sym (Types.N:Weight[0])])_R) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fEnumWeight_$cfromEnum :: Types.Weight -> GHC.Types.Int
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumWeight5
                  `cast`
                (Sym (Types.N:Weight[0]) ->_R <GHC.Types.Int>_R) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fEnumWeight_$cpred :: Types.Weight -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumWeight7
                  `cast`
                (Sym (Types.N:Weight[0]) ->_R Sym (Types.N:Weight[0])) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fEnumWeight_$csucc :: Types.Weight -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumWeight8
                  `cast`
                (Sym (Types.N:Weight[0]) ->_R Sym (Types.N:Weight[0])) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fEnumWeight_$ctoEnum :: GHC.Types.Int -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumWeight6
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Types.N:Weight[0])) -}
96dc13c40ccb216e8863ab97a7d41886
  $fEqAgent :: GHC.Classes.Eq Types.Agent
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Agent Types.$fEqAgent_$c== Types.$fEqAgent_$c/= -}
bee892afcc17e884034881e6dcb1566a
  $fEqAgent1 ::
    Data.Map.Base.Map Types.ID Types.GeneState
    -> Data.Map.Base.Map Types.ID Types.GeneState -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.==} False True} Data.Map.Base.$fEqMap_$c==
                                                                                              @ Types.ID
                                                                                              @ Types.GeneState
                                                                                              Types.$fEqID
                                                                                              Types.$fEqGeneState) -}
96dc13c40ccb216e8863ab97a7d41886
  $fEqAgent_$c/= :: Types.Agent -> Types.Agent -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Types.Agent) (b :: Types.Agent) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types./=} True True} case Types.$fEqAgent_$c==
                                                                                                  a
                                                                                                  b of wild {
                                                                                             GHC.Types.False
                                                                                             -> GHC.Types.True
                                                                                             GHC.Types.True
                                                                                             -> GHC.Types.False }) -}
96dc13c40ccb216e8863ab97a7d41886
  $fEqAgent_$c== :: Types.Agent -> Types.Agent -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.Agent) (ds1 :: Types.Agent) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.==} True True} case ds of wild {
                                                                                             Types.Agent a1 a2
                                                                                             -> case ds1 of wild1 {
                                                                                                  Types.Agent b1 b2
                                                                                                  -> case GHC.Classes.$fEq[]_$c==
                                                                                                            @ [Types.Locus]
                                                                                                            Types.$fEqAgent_$s$fEq[]
                                                                                                            a1
                                                                                                            b1 of wild2 {
                                                                                                       GHC.Types.False
                                                                                                       -> GHC.Types.False
                                                                                                       GHC.Types.True
                                                                                                       -> Types.$fEqAgent1
                                                                                                            a2
                                                                                                            b2 }
                                                                                                  Types.NoAgent
                                                                                                  -> GHC.Types.False }
                                                                                             Types.NoAgent
                                                                                             -> case ds1 of wild1 {
                                                                                                  Types.Agent ipv ipv1
                                                                                                  -> GHC.Types.False
                                                                                                  Types.NoAgent
                                                                                                  -> GHC.Types.True } }) -}
26bbd690e0fe6cb57a50e62ca7fb23b9
  $fEqAgent_$dEq :: GHC.Classes.Eq Types.Locus
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Types.$fEqLocus -}
060a23f4005effb3cc090b8a62b8d34d
  $fEqAgent_$s$fEq[] :: GHC.Classes.Eq [Types.Locus]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Types.Locus]
                  (GHC.Classes.$fEq[]_$c== @ Types.Locus Types.$fEqAgent_$dEq)
                  Types.$fEqAgent_$s$fEq[]_$c/= -}
c9551b114a419caff91484b053dd9b00
  $fEqAgent_$s$fEq[]_$c/= ::
    [Types.Locus] -> [Types.Locus] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: [Types.Locus]) (y :: [Types.Locus]) ->
                 GHC.Classes.not
                   (GHC.Classes.$fEq[]_$c==
                      @ Types.Locus
                      Types.$fEqAgent_$dEq
                      x
                      y)) -}
e61fa6692e0904f1e277a345501f370e
  $fEqGene :: GHC.Classes.Eq Types.Gene
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Gene Types.$fEqLocus_$c==1 Types.$fEqGene_$c/= -}
d668358e4ab5e6774fd62fda536c7903
  $fEqGeneState :: GHC.Classes.Eq Types.GeneState
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.GeneState
                  Types.$fEqGeneState_$c==
                  Types.$fEqGeneState_$c/= -}
acf8cb268f88c86e1d084c85d820a665
  $fEqGeneState1 ::
    GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types./=} True True} GHC.Classes.$fEqBool_$c/=) -}
b9b18c422b52701da43f83c586bd8175
  $fEqGeneState2 ::
    GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.==} True True} GHC.Classes.$fEqBool_$c==) -}
d668358e4ab5e6774fd62fda536c7903
  $fEqGeneState_$c/= ::
    Types.GeneState -> Types.GeneState -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEqGeneState1
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R <GHC.Types.Bool>_R) -}
d668358e4ab5e6774fd62fda536c7903
  $fEqGeneState_$c== ::
    Types.GeneState -> Types.GeneState -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEqGeneState2
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R <GHC.Types.Bool>_R) -}
e61fa6692e0904f1e277a345501f370e
  $fEqGene_$c/= :: Types.Gene -> Types.Gene -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U,U,U)><S,1*U(U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Types.Gene) (b :: Types.Gene) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types./=} True True} case Types.$fEqLocus_$c==1
                                                                                                  a
                                                                                                  b of wild {
                                                                                             GHC.Types.False
                                                                                             -> GHC.Types.True
                                                                                             GHC.Types.True
                                                                                             -> GHC.Types.False }) -}
f02152849ccc1a6d1ba195f399237c56
  $fEqID :: GHC.Classes.Eq Types.ID
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:. @ Types.ID Types.$fEqID_$c== Types.$fEqID_$c/= -}
b06e73dd46d553ce5ba789c7b5745ba2
  $fEqID1 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types./=} True True} GHC.Classes.neInt) -}
f9f90d5f05d33688c50d704827b7425d
  $fEqID2 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.==} True True} GHC.Classes.eqInt) -}
f02152849ccc1a6d1ba195f399237c56
  $fEqID_$c/= :: Types.ID -> Types.ID -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEqID1
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R <GHC.Types.Bool>_R) -}
f02152849ccc1a6d1ba195f399237c56
  $fEqID_$c== :: Types.ID -> Types.ID -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEqID2
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R <GHC.Types.Bool>_R) -}
00852ab6e68f9437488a4b665181bda8
  $fEqLocus :: GHC.Classes.Eq Types.Locus
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Locus Types.$fEqLocus_$c==2 Types.$fEqLocus_$c/= -}
5b17c3446a6fbe8e3f75e418cc20f8ef
  $fEqLocus1 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.==} True True} GHC.Classes.eqInt) -}
ed041dba66e0164b5a73a0cfc7132c49
  $fEqLocus2 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.==} True True} GHC.Classes.eqInt) -}
00852ab6e68f9437488a4b665181bda8
  $fEqLocus_$c/= :: Types.Locus -> Types.Locus -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Locus) (b :: Types.Locus) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types./=} True True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.==} True False} case a of wild {
                                                                                                                                                                        Types.Transposon
                                                                                                                                                                        -> case b of wild1 {
                                                                                                                                                                             DEFAULT
                                                                                                                                                                             -> GHC.Types.True
                                                                                                                                                                             Types.Transposon
                                                                                                                                                                             -> GHC.Types.False }
                                                                                                                                                                        Types.CGene a1
                                                                                                                                                                        -> case b of wild1 {
                                                                                                                                                                             DEFAULT
                                                                                                                                                                             -> GHC.Types.True
                                                                                                                                                                             Types.CGene b1
                                                                                                                                                                             -> case {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.==} False True} Types.$fEqLocus_$c==1
                                                                                                                                                                                                                                                                  a1
                                                                                                                                                                                                                                                                  b1 of wild2 {
                                                                                                                                                                                  GHC.Types.False
                                                                                                                                                                                  -> GHC.Types.True
                                                                                                                                                                                  GHC.Types.True
                                                                                                                                                                                  -> GHC.Types.False } }
                                                                                                                                                                        Types.CTfbs a1
                                                                                                                                                                        -> case b of wild1 {
                                                                                                                                                                             DEFAULT
                                                                                                                                                                             -> GHC.Types.True
                                                                                                                                                                             Types.CTfbs b1
                                                                                                                                                                             -> case {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.==} False True} Types.$fEqLocus_$c==
                                                                                                                                                                                                                                                                  a1
                                                                                                                                                                                                                                                                  b1 of wild2 {
                                                                                                                                                                                  GHC.Types.False
                                                                                                                                                                                  -> GHC.Types.True
                                                                                                                                                                                  GHC.Types.True
                                                                                                                                                                                  -> GHC.Types.False } } }) -}
c364d1799620a5ba7a05a7f6bbc17a6f
  $fEqLocus_$c== :: Types.Tfbs -> Types.Tfbs -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U,U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Tfbs) (w1 :: Types.Tfbs) ->
                 case w of ww { Types.Tfbs ww1 ww2 ->
                 case w1 of ww3 { Types.Tfbs ww4 ww5 ->
                 Types.$w$c== ww1 ww2 ww4 ww5 } }) -}
e61fa6692e0904f1e277a345501f370e
  $fEqLocus_$c==1 :: Types.Gene -> Types.Gene -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U,U,U)><S,1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Gene) (w1 :: Types.Gene) ->
                 case w of ww { Types.Gene ww1 ww2 ww3 ->
                 case w1 of ww4 { Types.Gene ww5 ww6 ww7 ->
                 Types.$w$c==1 ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
00852ab6e68f9437488a4b665181bda8
  $fEqLocus_$c==2 :: Types.Locus -> Types.Locus -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.Locus) (ds1 :: Types.Locus) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.==} True True} case ds of wild {
                                                                                             Types.Transposon
                                                                                             -> case ds1 of wild1 {
                                                                                                  DEFAULT
                                                                                                  -> GHC.Types.False
                                                                                                  Types.Transposon
                                                                                                  -> GHC.Types.True }
                                                                                             Types.CGene a1
                                                                                             -> case ds1 of wild1 {
                                                                                                  DEFAULT
                                                                                                  -> GHC.Types.False
                                                                                                  Types.CGene b1
                                                                                                  -> Types.$fEqLocus_$c==1
                                                                                                       a1
                                                                                                       b1 }
                                                                                             Types.CTfbs a1
                                                                                             -> case ds1 of wild1 {
                                                                                                  DEFAULT
                                                                                                  -> GHC.Types.False
                                                                                                  Types.CTfbs b1
                                                                                                  -> Types.$fEqLocus_$c==
                                                                                                       a1
                                                                                                       b1 } }) -}
c364d1799620a5ba7a05a7f6bbc17a6f
  $fEqTfbs :: GHC.Classes.Eq Types.Tfbs
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Tfbs Types.$fEqLocus_$c== Types.$fEqTfbs_$c/= -}
c364d1799620a5ba7a05a7f6bbc17a6f
  $fEqTfbs_$c/= :: Types.Tfbs -> Types.Tfbs -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U,U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Tfbs) (w1 :: Types.Tfbs) ->
                 case w of ww { Types.Tfbs ww1 ww2 ->
                 case w1 of ww3 { Types.Tfbs ww4 ww5 ->
                 Types.$w$c/= ww1 ww2 ww4 ww5 } }) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fEqThres :: GHC.Classes.Eq Types.Thres
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Thres Types.$fEqThres_$c== Types.$fEqThres_$c/= -}
4b8809daf209c7354ba719f1faadc1f9
  $fEqThres1 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types./=} True True} GHC.Classes.neInt) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fEqThres_$c/= :: Types.Thres -> Types.Thres -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEqThres1
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R <GHC.Types.Bool>_R) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fEqThres_$c== :: Types.Thres -> Types.Thres -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEqLocus2
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R <GHC.Types.Bool>_R) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fEqWeight :: GHC.Classes.Eq Types.Weight
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Weight Types.$fEqWeight_$c== Types.$fEqWeight_$c/= -}
ef11eac939be417fc0d953f181ba300a
  $fEqWeight1 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types./=} True True} GHC.Classes.neInt) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fEqWeight_$c/= :: Types.Weight -> Types.Weight -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEqWeight1
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R <GHC.Types.Bool>_R) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fEqWeight_$c== :: Types.Weight -> Types.Weight -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEqLocus1
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R <GHC.Types.Bool>_R) -}
635c0c78b6464dfb26f8335f12eb635d
  $fGeneTypeGene :: Types.GeneType Types.Gene
  DFunId
  {- Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Types.$fGeneTypeGene_$ciD
                  `cast`
                (Sym (Types.N:GeneType[0] <Types.Gene>_N)) -}
a01e2b8bbdf7f6ddea032e9f85f85229
  $fGeneTypeGene_$ciD :: Types.Gene -> Types.ID
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.iD} True True} Types.geneID) -}
635c0c78b6464dfb26f8335f12eb635d
  $fGeneTypeTfbs :: Types.GeneType Types.Tfbs
  DFunId
  {- Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Types.$fGeneTypeTfbs_$ciD
                  `cast`
                (Sym (Types.N:GeneType[0] <Types.Tfbs>_N)) -}
05a4554214367b7d69b833e74b700f98
  $fGeneTypeTfbs_$ciD :: Types.Tfbs -> Types.ID
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.iD} True True} Types.tfbsID) -}
f02152849ccc1a6d1ba195f399237c56
  $fIntegralID :: GHC.Real.Integral Types.ID
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.ID
                  Types.$fRealID
                  Types.$fEnumID
                  Types.$fIntegralID_$cquot
                  Types.$fIntegralID_$crem
                  Types.$fIntegralID_$cdiv
                  Types.$fIntegralID_$cmod
                  Types.$fIntegralID_$cquotRem
                  Types.$fIntegralID_$cdivMod
                  Types.$fIntegralID_$ctoInteger -}
0b40e1878fd871e243ea2876c5a8e010
  $fIntegralID1 :: GHC.Types.Int -> GHC.Integer.Type.Integer
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.toInteger} True True} GHC.Real.$fIntegralInt_$ctoInteger) -}
498973d4056ad32da0a1287fdf71a367
  $fIntegralID2 ::
    GHC.Types.Int -> GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int)
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.divMod} True True} GHC.Real.$fIntegralInt_$cdivMod) -}
c1116ead05d0acad643c68ef071eae5b
  $fIntegralID3 ::
    GHC.Types.Int -> GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int)
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.quotRem} True True} GHC.Real.$fIntegralInt_$cquotRem) -}
e95e95c3312088364bdf9dea4abc918d
  $fIntegralID4 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.mod} True True} GHC.Real.$fIntegralInt_$cmod) -}
d38c3b973e2ba6e44f057e3834731b39
  $fIntegralID5 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.div} True True} GHC.Real.$fIntegralInt_$cdiv) -}
01b6e3c12454f47e825b6d0966e8db2d
  $fIntegralID6 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.rem} True True} GHC.Real.$fIntegralInt_$crem) -}
8383f235ff0bb2259a503ad9dffb3c33
  $fIntegralID7 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.quot} True True} GHC.Real.$fIntegralInt_$cquot) -}
f02152849ccc1a6d1ba195f399237c56
  $fIntegralID_$cdiv :: Types.ID -> Types.ID -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralID5
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])) -}
f02152849ccc1a6d1ba195f399237c56
  $fIntegralID_$cdivMod ::
    Types.ID -> Types.ID -> (Types.ID, Types.ID)
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralID2
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R ((,) (Sym (Types.N:ID[0])) (Sym (Types.N:ID[0])))_R) -}
f02152849ccc1a6d1ba195f399237c56
  $fIntegralID_$cmod :: Types.ID -> Types.ID -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralID4
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])) -}
f02152849ccc1a6d1ba195f399237c56
  $fIntegralID_$cquot :: Types.ID -> Types.ID -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralID7
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])) -}
f02152849ccc1a6d1ba195f399237c56
  $fIntegralID_$cquotRem ::
    Types.ID -> Types.ID -> (Types.ID, Types.ID)
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralID3
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R ((,) (Sym (Types.N:ID[0])) (Sym (Types.N:ID[0])))_R) -}
f02152849ccc1a6d1ba195f399237c56
  $fIntegralID_$crem :: Types.ID -> Types.ID -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralID6
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])) -}
f02152849ccc1a6d1ba195f399237c56
  $fIntegralID_$ctoInteger :: Types.ID -> GHC.Integer.Type.Integer
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralID1
                  `cast`
                (Sym (Types.N:ID[0]) ->_R <GHC.Integer.Type.Integer>_R) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fIntegralThres :: GHC.Real.Integral Types.Thres
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Thres
                  Types.$fRealThres
                  Types.$fEnumThres
                  Types.$fIntegralThres_$cquot
                  Types.$fIntegralThres_$crem
                  Types.$fIntegralThres_$cdiv
                  Types.$fIntegralThres_$cmod
                  Types.$fIntegralThres_$cquotRem
                  Types.$fIntegralThres_$cdivMod
                  Types.$fIntegralThres_$ctoInteger -}
f787c04e0e9b880a2bce58d3df6abe14
  $fIntegralThres1 :: GHC.Types.Int -> GHC.Integer.Type.Integer
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.toInteger} True True} GHC.Real.$fIntegralInt_$ctoInteger) -}
e05bf80dec119a8d3504367dd5d65776
  $fIntegralThres2 ::
    GHC.Types.Int -> GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int)
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.divMod} True True} GHC.Real.$fIntegralInt_$cdivMod) -}
d52036e1a1bd547c629296f2d172f44f
  $fIntegralThres3 ::
    GHC.Types.Int -> GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int)
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.quotRem} True True} GHC.Real.$fIntegralInt_$cquotRem) -}
e45ca0cb1a7476feb053e484aa3a1e0d
  $fIntegralThres4 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.mod} True True} GHC.Real.$fIntegralInt_$cmod) -}
80a222ecb56d7a61dcaa9b71d1811b68
  $fIntegralThres5 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.div} True True} GHC.Real.$fIntegralInt_$cdiv) -}
0492888ddc5493766e07d2f6105f9fd7
  $fIntegralThres6 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.rem} True True} GHC.Real.$fIntegralInt_$crem) -}
65c1b237e66b89c29a98a97d0d80a70e
  $fIntegralThres7 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.quot} True True} GHC.Real.$fIntegralInt_$cquot) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fIntegralThres_$cdiv :: Types.Thres -> Types.Thres -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralThres5
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fIntegralThres_$cdivMod ::
    Types.Thres -> Types.Thres -> (Types.Thres, Types.Thres)
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralThres2
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R ((,) (Sym (Types.N:Thres[0])) (Sym (Types.N:Thres[0])))_R) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fIntegralThres_$cmod :: Types.Thres -> Types.Thres -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralThres4
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fIntegralThres_$cquot :: Types.Thres -> Types.Thres -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralThres7
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fIntegralThres_$cquotRem ::
    Types.Thres -> Types.Thres -> (Types.Thres, Types.Thres)
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralThres3
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R ((,) (Sym (Types.N:Thres[0])) (Sym (Types.N:Thres[0])))_R) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fIntegralThres_$crem :: Types.Thres -> Types.Thres -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralThres6
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fIntegralThres_$ctoInteger ::
    Types.Thres -> GHC.Integer.Type.Integer
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralThres1
                  `cast`
                (Sym (Types.N:Thres[0]) ->_R <GHC.Integer.Type.Integer>_R) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fIntegralWeight :: GHC.Real.Integral Types.Weight
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Weight
                  Types.$fRealWeight
                  Types.$fEnumWeight
                  Types.$fIntegralWeight_$cquot
                  Types.$fIntegralWeight_$crem
                  Types.$fIntegralWeight_$cdiv
                  Types.$fIntegralWeight_$cmod
                  Types.$fIntegralWeight_$cquotRem
                  Types.$fIntegralWeight_$cdivMod
                  Types.$fIntegralWeight_$ctoInteger -}
1363fa84a429bdac081c22261455d6dd
  $fIntegralWeight1 :: GHC.Types.Int -> GHC.Integer.Type.Integer
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.toInteger} True True} GHC.Real.$fIntegralInt_$ctoInteger) -}
90e659498b8e59cd47d16995137905cf
  $fIntegralWeight2 ::
    GHC.Types.Int -> GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int)
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.divMod} True True} GHC.Real.$fIntegralInt_$cdivMod) -}
e2e3c7d6d9817b7c0ec06cd797f0f86a
  $fIntegralWeight3 ::
    GHC.Types.Int -> GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int)
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.quotRem} True True} GHC.Real.$fIntegralInt_$cquotRem) -}
035d144bd699b70f68a41c6d73d22c10
  $fIntegralWeight4 ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.mod} True True} GHC.Real.$fIntegralInt_$cmod) -}
3437db5752e0a27d2b75c5b1625a9f55
  $fIntegralWeight5 ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.div} True True} GHC.Real.$fIntegralInt_$cdiv) -}
8c9f61f5f722c1a7ee250c130afbe4c3
  $fIntegralWeight6 ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.rem} True True} GHC.Real.$fIntegralInt_$crem) -}
1bde45b64e703bf1fac4aa75afa4cc05
  $fIntegralWeight7 ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.quot} True True} GHC.Real.$fIntegralInt_$cquot) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fIntegralWeight_$cdiv ::
    Types.Weight -> Types.Weight -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralWeight5
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fIntegralWeight_$cdivMod ::
    Types.Weight -> Types.Weight -> (Types.Weight, Types.Weight)
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralWeight2
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R ((,)
                         (Sym (Types.N:Weight[0])) (Sym (Types.N:Weight[0])))_R) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fIntegralWeight_$cmod ::
    Types.Weight -> Types.Weight -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralWeight4
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fIntegralWeight_$cquot ::
    Types.Weight -> Types.Weight -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralWeight7
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fIntegralWeight_$cquotRem ::
    Types.Weight -> Types.Weight -> (Types.Weight, Types.Weight)
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralWeight3
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R ((,)
                         (Sym (Types.N:Weight[0])) (Sym (Types.N:Weight[0])))_R) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fIntegralWeight_$crem ::
    Types.Weight -> Types.Weight -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralWeight6
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fIntegralWeight_$ctoInteger ::
    Types.Weight -> GHC.Integer.Type.Integer
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralWeight1
                  `cast`
                (Sym (Types.N:Weight[0]) ->_R <GHC.Integer.Type.Integer>_R) -}
d668358e4ab5e6774fd62fda536c7903
  $fNumGeneState :: GHC.Num.Num Types.GeneState
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.GeneState
                  Types.$fNumGeneState_$c+
                  Types.$fNumGeneState_$c-
                  Types.$fNumGeneState_$c*
                  Types.$fNumGeneState_$cnegate
                  Types.$fNumGeneState_$cabs
                  Types.$fNumGeneState_$csignum
                  Types.$fNumGeneState_$cfromInteger -}
fafbaacfd40aae541752ecf7acfaa232
  $fNumGeneState1 :: GHC.Integer.Type.Integer -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: GHC.Integer.Type.Integer) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.fromInteger} True True} case GHC.Integer.Type.gtInteger#
                                                                                                           a
                                                                                                           Types.$fNumGeneState2 of wild { DEFAULT ->
                                                                                                    GHC.Prim.tagToEnum#
                                                                                                      @ GHC.Types.Bool
                                                                                                      wild }) -}
e7167ea67febea84a8f5633e345fad16
  $fNumGeneState2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
d668358e4ab5e6774fd62fda536c7903
  $fNumGeneState3 :: Types.GeneState -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Types.GeneState) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.negate} True True} GHC.Classes.not
                                                                                                 ds
                                                                                                   `cast`
                                                                                                 (Types.N:GeneState[0])) -}
d668358e4ab5e6774fd62fda536c7903
  $fNumGeneState4 ::
    Types.GeneState -> Types.GeneState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Types.GeneState) (ds1 :: Types.GeneState) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.+} True True} GHC.Classes.||
                                                                                            ds
                                                                                              `cast`
                                                                                            (Types.N:GeneState[0])
                                                                                            ds1
                                                                                              `cast`
                                                                                            (Types.N:GeneState[0])) -}
d668358e4ab5e6774fd62fda536c7903
  $fNumGeneState_$c* ::
    Types.GeneState -> Types.GeneState -> Types.GeneState
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Types.GeneState) (ds1 :: Types.GeneState) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.*} True True} case ds
                                                                                                 `cast`
                                                                                               (Types.N:GeneState[0]) of wild {
                                                                                            GHC.Types.False
                                                                                            -> case ds1
                                                                                                      `cast`
                                                                                                    (Types.N:GeneState[0]) of wild1 {
                                                                                                 GHC.Types.False
                                                                                                 -> GHC.Types.True
                                                                                                      `cast`
                                                                                                    (Sym (Types.N:GeneState[0]))
                                                                                                 GHC.Types.True
                                                                                                 -> GHC.Types.False
                                                                                                      `cast`
                                                                                                    (Sym (Types.N:GeneState[0])) }
                                                                                            GHC.Types.True
                                                                                            -> GHC.Types.False
                                                                                                 `cast`
                                                                                               (Sym (Types.N:GeneState[0])) }) -}
d668358e4ab5e6774fd62fda536c7903
  $fNumGeneState_$c+ ::
    Types.GeneState -> Types.GeneState -> Types.GeneState
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (0, True, True)
                Types.$fNumGeneState4
                  `cast`
                (<Types.GeneState>_R
                 ->_R <Types.GeneState>_R
                 ->_R Sym (Types.N:GeneState[0])) -}
d668358e4ab5e6774fd62fda536c7903
  $fNumGeneState_$c- ::
    Types.GeneState -> Types.GeneState -> Types.GeneState
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.GeneState) (y :: Types.GeneState) ->
                 Types.$fNumGeneState_$c+ x (Types.$fNumGeneState_$cnegate y)) -}
d668358e4ab5e6774fd62fda536c7903
  $fNumGeneState_$cabs :: Types.GeneState -> Types.GeneState
  {- Unfolding: (({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.abs} True False} GHC.Base.id)
                   @ Types.GeneState) -}
d668358e4ab5e6774fd62fda536c7903
  $fNumGeneState_$cfromInteger ::
    GHC.Integer.Type.Integer -> Types.GeneState
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Types.$fNumGeneState1
                  `cast`
                (<GHC.Integer.Type.Integer>_R ->_R Sym (Types.N:GeneState[0])) -}
d668358e4ab5e6774fd62fda536c7903
  $fNumGeneState_$cnegate :: Types.GeneState -> Types.GeneState
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Types.$fNumGeneState3
                  `cast`
                (<Types.GeneState>_R ->_R Sym (Types.N:GeneState[0])) -}
d668358e4ab5e6774fd62fda536c7903
  $fNumGeneState_$csignum :: Types.GeneState -> Types.GeneState
  {- Unfolding: (({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.signum} True False} GHC.Base.id)
                   @ Types.GeneState) -}
f02152849ccc1a6d1ba195f399237c56
  $fNumID :: GHC.Num.Num Types.ID
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.ID
                  Types.$fNumID_$c+
                  Types.$fNumID_$c-
                  Types.$fNumID_$c*
                  Types.$fNumID_$cnegate
                  Types.$fNumID_$cabs
                  Types.$fNumID_$csignum
                  Types.$fNumID_$cfromInteger -}
f1cf4760009a7ed239104a6e633f9cec
  $fNumID1 :: GHC.Integer.Type.Integer -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.fromInteger} True True} GHC.Num.$fNumInt_$cfromInteger) -}
55fb2e1124c2506a3a5de529480e1f72
  $fNumID2 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.signum} True True} GHC.Num.$fNumInt_$csignum) -}
5a6d49a593bbcae0e1dfbc780f7a3eb2
  $fNumID3 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.abs} True True} GHC.Num.$fNumInt_$cabs) -}
97abda1e3ae0036006d193824bdf1cb1
  $fNumID4 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.negate} True True} GHC.Num.$fNumInt_$cnegate) -}
2a519bf340d9e389fe7d93230274dd0b
  $fNumID5 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.*} True True} GHC.Num.$fNumInt_$c*) -}
6fa5feff02667bb16825527f505cb31b
  $fNumID6 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.-} True True} GHC.Num.$fNumInt_$c-) -}
b91ee03f9ad3b0fe2213a32b5901823f
  $fNumID7 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.+} True True} GHC.Num.$fNumInt_$c+) -}
f02152849ccc1a6d1ba195f399237c56
  $fNumID_$c* :: Types.ID -> Types.ID -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumID5
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])) -}
f02152849ccc1a6d1ba195f399237c56
  $fNumID_$c+ :: Types.ID -> Types.ID -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumID7
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])) -}
f02152849ccc1a6d1ba195f399237c56
  $fNumID_$c- :: Types.ID -> Types.ID -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumID6
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])) -}
f02152849ccc1a6d1ba195f399237c56
  $fNumID_$cabs :: Types.ID -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumID3
                  `cast`
                (Sym (Types.N:ID[0]) ->_R Sym (Types.N:ID[0])) -}
f02152849ccc1a6d1ba195f399237c56
  $fNumID_$cfromInteger :: GHC.Integer.Type.Integer -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumID1
                  `cast`
                (<GHC.Integer.Type.Integer>_R ->_R Sym (Types.N:ID[0])) -}
f02152849ccc1a6d1ba195f399237c56
  $fNumID_$cnegate :: Types.ID -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumID4
                  `cast`
                (Sym (Types.N:ID[0]) ->_R Sym (Types.N:ID[0])) -}
f02152849ccc1a6d1ba195f399237c56
  $fNumID_$csignum :: Types.ID -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumID2
                  `cast`
                (Sym (Types.N:ID[0]) ->_R Sym (Types.N:ID[0])) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fNumThres :: GHC.Num.Num Types.Thres
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Thres
                  Types.$fNumThres_$c+
                  Types.$fNumThres_$c-
                  Types.$fNumThres_$c*
                  Types.$fNumThres_$cnegate
                  Types.$fNumThres_$cabs
                  Types.$fNumThres_$csignum
                  Types.$fNumThres_$cfromInteger -}
e5575dc9004b7c6defc0ee058f695278
  $fNumThres1 :: GHC.Integer.Type.Integer -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.fromInteger} True True} GHC.Num.$fNumInt_$cfromInteger) -}
8c6b52e2756b7c00e7057a234efcb264
  $fNumThres2 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.signum} True True} GHC.Num.$fNumInt_$csignum) -}
8cb97b16708d50b4637d8eb8467dd5b2
  $fNumThres3 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.abs} True True} GHC.Num.$fNumInt_$cabs) -}
1f98767ab04973ec12246373589ec35b
  $fNumThres4 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.negate} True True} GHC.Num.$fNumInt_$cnegate) -}
89331e64a03727610b4f7754522e3c01
  $fNumThres5 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.*} True True} GHC.Num.$fNumInt_$c*) -}
36b047ccb7509419439a612b3912ffa2
  $fNumThres6 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.-} True True} GHC.Num.$fNumInt_$c-) -}
3297681e0e62a8544a708237642c1dc1
  $fNumThres7 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.+} True True} GHC.Num.$fNumInt_$c+) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fNumThres_$c* :: Types.Thres -> Types.Thres -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumThres5
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fNumThres_$c+ :: Types.Thres -> Types.Thres -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumThres7
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fNumThres_$c- :: Types.Thres -> Types.Thres -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumThres6
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fNumThres_$cabs :: Types.Thres -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumThres3
                  `cast`
                (Sym (Types.N:Thres[0]) ->_R Sym (Types.N:Thres[0])) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fNumThres_$cfromInteger :: GHC.Integer.Type.Integer -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumThres1
                  `cast`
                (<GHC.Integer.Type.Integer>_R ->_R Sym (Types.N:Thres[0])) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fNumThres_$cnegate :: Types.Thres -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumThres4
                  `cast`
                (Sym (Types.N:Thres[0]) ->_R Sym (Types.N:Thres[0])) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fNumThres_$csignum :: Types.Thres -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumThres2
                  `cast`
                (Sym (Types.N:Thres[0]) ->_R Sym (Types.N:Thres[0])) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fNumWeight :: GHC.Num.Num Types.Weight
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Weight
                  Types.$fNumWeight_$c+
                  Types.$fNumWeight_$c-
                  Types.$fNumWeight_$c*
                  Types.$fNumWeight_$cnegate
                  Types.$fNumWeight_$cabs
                  Types.$fNumWeight_$csignum
                  Types.$fNumWeight_$cfromInteger -}
ea227863ad8801631872063e850de3d7
  $fNumWeight1 :: GHC.Integer.Type.Integer -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.fromInteger} True True} GHC.Num.$fNumInt_$cfromInteger) -}
796dcdc8871d0447e1911a8d95802ae9
  $fNumWeight2 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.signum} True True} GHC.Num.$fNumInt_$csignum) -}
16b25504b92dac02c9318a7bb9d579ef
  $fNumWeight3 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.abs} True True} GHC.Num.$fNumInt_$cabs) -}
4001cf4090285203966f2e458deb66f8
  $fNumWeight4 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.negate} True True} GHC.Num.$fNumInt_$cnegate) -}
9ceadf20c0d5518fd220c3ae9be2bdb1
  $fNumWeight5 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.*} True True} GHC.Num.$fNumInt_$c*) -}
4d6f1f3899e5572e4a8f7d9f003bc020
  $fNumWeight6 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.-} True True} GHC.Num.$fNumInt_$c-) -}
0b130353030d4c32bb91d58b11bcce62
  $fNumWeight7 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.+} True True} GHC.Num.$fNumInt_$c+) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fNumWeight_$c* :: Types.Weight -> Types.Weight -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumWeight5
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fNumWeight_$c+ :: Types.Weight -> Types.Weight -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumWeight7
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fNumWeight_$c- :: Types.Weight -> Types.Weight -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumWeight6
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fNumWeight_$cabs :: Types.Weight -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumWeight3
                  `cast`
                (Sym (Types.N:Weight[0]) ->_R Sym (Types.N:Weight[0])) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fNumWeight_$cfromInteger ::
    GHC.Integer.Type.Integer -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumWeight1
                  `cast`
                (<GHC.Integer.Type.Integer>_R ->_R Sym (Types.N:Weight[0])) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fNumWeight_$cnegate :: Types.Weight -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumWeight4
                  `cast`
                (Sym (Types.N:Weight[0]) ->_R Sym (Types.N:Weight[0])) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fNumWeight_$csignum :: Types.Weight -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumWeight2
                  `cast`
                (Sym (Types.N:Weight[0]) ->_R Sym (Types.N:Weight[0])) -}
96dc13c40ccb216e8863ab97a7d41886
  $fOrdAgent :: GHC.Classes.Ord Types.Agent
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Agent
                  Types.$fEqAgent
                  Types.$fOrdAgent_$ccompare
                  Types.$fOrdAgent_$c<
                  Types.$fOrdAgent_$c<=
                  Types.$fOrdAgent_$c>
                  Types.$fOrdAgent_$c>=
                  Types.$fOrdAgent_$cmax
                  Types.$fOrdAgent_$cmin -}
34ad32cc95b96d3f07424d7941291d91
  $fOrdAgent1 :: GHC.Classes.Ord (Types.ID, Types.GeneState)
  {- Unfolding: (GHC.Classes.$fOrd(,)
                   @ Types.ID
                   @ Types.GeneState
                   Types.$fOrdID
                   Types.$fOrdGeneState) -}
96dc13c40ccb216e8863ab97a7d41886
  $fOrdAgent_$c< :: Types.Agent -> Types.Agent -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Agent) (b :: Types.Agent) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.<} True True} case a of wild {
                                                                                            Types.Agent a1 a2
                                                                                            -> case b of wild1 {
                                                                                                 Types.Agent b1 b2
                                                                                                 -> case GHC.Classes.$fOrd[]_$ccompare
                                                                                                           @ [Types.Locus]
                                                                                                           Types.$fOrdAgent_$s$fOrd[]
                                                                                                           a1
                                                                                                           b1 of wild2 {
                                                                                                      GHC.Types.LT
                                                                                                      -> GHC.Types.True
                                                                                                      GHC.Types.EQ
                                                                                                      -> Data.Map.Base.$fOrdMap_$c<
                                                                                                           @ Types.ID
                                                                                                           @ Types.GeneState
                                                                                                           Types.$fOrdID
                                                                                                           Types.$fOrdGeneState
                                                                                                           a2
                                                                                                           b2
                                                                                                      GHC.Types.GT
                                                                                                      -> GHC.Types.False }
                                                                                                 Types.NoAgent
                                                                                                 -> GHC.Types.True }
                                                                                            Types.NoAgent
                                                                                            -> case b of wild1 { DEFAULT ->
                                                                                               GHC.Types.False } }) -}
96dc13c40ccb216e8863ab97a7d41886
  $fOrdAgent_$c<= :: Types.Agent -> Types.Agent -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Agent) (b :: Types.Agent) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.<=} True True} case a of wild {
                                                                                             Types.Agent a1 a2
                                                                                             -> case b of wild1 {
                                                                                                  Types.Agent b1 b2
                                                                                                  -> case GHC.Classes.$fOrd[]_$ccompare
                                                                                                            @ [Types.Locus]
                                                                                                            Types.$fOrdAgent_$s$fOrd[]
                                                                                                            a1
                                                                                                            b1 of wild2 {
                                                                                                       GHC.Types.LT
                                                                                                       -> GHC.Types.True
                                                                                                       GHC.Types.EQ
                                                                                                       -> Data.Map.Base.$fOrdMap_$c<=
                                                                                                            @ Types.ID
                                                                                                            @ Types.GeneState
                                                                                                            Types.$fOrdID
                                                                                                            Types.$fOrdGeneState
                                                                                                            a2
                                                                                                            b2
                                                                                                       GHC.Types.GT
                                                                                                       -> GHC.Types.False }
                                                                                                  Types.NoAgent
                                                                                                  -> GHC.Types.True }
                                                                                             Types.NoAgent
                                                                                             -> case b of wild1 {
                                                                                                  Types.Agent ipv ipv1
                                                                                                  -> GHC.Types.False
                                                                                                  Types.NoAgent
                                                                                                  -> GHC.Types.True } }) -}
96dc13c40ccb216e8863ab97a7d41886
  $fOrdAgent_$c> :: Types.Agent -> Types.Agent -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Agent) (b :: Types.Agent) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.>} True True} case a of wild {
                                                                                            Types.Agent a1 a2
                                                                                            -> case b of wild1 {
                                                                                                 Types.Agent b1 b2
                                                                                                 -> case GHC.Classes.$fOrd[]_$ccompare
                                                                                                           @ [Types.Locus]
                                                                                                           Types.$fOrdAgent_$s$fOrd[]
                                                                                                           a1
                                                                                                           b1 of wild2 {
                                                                                                      GHC.Types.LT
                                                                                                      -> GHC.Types.False
                                                                                                      GHC.Types.EQ
                                                                                                      -> Data.Map.Base.$fOrdMap_$c>
                                                                                                           @ Types.ID
                                                                                                           @ Types.GeneState
                                                                                                           Types.$fOrdID
                                                                                                           Types.$fOrdGeneState
                                                                                                           a2
                                                                                                           b2
                                                                                                      GHC.Types.GT
                                                                                                      -> GHC.Types.True }
                                                                                                 Types.NoAgent
                                                                                                 -> GHC.Types.False }
                                                                                            Types.NoAgent
                                                                                            -> case b of wild1 {
                                                                                                 Types.Agent ipv ipv1
                                                                                                 -> GHC.Types.True
                                                                                                 Types.NoAgent
                                                                                                 -> GHC.Types.False } }) -}
96dc13c40ccb216e8863ab97a7d41886
  $fOrdAgent_$c>= :: Types.Agent -> Types.Agent -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Agent) (b :: Types.Agent) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.>=} True True} case a of wild {
                                                                                             Types.Agent a1 a2
                                                                                             -> case b of wild1 {
                                                                                                  Types.Agent b1 b2
                                                                                                  -> case GHC.Classes.$fOrd[]_$ccompare
                                                                                                            @ [Types.Locus]
                                                                                                            Types.$fOrdAgent_$s$fOrd[]
                                                                                                            a1
                                                                                                            b1 of wild2 {
                                                                                                       GHC.Types.LT
                                                                                                       -> GHC.Types.False
                                                                                                       GHC.Types.EQ
                                                                                                       -> Data.Map.Base.$fOrdMap_$c>=
                                                                                                            @ Types.ID
                                                                                                            @ Types.GeneState
                                                                                                            Types.$fOrdID
                                                                                                            Types.$fOrdGeneState
                                                                                                            a2
                                                                                                            b2
                                                                                                       GHC.Types.GT
                                                                                                       -> GHC.Types.True }
                                                                                                  Types.NoAgent
                                                                                                  -> GHC.Types.False }
                                                                                             Types.NoAgent
                                                                                             -> case b of wild1 { DEFAULT ->
                                                                                                GHC.Types.True } }) -}
96dc13c40ccb216e8863ab97a7d41886
  $fOrdAgent_$ccompare ::
    Types.Agent -> Types.Agent -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Agent) (b :: Types.Agent) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.compare} True True} case a of wild {
                                                                                                  Types.Agent a1 a2
                                                                                                  -> case b of wild1 {
                                                                                                       Types.Agent b1 b2
                                                                                                       -> case GHC.Classes.$fOrd[]_$ccompare
                                                                                                                 @ [Types.Locus]
                                                                                                                 Types.$fOrdAgent_$s$fOrd[]
                                                                                                                 a1
                                                                                                                 b1 of wild2 {
                                                                                                            GHC.Types.LT
                                                                                                            -> GHC.Types.LT
                                                                                                            GHC.Types.EQ
                                                                                                            -> GHC.Classes.$fOrd[]_$ccompare
                                                                                                                 @ (Types.ID,
                                                                                                                    Types.GeneState)
                                                                                                                 Types.$fOrdAgent1
                                                                                                                 (Data.Map.Base.toAscList1
                                                                                                                    @ Types.ID
                                                                                                                    @ Types.GeneState
                                                                                                                    (GHC.Types.[]
                                                                                                                       @ (Types.ID,
                                                                                                                          Types.GeneState))
                                                                                                                    a2)
                                                                                                                 (Data.Map.Base.toAscList1
                                                                                                                    @ Types.ID
                                                                                                                    @ Types.GeneState
                                                                                                                    (GHC.Types.[]
                                                                                                                       @ (Types.ID,
                                                                                                                          Types.GeneState))
                                                                                                                    b2)
                                                                                                            GHC.Types.GT
                                                                                                            -> GHC.Types.GT }
                                                                                                       Types.NoAgent
                                                                                                       -> GHC.Types.LT }
                                                                                                  Types.NoAgent
                                                                                                  -> case b of wild1 {
                                                                                                       Types.Agent ipv ipv1
                                                                                                       -> GHC.Types.GT
                                                                                                       Types.NoAgent
                                                                                                       -> GHC.Types.EQ } }) -}
96dc13c40ccb216e8863ab97a7d41886
  $fOrdAgent_$cmax :: Types.Agent -> Types.Agent -> Types.Agent
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Agent) (y :: Types.Agent) ->
                 case Types.$fOrdAgent_$c<= x y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
96dc13c40ccb216e8863ab97a7d41886
  $fOrdAgent_$cmin :: Types.Agent -> Types.Agent -> Types.Agent
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Agent) (y :: Types.Agent) ->
                 case Types.$fOrdAgent_$c<= x y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
05ebef405e9e3d23dda0b6707b734f43
  $fOrdAgent_$s$fOrd[] :: GHC.Classes.Ord [Types.Locus]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Types.Locus]
                  Types.$fOrdAgent_$s$fOrd[]_$cp1Ord
                  (GHC.Classes.$fOrd[]_$ccompare @ Types.Locus Types.$fOrdLocus)
                  Types.$fOrdAgent_$s$fOrd[]_$c<
                  Types.$fOrdAgent_$s$fOrd[]_$c<=
                  Types.$fOrdAgent_$s$fOrd[]_$c>
                  Types.$fOrdAgent_$s$fOrd[]_$c>=
                  Types.$fOrdAgent_$s$fOrd[]_$cmax
                  Types.$fOrdAgent_$s$fOrd[]_$cmin -}
f8c171e8363ac5db94e2af7001866ca1
  $fOrdAgent_$s$fOrd[]_$c< ::
    [Types.Locus] -> [Types.Locus] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Types.Locus]) (y :: [Types.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Types.Locus
                        Types.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
ab046c91db4648077f4295d652e6c4f7
  $fOrdAgent_$s$fOrd[]_$c<= ::
    [Types.Locus] -> [Types.Locus] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Types.Locus]) (y :: [Types.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Types.Locus
                        Types.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
f86cc53d449d2c8ce8eed0a518219f1b
  $fOrdAgent_$s$fOrd[]_$c> ::
    [Types.Locus] -> [Types.Locus] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Types.Locus]) (y :: [Types.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Types.Locus
                        Types.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
27005bec685cc646e97a9d71072263e0
  $fOrdAgent_$s$fOrd[]_$c>= ::
    [Types.Locus] -> [Types.Locus] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Types.Locus]) (y :: [Types.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Types.Locus
                        Types.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
9c158d1831008c42ef43f8774125b66c
  $fOrdAgent_$s$fOrd[]_$cmax ::
    [Types.Locus] -> [Types.Locus] -> [Types.Locus]
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Types.Locus]) (y :: [Types.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Types.Locus
                        Types.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
5acfeb7a8c6e8c23a99250de2f711eac
  $fOrdAgent_$s$fOrd[]_$cmin ::
    [Types.Locus] -> [Types.Locus] -> [Types.Locus]
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Types.Locus]) (y :: [Types.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Types.Locus
                        Types.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
746087fa4eea1d15c84507c969af17e7
  $fOrdAgent_$s$fOrd[]_$cp1Ord :: GHC.Classes.Eq [Types.Locus]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Types.$fEqAgent_$s$fEq[] -}
e61fa6692e0904f1e277a345501f370e
  $fOrdGene :: GHC.Classes.Ord Types.Gene
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Gene
                  Types.$fEqGene
                  Types.$fOrdLocus_$ccompare
                  Types.$fOrdLocus_$c<2
                  Types.$fOrdLocus_$c<=1
                  Types.$fOrdLocus_$c>2
                  Types.$fOrdLocus_$c>=2
                  Types.$fOrdGene_$cmax
                  Types.$fOrdGene_$cmin -}
d668358e4ab5e6774fd62fda536c7903
  $fOrdGeneState :: GHC.Classes.Ord Types.GeneState
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.GeneState
                  Types.$fEqGeneState
                  Types.$fOrdGeneState_$ccompare
                  Types.$fOrdGeneState_$c<
                  Types.$fOrdGeneState_$c<=
                  Types.$fOrdGeneState_$c>
                  Types.$fOrdGeneState_$c>=
                  Types.$fOrdGeneState_$cmax
                  Types.$fOrdGeneState_$cmin -}
ee2ced3b246c34318cd412c5f2d33ec1
  $fOrdGeneState1 ::
    GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.min} True True} GHC.Classes.$fOrdBool_$cmin) -}
5258d4cd121051bb077df42763b5f4c5
  $fOrdGeneState2 ::
    GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.max} True True} GHC.Classes.$fOrdBool_$cmax) -}
e4bdca7713c5dfc946c384f01c21f4d6
  $fOrdGeneState3 ::
    GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.>=} True True} GHC.Classes.$fOrdBool_$c>=) -}
ad7bc319449599824909ea6a4ad57ede
  $fOrdGeneState4 ::
    GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.>} True True} GHC.Classes.$fOrdBool_$c>) -}
7a54fbe28dcd3bffa2ad552657d43142
  $fOrdGeneState5 ::
    GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.<=} True True} GHC.Classes.$fOrdBool_$c<=) -}
c15b3223956c19be2004d86b7a0e540c
  $fOrdGeneState6 ::
    GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.<} True True} GHC.Classes.$fOrdBool_$c<) -}
cfc32dd83e7766b3b094ec5d0479b4d0
  $fOrdGeneState7 ::
    GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Ordering
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.compare} True True} GHC.Classes.$fOrdBool_$ccompare) -}
d668358e4ab5e6774fd62fda536c7903
  $fOrdGeneState_$c< ::
    Types.GeneState -> Types.GeneState -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdGeneState6
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R <GHC.Types.Bool>_R) -}
d668358e4ab5e6774fd62fda536c7903
  $fOrdGeneState_$c<= ::
    Types.GeneState -> Types.GeneState -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdGeneState5
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R <GHC.Types.Bool>_R) -}
d668358e4ab5e6774fd62fda536c7903
  $fOrdGeneState_$c> ::
    Types.GeneState -> Types.GeneState -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdGeneState4
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R <GHC.Types.Bool>_R) -}
d668358e4ab5e6774fd62fda536c7903
  $fOrdGeneState_$c>= ::
    Types.GeneState -> Types.GeneState -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdGeneState3
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R <GHC.Types.Bool>_R) -}
d668358e4ab5e6774fd62fda536c7903
  $fOrdGeneState_$ccompare ::
    Types.GeneState -> Types.GeneState -> GHC.Types.Ordering
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdGeneState7
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R <GHC.Types.Ordering>_R) -}
d668358e4ab5e6774fd62fda536c7903
  $fOrdGeneState_$cmax ::
    Types.GeneState -> Types.GeneState -> Types.GeneState
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdGeneState2
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])) -}
d668358e4ab5e6774fd62fda536c7903
  $fOrdGeneState_$cmin ::
    Types.GeneState -> Types.GeneState -> Types.GeneState
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdGeneState1
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])) -}
e61fa6692e0904f1e277a345501f370e
  $fOrdGene_$cmax :: Types.Gene -> Types.Gene -> Types.Gene
  {- Arity: 2, Strictness: <S,U(U,U,U)><S,U(U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Gene) (y :: Types.Gene) ->
                 case Types.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
e61fa6692e0904f1e277a345501f370e
  $fOrdGene_$cmin :: Types.Gene -> Types.Gene -> Types.Gene
  {- Arity: 2, Strictness: <S,U(U,U,U)><S,U(U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Gene) (y :: Types.Gene) ->
                 case Types.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
f02152849ccc1a6d1ba195f399237c56
  $fOrdID :: GHC.Classes.Ord Types.ID
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.ID
                  Types.$fEqID
                  Types.$fOrdID_$ccompare
                  Types.$fOrdID_$c<
                  Types.$fOrdID_$c<=
                  Types.$fOrdID_$c>
                  Types.$fOrdID_$c>=
                  Types.$fOrdID_$cmax
                  Types.$fOrdID_$cmin -}
136915636f14cca5df3107a2dc6f806b
  $fOrdID1 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.min} True True} GHC.Classes.$fOrdInt_$cmin) -}
08490698def2e7cd42410d67d55fe864
  $fOrdID2 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.max} True True} GHC.Classes.$fOrdInt_$cmax) -}
8cb4325b1d25993970ec8371bcc86cb2
  $fOrdID3 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.>=} True True} GHC.Classes.geInt) -}
249816c96744c4d66cd636f1b3cbd2ee
  $fOrdID4 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.>} True True} GHC.Classes.gtInt) -}
a71241aced9aa43e19f4af1917e9e7ad
  $fOrdID5 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.<=} True True} GHC.Classes.leInt) -}
7fde3b9725dcd047c1d6da738dbd2840
  $fOrdID6 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.<} True True} GHC.Classes.ltInt) -}
e02d10233bd5fe3e0ff5956221609fd4
  $fOrdID7 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Ordering
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.compare} True True} GHC.Classes.compareInt) -}
f02152849ccc1a6d1ba195f399237c56
  $fOrdID_$c< :: Types.ID -> Types.ID -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdID6
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R <GHC.Types.Bool>_R) -}
f02152849ccc1a6d1ba195f399237c56
  $fOrdID_$c<= :: Types.ID -> Types.ID -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdID5
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R <GHC.Types.Bool>_R) -}
f02152849ccc1a6d1ba195f399237c56
  $fOrdID_$c> :: Types.ID -> Types.ID -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdID4
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R <GHC.Types.Bool>_R) -}
f02152849ccc1a6d1ba195f399237c56
  $fOrdID_$c>= :: Types.ID -> Types.ID -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdID3
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R <GHC.Types.Bool>_R) -}
f02152849ccc1a6d1ba195f399237c56
  $fOrdID_$ccompare :: Types.ID -> Types.ID -> GHC.Types.Ordering
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdID7
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R <GHC.Types.Ordering>_R) -}
f02152849ccc1a6d1ba195f399237c56
  $fOrdID_$cmax :: Types.ID -> Types.ID -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdID2
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])) -}
f02152849ccc1a6d1ba195f399237c56
  $fOrdID_$cmin :: Types.ID -> Types.ID -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdID1
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])) -}
00852ab6e68f9437488a4b665181bda8
  $fOrdLocus :: GHC.Classes.Ord Types.Locus
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Locus
                  Types.$fEqLocus
                  Types.$fOrdLocus_$ccompare1
                  Types.$fOrdLocus_$c<
                  Types.$fOrdLocus_$c<=2
                  Types.$fOrdLocus_$c>
                  Types.$fOrdLocus_$c>=
                  Types.$fOrdLocus_$cmax
                  Types.$fOrdLocus_$cmin -}
00852ab6e68f9437488a4b665181bda8
  $fOrdLocus_$c< :: Types.Locus -> Types.Locus -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Locus) (b :: Types.Locus) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.<} True True} case a of wild {
                                                                                            Types.Transposon
                                                                                            -> case b of wild1 {
                                                                                                 DEFAULT
                                                                                                 -> GHC.Types.True
                                                                                                 Types.Transposon
                                                                                                 -> GHC.Types.False }
                                                                                            Types.CGene a1
                                                                                            -> case b of wild1 {
                                                                                                 Types.Transposon
                                                                                                 -> GHC.Types.False
                                                                                                 Types.CGene b1
                                                                                                 -> Types.$fOrdLocus_$c<2
                                                                                                      a1
                                                                                                      b1
                                                                                                 Types.CTfbs ipv
                                                                                                 -> GHC.Types.True }
                                                                                            Types.CTfbs a1
                                                                                            -> case b of wild1 {
                                                                                                 DEFAULT
                                                                                                 -> GHC.Types.False
                                                                                                 Types.CTfbs b1
                                                                                                 -> Types.$fOrdLocus_$c<1
                                                                                                      a1
                                                                                                      b1 } }) -}
c364d1799620a5ba7a05a7f6bbc17a6f
  $fOrdLocus_$c<1 :: Types.Tfbs -> Types.Tfbs -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U,U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Tfbs) (w1 :: Types.Tfbs) ->
                 case w of ww { Types.Tfbs ww1 ww2 ->
                 case w1 of ww3 { Types.Tfbs ww4 ww5 ->
                 Types.$w$c< ww1 ww2 ww4 ww5 } }) -}
e61fa6692e0904f1e277a345501f370e
  $fOrdLocus_$c<2 :: Types.Gene -> Types.Gene -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U,U,U)><S,1*U(U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Gene) (y :: Types.Gene) ->
                 case Types.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
c364d1799620a5ba7a05a7f6bbc17a6f
  $fOrdLocus_$c<= :: Types.Tfbs -> Types.Tfbs -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U,U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Tfbs) (w1 :: Types.Tfbs) ->
                 case w of ww { Types.Tfbs ww1 ww2 ->
                 case w1 of ww3 { Types.Tfbs ww4 ww5 ->
                 Types.$w$c<= ww1 ww2 ww4 ww5 } }) -}
e61fa6692e0904f1e277a345501f370e
  $fOrdLocus_$c<=1 :: Types.Gene -> Types.Gene -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U,U,U)><S,1*U(U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Gene) (y :: Types.Gene) ->
                 case Types.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
00852ab6e68f9437488a4b665181bda8
  $fOrdLocus_$c<=2 :: Types.Locus -> Types.Locus -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Locus) (b :: Types.Locus) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.<=} True True} case a of wild {
                                                                                             Types.Transposon
                                                                                             -> case b of wild1 { DEFAULT ->
                                                                                                GHC.Types.True }
                                                                                             Types.CGene a1
                                                                                             -> case b of wild1 {
                                                                                                  Types.Transposon
                                                                                                  -> GHC.Types.False
                                                                                                  Types.CGene b1
                                                                                                  -> Types.$fOrdLocus_$c<=1
                                                                                                       a1
                                                                                                       b1
                                                                                                  Types.CTfbs ipv
                                                                                                  -> GHC.Types.True }
                                                                                             Types.CTfbs a1
                                                                                             -> case b of wild1 {
                                                                                                  DEFAULT
                                                                                                  -> GHC.Types.False
                                                                                                  Types.CTfbs b1
                                                                                                  -> Types.$fOrdLocus_$c<=
                                                                                                       a1
                                                                                                       b1 } }) -}
00852ab6e68f9437488a4b665181bda8
  $fOrdLocus_$c> :: Types.Locus -> Types.Locus -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Locus) (b :: Types.Locus) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.>} True True} case a of wild {
                                                                                            Types.Transposon
                                                                                            -> case b of wild1 { DEFAULT ->
                                                                                               GHC.Types.False }
                                                                                            Types.CGene a1
                                                                                            -> case b of wild1 {
                                                                                                 Types.Transposon
                                                                                                 -> GHC.Types.True
                                                                                                 Types.CGene b1
                                                                                                 -> Types.$fOrdLocus_$c>2
                                                                                                      a1
                                                                                                      b1
                                                                                                 Types.CTfbs ipv
                                                                                                 -> GHC.Types.False }
                                                                                            Types.CTfbs a1
                                                                                            -> case b of wild1 {
                                                                                                 DEFAULT
                                                                                                 -> GHC.Types.True
                                                                                                 Types.CTfbs b1
                                                                                                 -> Types.$fOrdLocus_$c>1
                                                                                                      a1
                                                                                                      b1 } }) -}
c364d1799620a5ba7a05a7f6bbc17a6f
  $fOrdLocus_$c>1 :: Types.Tfbs -> Types.Tfbs -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U,U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Tfbs) (w1 :: Types.Tfbs) ->
                 case w of ww { Types.Tfbs ww1 ww2 ->
                 case w1 of ww3 { Types.Tfbs ww4 ww5 ->
                 Types.$w$c> ww1 ww2 ww4 ww5 } }) -}
e61fa6692e0904f1e277a345501f370e
  $fOrdLocus_$c>2 :: Types.Gene -> Types.Gene -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U,U,U)><S,1*U(U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Gene) (y :: Types.Gene) ->
                 case Types.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
00852ab6e68f9437488a4b665181bda8
  $fOrdLocus_$c>= :: Types.Locus -> Types.Locus -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Locus) (b :: Types.Locus) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.>=} True True} case a of wild {
                                                                                             Types.Transposon
                                                                                             -> case b of wild1 {
                                                                                                  DEFAULT
                                                                                                  -> GHC.Types.False
                                                                                                  Types.Transposon
                                                                                                  -> GHC.Types.True }
                                                                                             Types.CGene a1
                                                                                             -> case b of wild1 {
                                                                                                  Types.Transposon
                                                                                                  -> GHC.Types.True
                                                                                                  Types.CGene b1
                                                                                                  -> Types.$fOrdLocus_$c>=2
                                                                                                       a1
                                                                                                       b1
                                                                                                  Types.CTfbs ipv
                                                                                                  -> GHC.Types.False }
                                                                                             Types.CTfbs a1
                                                                                             -> case b of wild1 {
                                                                                                  DEFAULT
                                                                                                  -> GHC.Types.True
                                                                                                  Types.CTfbs b1
                                                                                                  -> Types.$fOrdLocus_$c>=1
                                                                                                       a1
                                                                                                       b1 } }) -}
c364d1799620a5ba7a05a7f6bbc17a6f
  $fOrdLocus_$c>=1 :: Types.Tfbs -> Types.Tfbs -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U,U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Tfbs) (w1 :: Types.Tfbs) ->
                 case w of ww { Types.Tfbs ww1 ww2 ->
                 case w1 of ww3 { Types.Tfbs ww4 ww5 ->
                 Types.$w$c>= ww1 ww2 ww4 ww5 } }) -}
e61fa6692e0904f1e277a345501f370e
  $fOrdLocus_$c>=2 :: Types.Gene -> Types.Gene -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U,U,U)><S,1*U(U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Gene) (y :: Types.Gene) ->
                 case Types.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
e61fa6692e0904f1e277a345501f370e
  $fOrdLocus_$ccompare ::
    Types.Gene -> Types.Gene -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,1*U(U,U,U)><S,1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Gene) (w1 :: Types.Gene) ->
                 case w of ww { Types.Gene ww1 ww2 ww3 ->
                 case w1 of ww4 { Types.Gene ww5 ww6 ww7 ->
                 Types.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
00852ab6e68f9437488a4b665181bda8
  $fOrdLocus_$ccompare1 ::
    Types.Locus -> Types.Locus -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Locus) (b :: Types.Locus) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.compare} True True} case a of wild {
                                                                                                  Types.Transposon
                                                                                                  -> case b of wild1 {
                                                                                                       DEFAULT
                                                                                                       -> GHC.Types.LT
                                                                                                       Types.Transposon
                                                                                                       -> GHC.Types.EQ }
                                                                                                  Types.CGene a1
                                                                                                  -> case b of wild1 {
                                                                                                       Types.Transposon
                                                                                                       -> GHC.Types.GT
                                                                                                       Types.CGene b1
                                                                                                       -> Types.$fOrdLocus_$ccompare
                                                                                                            a1
                                                                                                            b1
                                                                                                       Types.CTfbs ipv
                                                                                                       -> GHC.Types.LT }
                                                                                                  Types.CTfbs a1
                                                                                                  -> case b of wild1 {
                                                                                                       DEFAULT
                                                                                                       -> GHC.Types.GT
                                                                                                       Types.CTfbs b1
                                                                                                       -> Types.$fOrdLocus_$ccompare2
                                                                                                            a1
                                                                                                            b1 } }) -}
c364d1799620a5ba7a05a7f6bbc17a6f
  $fOrdLocus_$ccompare2 ::
    Types.Tfbs -> Types.Tfbs -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,1*U(U,U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Tfbs) (w1 :: Types.Tfbs) ->
                 case w of ww { Types.Tfbs ww1 ww2 ->
                 case w1 of ww3 { Types.Tfbs ww4 ww5 ->
                 Types.$w$ccompare1 ww1 ww2 ww4 ww5 } }) -}
00852ab6e68f9437488a4b665181bda8
  $fOrdLocus_$cmax :: Types.Locus -> Types.Locus -> Types.Locus
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Types.Locus) (y :: Types.Locus) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.<=} True False} case x of wild {
                                                                                              Types.Transposon
                                                                                              -> y
                                                                                              Types.CGene a1
                                                                                              -> case y of wild1 {
                                                                                                   Types.Transposon
                                                                                                   -> wild
                                                                                                   Types.CGene b1
                                                                                                   -> case {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.<=} False True} Types.$fOrdLocus_$c<=1
                                                                                                                                                                                        a1
                                                                                                                                                                                        b1 of wild2 {
                                                                                                        GHC.Types.False
                                                                                                        -> wild
                                                                                                        GHC.Types.True
                                                                                                        -> wild1 }
                                                                                                   Types.CTfbs ipv
                                                                                                   -> wild1 }
                                                                                              Types.CTfbs a1
                                                                                              -> case y of wild1 {
                                                                                                   DEFAULT
                                                                                                   -> wild
                                                                                                   Types.CTfbs b1
                                                                                                   -> case {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.<=} False True} Types.$fOrdLocus_$c<=
                                                                                                                                                                                        a1
                                                                                                                                                                                        b1 of wild2 {
                                                                                                        GHC.Types.False
                                                                                                        -> wild
                                                                                                        GHC.Types.True
                                                                                                        -> wild1 } } }) -}
00852ab6e68f9437488a4b665181bda8
  $fOrdLocus_$cmin :: Types.Locus -> Types.Locus -> Types.Locus
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Types.Locus) (y :: Types.Locus) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.<=} True False} case x of wild {
                                                                                              Types.Transposon
                                                                                              -> case y of wild1 { DEFAULT ->
                                                                                                 Types.Transposon }
                                                                                              Types.CGene a1
                                                                                              -> case y of wild1 {
                                                                                                   Types.Transposon
                                                                                                   -> Types.Transposon
                                                                                                   Types.CGene b1
                                                                                                   -> case {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.<=} False True} Types.$fOrdLocus_$c<=1
                                                                                                                                                                                        a1
                                                                                                                                                                                        b1 of wild2 {
                                                                                                        GHC.Types.False
                                                                                                        -> wild1
                                                                                                        GHC.Types.True
                                                                                                        -> wild }
                                                                                                   Types.CTfbs ipv
                                                                                                   -> wild }
                                                                                              Types.CTfbs a1
                                                                                              -> case y of wild1 {
                                                                                                   DEFAULT
                                                                                                   -> wild1
                                                                                                   Types.CTfbs b1
                                                                                                   -> case {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.<=} False True} Types.$fOrdLocus_$c<=
                                                                                                                                                                                        a1
                                                                                                                                                                                        b1 of wild2 {
                                                                                                        GHC.Types.False
                                                                                                        -> wild1
                                                                                                        GHC.Types.True
                                                                                                        -> wild } } }) -}
c364d1799620a5ba7a05a7f6bbc17a6f
  $fOrdTfbs :: GHC.Classes.Ord Types.Tfbs
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Tfbs
                  Types.$fEqTfbs
                  Types.$fOrdLocus_$ccompare2
                  Types.$fOrdLocus_$c<1
                  Types.$fOrdLocus_$c<=
                  Types.$fOrdLocus_$c>1
                  Types.$fOrdLocus_$c>=1
                  Types.$fOrdTfbs_$cmax
                  Types.$fOrdTfbs_$cmin -}
c364d1799620a5ba7a05a7f6bbc17a6f
  $fOrdTfbs_$cmax :: Types.Tfbs -> Types.Tfbs -> Types.Tfbs
  {- Arity: 2, Strictness: <S,1*U(U,U)><S,1*U(U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Tfbs) (w1 :: Types.Tfbs) ->
                 case w of ww { Types.Tfbs ww1 ww2 ->
                 case w1 of ww3 { Types.Tfbs ww4 ww5 ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.<=} True False} case {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.<=} False True} Types.$fOrdID7
                                                                                                                                                                              ww1
                                                                                                                                                                                `cast`
                                                                                                                                                                              (Types.N:ID[0])
                                                                                                                                                                              ww4
                                                                                                                                                                                `cast`
                                                                                                                                                                              (Types.N:ID[0]) of wild {
                                                                                              GHC.Types.LT
                                                                                              -> Types.Tfbs
                                                                                                   ww4
                                                                                                   ww5
                                                                                              GHC.Types.EQ
                                                                                              -> case {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.<=} False True} Types.$fOrdWeight5
                                                                                                                                                                                   ww2
                                                                                                                                                                                     `cast`
                                                                                                                                                                                   (Types.N:Weight[0])
                                                                                                                                                                                   ww5
                                                                                                                                                                                     `cast`
                                                                                                                                                                                   (Types.N:Weight[0]) of wild1 {
                                                                                                   GHC.Types.False
                                                                                                   -> Types.Tfbs
                                                                                                        ww1
                                                                                                        ww2
                                                                                                   GHC.Types.True
                                                                                                   -> Types.Tfbs
                                                                                                        ww4
                                                                                                        ww5 }
                                                                                              GHC.Types.GT
                                                                                              -> Types.Tfbs
                                                                                                   ww1
                                                                                                   ww2 } } }) -}
c364d1799620a5ba7a05a7f6bbc17a6f
  $fOrdTfbs_$cmin :: Types.Tfbs -> Types.Tfbs -> Types.Tfbs
  {- Arity: 2, Strictness: <S,1*U(U,U)><S,1*U(U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Tfbs) (w1 :: Types.Tfbs) ->
                 case w of ww { Types.Tfbs ww1 ww2 ->
                 case w1 of ww3 { Types.Tfbs ww4 ww5 ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.<=} True False} case {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.<=} False True} Types.$fOrdID7
                                                                                                                                                                              ww1
                                                                                                                                                                                `cast`
                                                                                                                                                                              (Types.N:ID[0])
                                                                                                                                                                              ww4
                                                                                                                                                                                `cast`
                                                                                                                                                                              (Types.N:ID[0]) of wild {
                                                                                              GHC.Types.LT
                                                                                              -> Types.Tfbs
                                                                                                   ww1
                                                                                                   ww2
                                                                                              GHC.Types.EQ
                                                                                              -> case {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.<=} False True} Types.$fOrdWeight5
                                                                                                                                                                                   ww2
                                                                                                                                                                                     `cast`
                                                                                                                                                                                   (Types.N:Weight[0])
                                                                                                                                                                                   ww5
                                                                                                                                                                                     `cast`
                                                                                                                                                                                   (Types.N:Weight[0]) of wild1 {
                                                                                                   GHC.Types.False
                                                                                                   -> Types.Tfbs
                                                                                                        ww4
                                                                                                        ww5
                                                                                                   GHC.Types.True
                                                                                                   -> Types.Tfbs
                                                                                                        ww1
                                                                                                        ww2 }
                                                                                              GHC.Types.GT
                                                                                              -> Types.Tfbs
                                                                                                   ww4
                                                                                                   ww5 } } }) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fOrdThres :: GHC.Classes.Ord Types.Thres
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Thres
                  Types.$fEqThres
                  Types.$fOrdThres_$ccompare
                  Types.$fOrdThres_$c<
                  Types.$fOrdThres_$c<=
                  Types.$fOrdThres_$c>
                  Types.$fOrdThres_$c>=
                  Types.$fOrdThres_$cmax
                  Types.$fOrdThres_$cmin -}
b42eb0e332cd916139763638fb4a2075
  $fOrdThres1 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.min} True True} GHC.Classes.$fOrdInt_$cmin) -}
44b942320c8af2fce93301bc89b70ac7
  $fOrdThres2 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.max} True True} GHC.Classes.$fOrdInt_$cmax) -}
b15a81b028814ed41e2b4a3ab18feb58
  $fOrdThres3 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.>=} True True} GHC.Classes.geInt) -}
e9d409c1c798c29464113073bf224a21
  $fOrdThres4 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.>} True True} GHC.Classes.gtInt) -}
e26b5d941c4169a4bdc0647cdcc8f25b
  $fOrdThres5 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.<=} True True} GHC.Classes.leInt) -}
77edfd35af3957b423aab7488a7c78bb
  $fOrdThres6 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.<} True True} GHC.Classes.ltInt) -}
1097a9c693d4a247863667a751714ede
  $fOrdThres7 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Ordering
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.compare} True True} GHC.Classes.compareInt) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fOrdThres_$c< :: Types.Thres -> Types.Thres -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdThres6
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R <GHC.Types.Bool>_R) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fOrdThres_$c<= :: Types.Thres -> Types.Thres -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdThres5
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R <GHC.Types.Bool>_R) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fOrdThres_$c> :: Types.Thres -> Types.Thres -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdThres4
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R <GHC.Types.Bool>_R) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fOrdThres_$c>= :: Types.Thres -> Types.Thres -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdThres3
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R <GHC.Types.Bool>_R) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fOrdThres_$ccompare ::
    Types.Thres -> Types.Thres -> GHC.Types.Ordering
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdThres7
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R <GHC.Types.Ordering>_R) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fOrdThres_$cmax :: Types.Thres -> Types.Thres -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdThres2
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fOrdThres_$cmin :: Types.Thres -> Types.Thres -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdThres1
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fOrdWeight :: GHC.Classes.Ord Types.Weight
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Weight
                  Types.$fEqWeight
                  Types.$fOrdWeight_$ccompare
                  Types.$fOrdWeight_$c<
                  Types.$fOrdWeight_$c<=
                  Types.$fOrdWeight_$c>
                  Types.$fOrdWeight_$c>=
                  Types.$fOrdWeight_$cmax
                  Types.$fOrdWeight_$cmin -}
aac81f1c2c5a1e53b5c590704f5c1d2e
  $fOrdWeight1 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.min} True True} GHC.Classes.$fOrdInt_$cmin) -}
f38773a43dd3357b4caf7f8e35646db7
  $fOrdWeight2 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.max} True True} GHC.Classes.$fOrdInt_$cmax) -}
be390661298b874f1376fb4bdaa63b03
  $fOrdWeight3 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.>=} True True} GHC.Classes.geInt) -}
7709987bf701ba8975eb605693174587
  $fOrdWeight4 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.>} True True} GHC.Classes.gtInt) -}
4245b34781640758f12ffeaebf82e659
  $fOrdWeight5 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.<=} True True} GHC.Classes.leInt) -}
f9add79e225cc1e0522288f73698dede
  $fOrdWeight6 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.<} True True} GHC.Classes.ltInt) -}
d34de331c759159fd24e688bfcb53177
  $fOrdWeight7 ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Ordering
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.compare} True True} GHC.Classes.compareInt) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fOrdWeight_$c< :: Types.Weight -> Types.Weight -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdWeight6
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R <GHC.Types.Bool>_R) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fOrdWeight_$c<= :: Types.Weight -> Types.Weight -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdWeight5
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R <GHC.Types.Bool>_R) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fOrdWeight_$c> :: Types.Weight -> Types.Weight -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdWeight4
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R <GHC.Types.Bool>_R) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fOrdWeight_$c>= :: Types.Weight -> Types.Weight -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdWeight3
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R <GHC.Types.Bool>_R) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fOrdWeight_$ccompare ::
    Types.Weight -> Types.Weight -> GHC.Types.Ordering
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdWeight7
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R <GHC.Types.Ordering>_R) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fOrdWeight_$cmax :: Types.Weight -> Types.Weight -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdWeight2
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fOrdWeight_$cmin :: Types.Weight -> Types.Weight -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdWeight1
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])) -}
96dc13c40ccb216e8863ab97a7d41886
  $fReadAgent :: GHC.Read.Read Types.Agent
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Agent
                  Types.$fReadAgent_$creadsPrec
                  Types.$fReadAgent_$creadList
                  Types.$fReadAgent_$creadPrec
                  Types.$fReadAgent_$creadListPrec -}
96dc13c40ccb216e8863ab97a7d41886
  $fReadAgent1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Types.Agent] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readListPrec} True False} \ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                                                                                                        @ b
                                                                                                        (eta1 :: [Types.Agent]
                                                                                                                 -> Text.ParserCombinators.ReadP.P
                                                                                                                      b) ->
                                                                                                      {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readListPrec} False True} GHC.Read.list1
                                                                                                                                                                                             @ Types.Agent
                                                                                                                                                                                             Types.$fReadAgent2
                                                                                                                                                                                               `cast`
                                                                                                                                                                                             (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                                                                                                                       <Types.Agent>_R))
                                                                                                                                                                                             eta
                                                                                                                                                                                             @ b
                                                                                                                                                                                             eta1) -}
96dc13c40ccb216e8863ab97a7d41886
  $fReadAgent2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.Agent
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readPrec} True True} GHC.Read.parens1
                                                                                                   @ Types.Agent
                                                                                                   Types.$fReadAgent3
                                                                                                     `cast`
                                                                                                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                             <Types.Agent>_R))) -}
96dc13c40ccb216e8863ab97a7d41886
  $fReadAgent3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.Agent
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: (\ (n :: Text.ParserCombinators.ReadPrec.Prec) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readPrec} False True} let {
                                                                                                    ds3 :: Text.ParserCombinators.ReadP.ReadP
                                                                                                             Types.Agent
                                                                                                    = {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readPrec} False True} case n of wild { GHC.Types.I# x ->
                                                                                                                                                                                       case GHC.Prim.tagToEnum#
                                                                                                                                                                                              @ GHC.Types.Bool
                                                                                                                                                                                              (GHC.Prim.<=#
                                                                                                                                                                                                 x
                                                                                                                                                                                                 11#) of wild2 {
                                                                                                                                                                                         GHC.Types.False
                                                                                                                                                                                         -> (Text.ParserCombinators.ReadP.pfail1
                                                                                                                                                                                               @ Types.Agent)
                                                                                                                                                                                              `cast`
                                                                                                                                                                                            (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                                                                                                      <Types.Agent>_R))
                                                                                                                                                                                         GHC.Types.True
                                                                                                                                                                                         -> Types.$fReadAgent5
                                                                                                                                                                                              `cast`
                                                                                                                                                                                            (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                                                                                                      <Types.Agent>_R)) } }
                                                                                                  } in
                                                                                                  (\ @ b
                                                                                                     (k :: Types.Agent
                                                                                                           -> Text.ParserCombinators.ReadP.P
                                                                                                                b) ->
                                                                                                   Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                                                                                     @ b
                                                                                                     ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readPrec} False True} let {
                                                                                                                                                                                         lvl81 :: Text.ParserCombinators.ReadP.P
                                                                                                                                                                                                    b
                                                                                                                                                                                         = let {
                                                                                                                                                                                             lvl82 :: Text.ParserCombinators.ReadP.P
                                                                                                                                                                                                        b
                                                                                                                                                                                             = k Types.NoAgent
                                                                                                                                                                                           } in
                                                                                                                                                                                           Text.Read.Lex.expect2
                                                                                                                                                                                             @ b
                                                                                                                                                                                             (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                                                                                                                                                                              case a1 of wild {
                                                                                                                                                                                                DEFAULT
                                                                                                                                                                                                -> Text.ParserCombinators.ReadP.Fail
                                                                                                                                                                                                     @ b
                                                                                                                                                                                                Text.Read.Lex.Ident a2
                                                                                                                                                                                                -> case GHC.Base.eqString
                                                                                                                                                                                                          a2
                                                                                                                                                                                                          Types.$fReadAgent4 of wild1 {
                                                                                                                                                                                                     GHC.Types.False
                                                                                                                                                                                                     -> Text.ParserCombinators.ReadP.Fail
                                                                                                                                                                                                          @ b
                                                                                                                                                                                                     GHC.Types.True
                                                                                                                                                                                                     -> lvl82 } })
                                                                                                                                                                                       } in
                                                                                                                                                                                       let {
                                                                                                                                                                                         k1 :: ()
                                                                                                                                                                                               -> Text.ParserCombinators.ReadP.P
                                                                                                                                                                                                    b
                                                                                                                                                                                           {- Arity: 1,
                                                                                                                                                                                              Strictness: <L,A>,
                                                                                                                                                                                              Inline: INLINE[0],
                                                                                                                                                                                              Unfolding: InlineRule (1,
                                                                                                                                                                                                                     True,
                                                                                                                                                                                                                     True)
                                                                                                                                                                                                         (\ (w4 :: ()) ->
                                                                                                                                                                                                          lvl81) -}
                                                                                                                                                                                         = \ (w4 :: ()) ->
                                                                                                                                                                                           lvl81
                                                                                                                                                                                       } in
                                                                                                                                                                                       Text.ParserCombinators.ReadP.Look
                                                                                                                                                                                         @ b
                                                                                                                                                                                         (\ (a :: GHC.Base.String) ->
                                                                                                                                                                                          (Text.ParserCombinators.ReadP.skipSpaces_skip
                                                                                                                                                                                             a)
                                                                                                                                                                                            `cast`
                                                                                                                                                                                          (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                                                                                               <()>_R)
                                                                                                                                                                                            @ b
                                                                                                                                                                                            k1))
                                                                                                     (ds3
                                                                                                        `cast`
                                                                                                      (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                           <Types.Agent>_R)
                                                                                                        @ b
                                                                                                        k))
                                                                                                    `cast`
                                                                                                  (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                            <Types.Agent>_R))) -}
16db8d8166be1ce94e80d883e09fa97f
  $fReadAgent4 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readPrec} False True} GHC.CString.unpackCString#
                                                                                                    "NoAgent"#) -}
96dc13c40ccb216e8863ab97a7d41886
  $fReadAgent5 ::
    (Types.Agent -> Text.ParserCombinators.ReadP.P b1)
    -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 1 -}
96dc13c40ccb216e8863ab97a7d41886
  $fReadAgent6 :: Text.ParserCombinators.ReadP.P [Types.Agent]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readList} False True} Types.$fReadAgent1
                                                                                                    GHC.Read.$fRead()5
                                                                                                    @ [Types.Agent]
                                                                                                    (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                                                                                                       @ [Types.Agent])) -}
96dc13c40ccb216e8863ab97a7d41886
  $fReadAgent_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Types.Agent]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readList} True True} Text.ParserCombinators.ReadP.run
                                                                                                   @ [Types.Agent]
                                                                                                   Types.$fReadAgent6) -}
96dc13c40ccb216e8863ab97a7d41886
  $fReadAgent_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Types.Agent]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadAgent1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Types.Agent]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Types.Agent]>_R))) -}
96dc13c40ccb216e8863ab97a7d41886
  $fReadAgent_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Types.Agent
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadAgent2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Types.Agent>_R)) -}
96dc13c40ccb216e8863ab97a7d41886
  $fReadAgent_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Types.Agent
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Types.Agent
                   ((Types.$fReadAgent2 eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.Agent>_R)
                      @ Types.Agent
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Types.Agent))) -}
e61fa6692e0904f1e277a345501f370e
  $fReadGene :: GHC.Read.Read Types.Gene
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Gene
                  Types.$fReadGene_$creadsPrec
                  Types.$fReadGene_$creadList
                  Types.$fReadGene_$creadPrec
                  Types.$fReadGene_$creadListPrec -}
e61fa6692e0904f1e277a345501f370e
  $fReadGene1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Types.Gene] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readListPrec} True False} \ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                                                                                                        @ b
                                                                                                        (eta1 :: [Types.Gene]
                                                                                                                 -> Text.ParserCombinators.ReadP.P
                                                                                                                      b) ->
                                                                                                      {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readListPrec} False True} GHC.Read.list1
                                                                                                                                                                                             @ Types.Gene
                                                                                                                                                                                             Types.$fReadGene2
                                                                                                                                                                                               `cast`
                                                                                                                                                                                             (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                                                                                                                       <Types.Gene>_R))
                                                                                                                                                                                             eta
                                                                                                                                                                                             @ b
                                                                                                                                                                                             eta1) -}
e61fa6692e0904f1e277a345501f370e
  $fReadGene2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.Gene
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readPrec} True True} GHC.Read.parens1
                                                                                                   @ Types.Gene
                                                                                                   Types.$fReadGene3
                                                                                                     `cast`
                                                                                                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                             <Types.Gene>_R))) -}
e61fa6692e0904f1e277a345501f370e
  $fReadGene3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.Gene
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec) ->
                 case w of ww { GHC.Types.I# ww1 -> Types.$w$creadPrec ww1 }) -}
e61fa6692e0904f1e277a345501f370e
  $fReadGene4 ::
    (Types.Gene -> Text.ParserCombinators.ReadP.P b1)
    -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 1 -}
e61fa6692e0904f1e277a345501f370e
  $fReadGene5 :: Text.ParserCombinators.ReadP.P [Types.Gene]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readList} False True} Types.$fReadGene1
                                                                                                    GHC.Read.$fRead()5
                                                                                                    @ [Types.Gene]
                                                                                                    (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                                                                                                       @ [Types.Gene])) -}
d668358e4ab5e6774fd62fda536c7903
  $fReadGeneState :: GHC.Read.Read Types.GeneState
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.GeneState
                  Types.$fReadGeneState_$creadsPrec
                  Types.$fReadGeneState_$creadList
                  Types.$fReadGeneState_$creadPrec
                  Types.$fReadGeneState_$creadListPrec -}
d668358e4ab5e6774fd62fda536c7903
  $fReadGeneState1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Types.GeneState] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readListPrec} True False} \ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                                                                                                        @ b
                                                                                                        (eta1 :: [Types.GeneState]
                                                                                                                 -> Text.ParserCombinators.ReadP.P
                                                                                                                      b) ->
                                                                                                      {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readListPrec} False True} GHC.Read.list1
                                                                                                                                                                                             @ Types.GeneState
                                                                                                                                                                                             Types.$fReadGeneState2
                                                                                                                                                                                               `cast`
                                                                                                                                                                                             (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                                                                                                                       <Types.GeneState>_R))
                                                                                                                                                                                             eta
                                                                                                                                                                                             @ b
                                                                                                                                                                                             eta1) -}
d668358e4ab5e6774fd62fda536c7903
  $fReadGeneState2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.GeneState
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readPrec} True True} GHC.Read.parens1
                                                                                                   @ Types.GeneState
                                                                                                   Types.$fReadGeneState3
                                                                                                     `cast`
                                                                                                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                             <Types.GeneState>_R))) -}
d668358e4ab5e6774fd62fda536c7903
  $fReadGeneState3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.GeneState
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec) ->
                 case w of ww { GHC.Types.I# ww1 -> Types.$w$creadPrec1 ww1 }) -}
d668358e4ab5e6774fd62fda536c7903
  $fReadGeneState4 ::
    (Types.GeneState -> Text.ParserCombinators.ReadP.P b1)
    -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 1,
     Unfolding: (\ @ b1
                   (k1 :: Types.GeneState -> Text.ParserCombinators.ReadP.P b1) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readPrec} False True} let {
                                                                                                    lvl81 :: Text.ParserCombinators.ReadP.P
                                                                                                               b1
                                                                                                    = let {
                                                                                                        lvl82 :: Text.ParserCombinators.ReadP.P
                                                                                                                   b1
                                                                                                        = GHC.Read.$fReadBool3
                                                                                                            Types.$fReadGeneState6
                                                                                                            @ b1
                                                                                                            (\ (a1 :: GHC.Types.Bool) ->
                                                                                                             k1
                                                                                                               a1
                                                                                                                 `cast`
                                                                                                               (Sym (Types.N:GeneState[0])))
                                                                                                      } in
                                                                                                      Text.Read.Lex.expect2
                                                                                                        @ b1
                                                                                                        (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                                                                                         case a1 of wild {
                                                                                                           DEFAULT
                                                                                                           -> Text.ParserCombinators.ReadP.Fail
                                                                                                                @ b1
                                                                                                           Text.Read.Lex.Ident a2
                                                                                                           -> case GHC.Base.eqString
                                                                                                                     a2
                                                                                                                     Types.$fReadGeneState5 of wild1 {
                                                                                                                GHC.Types.False
                                                                                                                -> Text.ParserCombinators.ReadP.Fail
                                                                                                                     @ b1
                                                                                                                GHC.Types.True
                                                                                                                -> lvl82 } })
                                                                                                  } in
                                                                                                  let {
                                                                                                    k :: ()
                                                                                                         -> Text.ParserCombinators.ReadP.P
                                                                                                              b1
                                                                                                      {- Arity: 1,
                                                                                                         Strictness: <L,A>,
                                                                                                         Inline: INLINE[0],
                                                                                                         Unfolding: InlineRule (1,
                                                                                                                                True,
                                                                                                                                True)
                                                                                                                    (\ (w4 :: ()) ->
                                                                                                                     lvl81) -}
                                                                                                    = \ (w4 :: ()) ->
                                                                                                      lvl81
                                                                                                  } in
                                                                                                  Text.ParserCombinators.ReadP.Look
                                                                                                    @ b1
                                                                                                    (\ (a :: GHC.Base.String) ->
                                                                                                     (Text.ParserCombinators.ReadP.skipSpaces_skip
                                                                                                        a)
                                                                                                       `cast`
                                                                                                     (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                          <()>_R)
                                                                                                       @ b1
                                                                                                       k)) -}
3bdffe62fbaac7562e4dcbfe35951cc5
  $fReadGeneState5 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readPrec} False True} GHC.CString.unpackCString#
                                                                                                    "GS"#) -}
adc56efde891ac34ea2493bb80bc169f
  $fReadGeneState6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
d668358e4ab5e6774fd62fda536c7903
  $fReadGeneState7 ::
    Text.ParserCombinators.ReadP.P [Types.GeneState]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readList} False True} Types.$fReadGeneState1
                                                                                                    GHC.Read.$fRead()5
                                                                                                    @ [Types.GeneState]
                                                                                                    (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                                                                                                       @ [Types.GeneState])) -}
d668358e4ab5e6774fd62fda536c7903
  $fReadGeneState_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Types.GeneState]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readList} True True} Text.ParserCombinators.ReadP.run
                                                                                                   @ [Types.GeneState]
                                                                                                   Types.$fReadGeneState7) -}
d668358e4ab5e6774fd62fda536c7903
  $fReadGeneState_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Types.GeneState]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadGeneState1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Types.GeneState]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Types.GeneState]>_R))) -}
d668358e4ab5e6774fd62fda536c7903
  $fReadGeneState_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Types.GeneState
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadGeneState2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Types.GeneState>_R)) -}
d668358e4ab5e6774fd62fda536c7903
  $fReadGeneState_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Types.GeneState
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Types.GeneState
                   ((Types.$fReadGeneState2 eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.GeneState>_R)
                      @ Types.GeneState
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Types.GeneState))) -}
e61fa6692e0904f1e277a345501f370e
  $fReadGene_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Types.Gene]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readList} True True} Text.ParserCombinators.ReadP.run
                                                                                                   @ [Types.Gene]
                                                                                                   Types.$fReadGene5) -}
e61fa6692e0904f1e277a345501f370e
  $fReadGene_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Types.Gene]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadGene1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Types.Gene]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Types.Gene]>_R))) -}
e61fa6692e0904f1e277a345501f370e
  $fReadGene_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Types.Gene
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadGene2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Types.Gene>_R)) -}
e61fa6692e0904f1e277a345501f370e
  $fReadGene_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Types.Gene
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Types.Gene
                   ((Types.$fReadGene2 eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.Gene>_R)
                      @ Types.Gene
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Types.Gene))) -}
f02152849ccc1a6d1ba195f399237c56
  $fReadID :: GHC.Read.Read Types.ID
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.ID
                  Types.$fReadID_$creadsPrec
                  Types.$fReadID_$creadList
                  Types.$fReadID_$creadPrec
                  Types.$fReadID_$creadListPrec -}
f02152849ccc1a6d1ba195f399237c56
  $fReadID1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Types.ID] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readListPrec} True False} \ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                                                                                                        @ b
                                                                                                        (eta1 :: [Types.ID]
                                                                                                                 -> Text.ParserCombinators.ReadP.P
                                                                                                                      b) ->
                                                                                                      {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readListPrec} False True} GHC.Read.list1
                                                                                                                                                                                             @ Types.ID
                                                                                                                                                                                             Types.$fReadID2
                                                                                                                                                                                               `cast`
                                                                                                                                                                                             (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                                                                                                                       <Types.ID>_R))
                                                                                                                                                                                             eta
                                                                                                                                                                                             @ b
                                                                                                                                                                                             eta1) -}
f02152849ccc1a6d1ba195f399237c56
  $fReadID2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.ID
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readPrec} True True} GHC.Read.parens1
                                                                                                   @ Types.ID
                                                                                                   Types.$fReadID3
                                                                                                     `cast`
                                                                                                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                             <Types.ID>_R))) -}
f02152849ccc1a6d1ba195f399237c56
  $fReadID3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.ID
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec) ->
                 case w of ww { GHC.Types.I# ww1 -> Types.$w$creadPrec2 ww1 }) -}
f02152849ccc1a6d1ba195f399237c56
  $fReadID4 ::
    (Types.ID -> Text.ParserCombinators.ReadP.P b1)
    -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 1,
     Unfolding: (\ @ b1
                   (k1 :: Types.ID -> Text.ParserCombinators.ReadP.P b1) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readPrec} False True} let {
                                                                                                    lvl81 :: Text.ParserCombinators.ReadP.P
                                                                                                               b1
                                                                                                    = let {
                                                                                                        lvl82 :: Text.ParserCombinators.ReadP.P
                                                                                                                   b1
                                                                                                        = GHC.Read.$fReadInt3
                                                                                                            GHC.Read.$fReadInt_$sconvertInt
                                                                                                            Types.$fReadGeneState6
                                                                                                            @ b1
                                                                                                            (\ (a1 :: GHC.Types.Int) ->
                                                                                                             k1
                                                                                                               a1
                                                                                                                 `cast`
                                                                                                               (Sym (Types.N:ID[0])))
                                                                                                      } in
                                                                                                      Text.Read.Lex.expect2
                                                                                                        @ b1
                                                                                                        (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                                                                                         case a1 of wild {
                                                                                                           DEFAULT
                                                                                                           -> Text.ParserCombinators.ReadP.Fail
                                                                                                                @ b1
                                                                                                           Text.Read.Lex.Ident a2
                                                                                                           -> case GHC.Base.eqString
                                                                                                                     a2
                                                                                                                     Types.$fReadID5 of wild1 {
                                                                                                                GHC.Types.False
                                                                                                                -> Text.ParserCombinators.ReadP.Fail
                                                                                                                     @ b1
                                                                                                                GHC.Types.True
                                                                                                                -> lvl82 } })
                                                                                                  } in
                                                                                                  let {
                                                                                                    k :: ()
                                                                                                         -> Text.ParserCombinators.ReadP.P
                                                                                                              b1
                                                                                                      {- Arity: 1,
                                                                                                         Strictness: <L,A>,
                                                                                                         Inline: INLINE[0],
                                                                                                         Unfolding: InlineRule (1,
                                                                                                                                True,
                                                                                                                                True)
                                                                                                                    (\ (w4 :: ()) ->
                                                                                                                     lvl81) -}
                                                                                                    = \ (w4 :: ()) ->
                                                                                                      lvl81
                                                                                                  } in
                                                                                                  Text.ParserCombinators.ReadP.Look
                                                                                                    @ b1
                                                                                                    (\ (a :: GHC.Base.String) ->
                                                                                                     (Text.ParserCombinators.ReadP.skipSpaces_skip
                                                                                                        a)
                                                                                                       `cast`
                                                                                                     (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                          <()>_R)
                                                                                                       @ b1
                                                                                                       k)) -}
53848f9676f528b19cf283dabd034453
  $fReadID5 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readPrec} False True} GHC.CString.unpackCString#
                                                                                                    "ID"#) -}
f02152849ccc1a6d1ba195f399237c56
  $fReadID6 :: Text.ParserCombinators.ReadP.P [Types.ID]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readList} False True} Types.$fReadID1
                                                                                                    GHC.Read.$fRead()5
                                                                                                    @ [Types.ID]
                                                                                                    (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                                                                                                       @ [Types.ID])) -}
f02152849ccc1a6d1ba195f399237c56
  $fReadID_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Types.ID]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readList} True True} Text.ParserCombinators.ReadP.run
                                                                                                   @ [Types.ID]
                                                                                                   Types.$fReadID6) -}
f02152849ccc1a6d1ba195f399237c56
  $fReadID_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Types.ID]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadID1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <[Types.ID]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Types.ID]>_R))) -}
f02152849ccc1a6d1ba195f399237c56
  $fReadID_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadID2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Types.ID>_R)) -}
f02152849ccc1a6d1ba195f399237c56
  $fReadID_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Types.ID
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Types.ID
                   ((Types.$fReadID2 eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.ID>_R)
                      @ Types.ID
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Types.ID))) -}
00852ab6e68f9437488a4b665181bda8
  $fReadLocus :: GHC.Read.Read Types.Locus
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Locus
                  Types.$fReadLocus_$creadsPrec
                  Types.$fReadLocus_$creadList
                  Types.$fReadLocus_$creadPrec
                  Types.$fReadLocus_$creadListPrec -}
00852ab6e68f9437488a4b665181bda8
  $fReadLocus1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Types.Locus] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readListPrec} True False} \ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                                                                                                        @ b
                                                                                                        (eta1 :: [Types.Locus]
                                                                                                                 -> Text.ParserCombinators.ReadP.P
                                                                                                                      b) ->
                                                                                                      {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readListPrec} False True} GHC.Read.list1
                                                                                                                                                                                             @ Types.Locus
                                                                                                                                                                                             Types.$fReadLocus2
                                                                                                                                                                                               `cast`
                                                                                                                                                                                             (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                                                                                                                       <Types.Locus>_R))
                                                                                                                                                                                             eta
                                                                                                                                                                                             @ b
                                                                                                                                                                                             eta1) -}
00852ab6e68f9437488a4b665181bda8
  $fReadLocus2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.Locus
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readPrec} True True} GHC.Read.parens1
                                                                                                   @ Types.Locus
                                                                                                   Types.$fReadLocus3
                                                                                                     `cast`
                                                                                                   (Trans
                                                                                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                                                                                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                       <Types.Locus>_R))
                                                                                                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                                  <Types.Locus>_R)))) -}
00852ab6e68f9437488a4b665181bda8
  $fReadLocus3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Types.Locus -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U(U)><L,C(U)> -}
00852ab6e68f9437488a4b665181bda8
  $fReadLocus4 :: Text.ParserCombinators.ReadP.P [Types.Locus]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readList} False True} Types.$fReadLocus1
                                                                                                    GHC.Read.$fRead()5
                                                                                                    @ [Types.Locus]
                                                                                                    (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                                                                                                       @ [Types.Locus])) -}
00852ab6e68f9437488a4b665181bda8
  $fReadLocus_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Types.Locus]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readList} True True} Text.ParserCombinators.ReadP.run
                                                                                                   @ [Types.Locus]
                                                                                                   Types.$fReadLocus4) -}
00852ab6e68f9437488a4b665181bda8
  $fReadLocus_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Types.Locus]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadLocus1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Types.Locus]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Types.Locus]>_R))) -}
00852ab6e68f9437488a4b665181bda8
  $fReadLocus_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Types.Locus
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadLocus2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Types.Locus>_R)) -}
00852ab6e68f9437488a4b665181bda8
  $fReadLocus_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Types.Locus
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Types.Locus
                   ((Types.$fReadLocus2 eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.Locus>_R)
                      @ Types.Locus
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Types.Locus))) -}
c364d1799620a5ba7a05a7f6bbc17a6f
  $fReadTfbs :: GHC.Read.Read Types.Tfbs
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Tfbs
                  Types.$fReadTfbs_$creadsPrec
                  Types.$fReadTfbs_$creadList
                  Types.$fReadTfbs_$creadPrec
                  Types.$fReadTfbs_$creadListPrec -}
c364d1799620a5ba7a05a7f6bbc17a6f
  $fReadTfbs1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Types.Tfbs] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readListPrec} True False} \ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                                                                                                        @ b
                                                                                                        (eta1 :: [Types.Tfbs]
                                                                                                                 -> Text.ParserCombinators.ReadP.P
                                                                                                                      b) ->
                                                                                                      {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readListPrec} False True} GHC.Read.list1
                                                                                                                                                                                             @ Types.Tfbs
                                                                                                                                                                                             Types.$fReadTfbs2
                                                                                                                                                                                               `cast`
                                                                                                                                                                                             (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                                                                                                                       <Types.Tfbs>_R))
                                                                                                                                                                                             eta
                                                                                                                                                                                             @ b
                                                                                                                                                                                             eta1) -}
c364d1799620a5ba7a05a7f6bbc17a6f
  $fReadTfbs2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.Tfbs
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readPrec} True True} GHC.Read.parens1
                                                                                                   @ Types.Tfbs
                                                                                                   Types.$fReadTfbs3
                                                                                                     `cast`
                                                                                                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                             <Types.Tfbs>_R))) -}
c364d1799620a5ba7a05a7f6bbc17a6f
  $fReadTfbs3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.Tfbs
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec) ->
                 case w of ww { GHC.Types.I# ww1 -> Types.$w$creadPrec3 ww1 }) -}
c364d1799620a5ba7a05a7f6bbc17a6f
  $fReadTfbs4 ::
    (Types.Tfbs -> Text.ParserCombinators.ReadP.P b1)
    -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 1 -}
c364d1799620a5ba7a05a7f6bbc17a6f
  $fReadTfbs5 :: Text.ParserCombinators.ReadP.P [Types.Tfbs]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readList} False True} Types.$fReadTfbs1
                                                                                                    GHC.Read.$fRead()5
                                                                                                    @ [Types.Tfbs]
                                                                                                    (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                                                                                                       @ [Types.Tfbs])) -}
c364d1799620a5ba7a05a7f6bbc17a6f
  $fReadTfbs_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Types.Tfbs]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readList} True True} Text.ParserCombinators.ReadP.run
                                                                                                   @ [Types.Tfbs]
                                                                                                   Types.$fReadTfbs5) -}
c364d1799620a5ba7a05a7f6bbc17a6f
  $fReadTfbs_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Types.Tfbs]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadTfbs1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Types.Tfbs]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Types.Tfbs]>_R))) -}
c364d1799620a5ba7a05a7f6bbc17a6f
  $fReadTfbs_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Types.Tfbs
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadTfbs2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Types.Tfbs>_R)) -}
c364d1799620a5ba7a05a7f6bbc17a6f
  $fReadTfbs_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Types.Tfbs
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Types.Tfbs
                   ((Types.$fReadTfbs2 eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.Tfbs>_R)
                      @ Types.Tfbs
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Types.Tfbs))) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fReadThres :: GHC.Read.Read Types.Thres
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Thres
                  Types.$fReadThres_$creadsPrec
                  Types.$fReadThres_$creadList
                  Types.$fReadThres_$creadPrec
                  Types.$fReadThres_$creadListPrec -}
c477b1316e727b5e6b759a7b2233b4a2
  $fReadThres1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Types.Thres] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readListPrec} True False} \ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                                                                                                        @ b
                                                                                                        (eta1 :: [Types.Thres]
                                                                                                                 -> Text.ParserCombinators.ReadP.P
                                                                                                                      b) ->
                                                                                                      {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readListPrec} False True} GHC.Read.list1
                                                                                                                                                                                             @ Types.Thres
                                                                                                                                                                                             Types.$fReadThres2
                                                                                                                                                                                               `cast`
                                                                                                                                                                                             (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                                                                                                                       <Types.Thres>_R))
                                                                                                                                                                                             eta
                                                                                                                                                                                             @ b
                                                                                                                                                                                             eta1) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fReadThres2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.Thres
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readPrec} True True} GHC.Read.parens1
                                                                                                   @ Types.Thres
                                                                                                   Types.$fReadThres3
                                                                                                     `cast`
                                                                                                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                             <Types.Thres>_R))) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fReadThres3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.Thres
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec) ->
                 case w of ww { GHC.Types.I# ww1 -> Types.$w$creadPrec4 ww1 }) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fReadThres4 ::
    (Types.Thres -> Text.ParserCombinators.ReadP.P b1)
    -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 1,
     Unfolding: (\ @ b1
                   (k1 :: Types.Thres -> Text.ParserCombinators.ReadP.P b1) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readPrec} False True} let {
                                                                                                    lvl81 :: Text.ParserCombinators.ReadP.P
                                                                                                               b1
                                                                                                    = let {
                                                                                                        lvl82 :: Text.ParserCombinators.ReadP.P
                                                                                                                   b1
                                                                                                        = GHC.Read.$fReadInt3
                                                                                                            GHC.Read.$fReadInt_$sconvertInt
                                                                                                            Types.$fReadGeneState6
                                                                                                            @ b1
                                                                                                            (\ (a1 :: GHC.Types.Int) ->
                                                                                                             k1
                                                                                                               a1
                                                                                                                 `cast`
                                                                                                               (Sym (Types.N:Thres[0])))
                                                                                                      } in
                                                                                                      Text.Read.Lex.expect2
                                                                                                        @ b1
                                                                                                        (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                                                                                         case a1 of wild {
                                                                                                           DEFAULT
                                                                                                           -> Text.ParserCombinators.ReadP.Fail
                                                                                                                @ b1
                                                                                                           Text.Read.Lex.Ident a2
                                                                                                           -> case GHC.Base.eqString
                                                                                                                     a2
                                                                                                                     Types.$fReadThres5 of wild1 {
                                                                                                                GHC.Types.False
                                                                                                                -> Text.ParserCombinators.ReadP.Fail
                                                                                                                     @ b1
                                                                                                                GHC.Types.True
                                                                                                                -> lvl82 } })
                                                                                                  } in
                                                                                                  let {
                                                                                                    k :: ()
                                                                                                         -> Text.ParserCombinators.ReadP.P
                                                                                                              b1
                                                                                                      {- Arity: 1,
                                                                                                         Strictness: <L,A>,
                                                                                                         Inline: INLINE[0],
                                                                                                         Unfolding: InlineRule (1,
                                                                                                                                True,
                                                                                                                                True)
                                                                                                                    (\ (w4 :: ()) ->
                                                                                                                     lvl81) -}
                                                                                                    = \ (w4 :: ()) ->
                                                                                                      lvl81
                                                                                                  } in
                                                                                                  Text.ParserCombinators.ReadP.Look
                                                                                                    @ b1
                                                                                                    (\ (a :: GHC.Base.String) ->
                                                                                                     (Text.ParserCombinators.ReadP.skipSpaces_skip
                                                                                                        a)
                                                                                                       `cast`
                                                                                                     (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                          <()>_R)
                                                                                                       @ b1
                                                                                                       k)) -}
29f17052067b44877d4d31b30c4bcb61
  $fReadThres5 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readPrec} False True} GHC.CString.unpackCString#
                                                                                                    "Thres"#) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fReadThres6 :: Text.ParserCombinators.ReadP.P [Types.Thres]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readList} False True} Types.$fReadThres1
                                                                                                    GHC.Read.$fRead()5
                                                                                                    @ [Types.Thres]
                                                                                                    (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                                                                                                       @ [Types.Thres])) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fReadThres_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Types.Thres]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readList} True True} Text.ParserCombinators.ReadP.run
                                                                                                   @ [Types.Thres]
                                                                                                   Types.$fReadThres6) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fReadThres_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Types.Thres]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadThres1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Types.Thres]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Types.Thres]>_R))) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fReadThres_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadThres2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Types.Thres>_R)) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fReadThres_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Types.Thres
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Types.Thres
                   ((Types.$fReadThres2 eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.Thres>_R)
                      @ Types.Thres
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Types.Thres))) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fReadWeight :: GHC.Read.Read Types.Weight
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Weight
                  Types.$fReadWeight_$creadsPrec
                  Types.$fReadWeight_$creadList
                  Types.$fReadWeight_$creadPrec
                  Types.$fReadWeight_$creadListPrec -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fReadWeight1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Types.Weight] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readListPrec} True False} \ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                                                                                                        @ b
                                                                                                        (eta1 :: [Types.Weight]
                                                                                                                 -> Text.ParserCombinators.ReadP.P
                                                                                                                      b) ->
                                                                                                      {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readListPrec} False True} GHC.Read.list1
                                                                                                                                                                                             @ Types.Weight
                                                                                                                                                                                             Types.$fReadWeight2
                                                                                                                                                                                               `cast`
                                                                                                                                                                                             (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                                                                                                                       <Types.Weight>_R))
                                                                                                                                                                                             eta
                                                                                                                                                                                             @ b
                                                                                                                                                                                             eta1) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fReadWeight2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.Weight
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readPrec} True True} GHC.Read.parens1
                                                                                                   @ Types.Weight
                                                                                                   Types.$fReadWeight3
                                                                                                     `cast`
                                                                                                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                             <Types.Weight>_R))) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fReadWeight3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.Weight
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec) ->
                 case w of ww { GHC.Types.I# ww1 -> Types.$w$creadPrec5 ww1 }) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fReadWeight4 ::
    (Types.Weight -> Text.ParserCombinators.ReadP.P b1)
    -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 1,
     Unfolding: (\ @ b1
                   (k1 :: Types.Weight -> Text.ParserCombinators.ReadP.P b1) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readPrec} False True} let {
                                                                                                    lvl81 :: Text.ParserCombinators.ReadP.P
                                                                                                               b1
                                                                                                    = let {
                                                                                                        lvl82 :: Text.ParserCombinators.ReadP.P
                                                                                                                   b1
                                                                                                        = GHC.Read.$fReadInt3
                                                                                                            GHC.Read.$fReadInt_$sconvertInt
                                                                                                            Types.$fReadGeneState6
                                                                                                            @ b1
                                                                                                            (\ (a1 :: GHC.Types.Int) ->
                                                                                                             k1
                                                                                                               a1
                                                                                                                 `cast`
                                                                                                               (Sym (Types.N:Weight[0])))
                                                                                                      } in
                                                                                                      Text.Read.Lex.expect2
                                                                                                        @ b1
                                                                                                        (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                                                                                         case a1 of wild {
                                                                                                           DEFAULT
                                                                                                           -> Text.ParserCombinators.ReadP.Fail
                                                                                                                @ b1
                                                                                                           Text.Read.Lex.Ident a2
                                                                                                           -> case GHC.Base.eqString
                                                                                                                     a2
                                                                                                                     Types.$fReadWeight5 of wild1 {
                                                                                                                GHC.Types.False
                                                                                                                -> Text.ParserCombinators.ReadP.Fail
                                                                                                                     @ b1
                                                                                                                GHC.Types.True
                                                                                                                -> lvl82 } })
                                                                                                  } in
                                                                                                  let {
                                                                                                    k :: ()
                                                                                                         -> Text.ParserCombinators.ReadP.P
                                                                                                              b1
                                                                                                      {- Arity: 1,
                                                                                                         Strictness: <L,A>,
                                                                                                         Inline: INLINE[0],
                                                                                                         Unfolding: InlineRule (1,
                                                                                                                                True,
                                                                                                                                True)
                                                                                                                    (\ (w4 :: ()) ->
                                                                                                                     lvl81) -}
                                                                                                    = \ (w4 :: ()) ->
                                                                                                      lvl81
                                                                                                  } in
                                                                                                  Text.ParserCombinators.ReadP.Look
                                                                                                    @ b1
                                                                                                    (\ (a :: GHC.Base.String) ->
                                                                                                     (Text.ParserCombinators.ReadP.skipSpaces_skip
                                                                                                        a)
                                                                                                       `cast`
                                                                                                     (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                          <()>_R)
                                                                                                       @ b1
                                                                                                       k)) -}
f7e397326cc61363405b31941ccd2550
  $fReadWeight5 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readPrec} False True} GHC.CString.unpackCString#
                                                                                                    "Weight"#) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fReadWeight6 :: Text.ParserCombinators.ReadP.P [Types.Weight]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readList} False True} Types.$fReadWeight1
                                                                                                    GHC.Read.$fRead()5
                                                                                                    @ [Types.Weight]
                                                                                                    (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                                                                                                       @ [Types.Weight])) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fReadWeight_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Types.Weight]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readList} True True} Text.ParserCombinators.ReadP.run
                                                                                                   @ [Types.Weight]
                                                                                                   Types.$fReadWeight6) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fReadWeight_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Types.Weight]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadWeight1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Types.Weight]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Types.Weight]>_R))) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fReadWeight_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadWeight2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Types.Weight>_R)) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fReadWeight_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Types.Weight
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Types.Weight
                   ((Types.$fReadWeight2 eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.Weight>_R)
                      @ Types.Weight
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Types.Weight))) -}
d668358e4ab5e6774fd62fda536c7903
  $fRealGeneState :: GHC.Real.Real Types.GeneState
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.GeneState
                  Types.$fNumGeneState
                  Types.$fOrdGeneState
                  Types.$fRealGeneState_$ctoRational -}
942177bfb62edd86c288d2103e55730a
  $fRealGeneState1 :: GHC.Real.Rational
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   Types.$fRealGeneState2
                   GHC.Real.$fEnumRatio1) -}
adf88970f5098f34f16dcda236bb846e
  $fRealGeneState2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
b87566e4d47e3be38e34d9c26d961769
  $fRealGeneState3 :: GHC.Real.Rational
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   Types.$fNumGeneState2
                   GHC.Real.$fEnumRatio1) -}
d668358e4ab5e6774fd62fda536c7903
  $fRealGeneState_$ctoRational ::
    Types.GeneState -> GHC.Real.Rational
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.GeneState) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.toRational} True True} case ds
                                                                                                          `cast`
                                                                                                        (Types.N:GeneState[0]) of wild {
                                                                                                     GHC.Types.False
                                                                                                     -> Types.$fRealGeneState3
                                                                                                     GHC.Types.True
                                                                                                     -> Types.$fRealGeneState1 }) -}
f02152849ccc1a6d1ba195f399237c56
  $fRealID :: GHC.Real.Real Types.ID
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.ID
                  Types.$fNumID
                  Types.$fOrdID
                  Types.$fRealID_$ctoRational -}
474df855388d785b9cd4eaa7ddf6bbcd
  $fRealID1 :: GHC.Types.Int -> GHC.Real.Rational
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.toRational} True True} GHC.Real.$fEnumRatio_$ctoRational) -}
f02152849ccc1a6d1ba195f399237c56
  $fRealID_$ctoRational :: Types.ID -> GHC.Real.Rational
  {- Unfolding: InlineRule (0, True, True)
                Types.$fRealID1
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R <GHC.Real.Ratio GHC.Integer.Type.Integer>_R) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fRealThres :: GHC.Real.Real Types.Thres
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Thres
                  Types.$fNumThres
                  Types.$fOrdThres
                  Types.$fRealThres_$ctoRational -}
fa70b4aab1b22aa82941f4e7eec737ba
  $fRealThres1 :: GHC.Types.Int -> GHC.Real.Rational
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.toRational} True True} GHC.Real.$fEnumRatio_$ctoRational) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fRealThres_$ctoRational :: Types.Thres -> GHC.Real.Rational
  {- Unfolding: InlineRule (0, True, True)
                Types.$fRealThres1
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R <GHC.Real.Ratio GHC.Integer.Type.Integer>_R) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fRealWeight :: GHC.Real.Real Types.Weight
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Weight
                  Types.$fNumWeight
                  Types.$fOrdWeight
                  Types.$fRealWeight_$ctoRational -}
3decb896589c55d9ca633ae5c3c74a87
  $fRealWeight1 :: GHC.Types.Int -> GHC.Real.Rational
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.toRational} True True} GHC.Real.$fEnumRatio_$ctoRational) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fRealWeight_$ctoRational :: Types.Weight -> GHC.Real.Rational
  {- Unfolding: InlineRule (0, True, True)
                Types.$fRealWeight1
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R <GHC.Real.Ratio GHC.Integer.Type.Integer>_R) -}
96dc13c40ccb216e8863ab97a7d41886
  $fShowAgent :: GHC.Show.Show Types.Agent
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Agent
                  Types.$fShowAgent_$cshowsPrec
                  Types.$fShowAgent_$cshow
                  Types.$fShowAgent_$cshowList -}
96dc13c40ccb216e8863ab97a7d41886
  $fShowAgent1 :: Types.Agent -> GHC.Show.ShowS
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showList} False True} Types.$fShowAgent_$cshowsPrec
                                                                                                    Types.$fShowAgent2) -}
fe36e289b264c43ad8f5ba77c6a80f4c
  $fShowAgent2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
96dc13c40ccb216e8863ab97a7d41886
  $fShowAgent_$cshow :: Types.Agent -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.Agent) ->
                 Types.$fShowAgent_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
96dc13c40ccb216e8863ab97a7d41886
  $fShowAgent_$cshowList :: [Types.Agent] -> GHC.Show.ShowS
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showList} True True} GHC.Show.showList__
                                                                                                   @ Types.Agent
                                                                                                   Types.$fShowAgent1) -}
96dc13c40ccb216e8863ab97a7d41886
  $fShowAgent_$cshowsPrec ::
    GHC.Types.Int -> Types.Agent -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
e61fa6692e0904f1e277a345501f370e
  $fShowGene :: GHC.Show.Show Types.Gene
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Gene
                  Types.$fShowGene_$cshowsPrec
                  Types.$fShowGene_$cshow
                  Types.$fShowGene_$cshowList -}
e61fa6692e0904f1e277a345501f370e
  $fShowGene1 :: Types.Gene -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Types.Gene) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showList} False True} case w of ww { Types.Gene ww1 ww2 ww3 ->
                                                                                                  Types.$w$cshowsPrec
                                                                                                    0#
                                                                                                    ww1
                                                                                                    ww2
                                                                                                    ww3 }) -}
f86553adfe609274437334444f1b1b64
  $fShowGene10 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                     "ID "#) -}
dacafbc2b1a688600c5a5af4fa81e3ed
  $fShowGene2 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                     "}"#) -}
062e075c52c2bab321c4949b97942cb6
  $fShowGene3 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                     "genSt = "#) -}
e90e46e5f4d088f10615b0d14511da3b
  $fShowGene4 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                     "thres = "#) -}
9125cd0032543d8b32d152b6b9a8803e
  $fShowGene5 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                     ", "#) -}
e4b41ce74613eab30feffc3479b9c015
  $fShowGene6 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                     "geneID = "#) -}
68ca5e886d44e3dccc8e5289117a68dd
  $fShowGene7 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                     "Gene {"#) -}
89cf170d7034ac1eae8252f2530ccaba
  $fShowGene8 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                     "GS "#) -}
bb7b909e89cac361043c82582b388e7e
  $fShowGene9 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                     "Thres "#) -}
d668358e4ab5e6774fd62fda536c7903
  $fShowGeneState :: GHC.Show.Show Types.GeneState
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.GeneState
                  Types.$fShowGeneState_$cshowsPrec
                  Types.$fShowGeneState_$cshow
                  Types.$fShowGeneState_$cshowList -}
d668358e4ab5e6774fd62fda536c7903
  $fShowGeneState1 :: Types.GeneState -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Types.GeneState) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showList} False True} Types.$w$cshowsPrec1
                                                                                                    0#
                                                                                                    w) -}
df2b38c2aafca6e03a1c8f029f546b0a
  $fShowGeneState2 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} False True} GHC.Base.++
                                                                                                     @ GHC.Types.Char
                                                                                                     GHC.Show.shows17
                                                                                                     (GHC.Types.[]
                                                                                                        @ GHC.Types.Char)) -}
eeee751ca0999a31379477b5d3c5355a
  $fShowGeneState3 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} False True} GHC.Base.++
                                                                                                     @ GHC.Types.Char
                                                                                                     GHC.Show.shows18
                                                                                                     (GHC.Types.[]
                                                                                                        @ GHC.Types.Char)) -}
d668358e4ab5e6774fd62fda536c7903
  $fShowGeneState_$cshow :: Types.GeneState -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: Types.GeneState) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} True False} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} False True} GHC.Base.++
                                                                                                                                                                                       @ GHC.Types.Char
                                                                                                                                                                                       Types.$fShowGene8
                                                                                                                                                                                       (case x `cast`
                                                                                                                                                                                             (Types.N:GeneState[0]) of wild {
                                                                                                                                                                                          GHC.Types.False
                                                                                                                                                                                          -> Types.$fShowGeneState3
                                                                                                                                                                                          GHC.Types.True
                                                                                                                                                                                          -> Types.$fShowGeneState2 })) -}
d668358e4ab5e6774fd62fda536c7903
  $fShowGeneState_$cshowList :: [Types.GeneState] -> GHC.Show.ShowS
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showList} True True} GHC.Show.showList__
                                                                                                   @ Types.GeneState
                                                                                                   Types.$fShowGeneState1) -}
d668358e4ab5e6774fd62fda536c7903
  $fShowGeneState_$cshowsPrec ::
    GHC.Types.Int -> Types.GeneState -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Types.GeneState) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec1 ww1 w1 }) -}
e61fa6692e0904f1e277a345501f370e
  $fShowGene_$cshow :: Types.Gene -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U),U(U),U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.Gene) ->
                 Types.$fShowGene_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e61fa6692e0904f1e277a345501f370e
  $fShowGene_$cshowList :: [Types.Gene] -> GHC.Show.ShowS
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showList} True True} GHC.Show.showList__
                                                                                                   @ Types.Gene
                                                                                                   Types.$fShowGene1) -}
e61fa6692e0904f1e277a345501f370e
  $fShowGene_$cshowsPrec ::
    GHC.Types.Int -> Types.Gene -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U(U),U(U),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Types.Gene) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.Gene ww3 ww4 ww5 ->
                 Types.$w$cshowsPrec ww1 ww3 ww4 ww5 } }) -}
f02152849ccc1a6d1ba195f399237c56
  $fShowID :: GHC.Show.Show Types.ID
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.ID
                  Types.$fShowID_$cshowsPrec
                  Types.$fShowID_$cshow
                  Types.$fShowID_$cshowList -}
f02152849ccc1a6d1ba195f399237c56
  $fShowID1 :: Types.ID -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Types.ID) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showList} False True} Types.$w$cshowsPrec3
                                                                                                    0#
                                                                                                    w) -}
f02152849ccc1a6d1ba195f399237c56
  $fShowID_$cshow :: Types.ID -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: (\ (x :: Types.ID) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} True False} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} False True} GHC.Base.++
                                                                                                                                                                                       @ GHC.Types.Char
                                                                                                                                                                                       Types.$fShowGene10
                                                                                                                                                                                       (case x `cast`
                                                                                                                                                                                             (Types.N:ID[0]) of ww2 { GHC.Types.I# ww3 ->
                                                                                                                                                                                        case GHC.Show.$wshowSignedInt
                                                                                                                                                                                               11#
                                                                                                                                                                                               ww3
                                                                                                                                                                                               (GHC.Types.[]
                                                                                                                                                                                                  @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                                                                                                                        GHC.Types.:
                                                                                                                                                                                          @ GHC.Types.Char
                                                                                                                                                                                          ww5
                                                                                                                                                                                          ww6 } })) -}
f02152849ccc1a6d1ba195f399237c56
  $fShowID_$cshowList :: [Types.ID] -> GHC.Show.ShowS
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showList} True True} GHC.Show.showList__
                                                                                                   @ Types.ID
                                                                                                   Types.$fShowID1) -}
f02152849ccc1a6d1ba195f399237c56
  $fShowID_$cshowsPrec :: GHC.Types.Int -> Types.ID -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Types.ID) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec3 ww1 w1 }) -}
00852ab6e68f9437488a4b665181bda8
  $fShowLocus :: GHC.Show.Show Types.Locus
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Locus
                  Types.$fShowLocus_$cshowsPrec
                  Types.$fShowLocus_$cshow
                  Types.$fShowLocus_$cshowList -}
00852ab6e68f9437488a4b665181bda8
  $fShowLocus1 :: Types.Locus -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (x :: Types.Locus) (s :: GHC.Base.String)[OneShot] ->
                 GHC.Base.++ @ GHC.Types.Char (Types.$fShowLocus_$cshow x) s) -}
00852ab6e68f9437488a4b665181bda8
  $fShowLocus_$cshow :: Types.Locus -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
00852ab6e68f9437488a4b665181bda8
  $fShowLocus_$cshowList :: [Types.Locus] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [Types.Locus]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Types.Locus Types.$fShowLocus1 ls s) -}
00852ab6e68f9437488a4b665181bda8
  $fShowLocus_$cshowsPrec ::
    GHC.Types.Int -> Types.Locus -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: Types.Locus)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Types.$fShowLocus_$cshow x))
                   s) -}
c364d1799620a5ba7a05a7f6bbc17a6f
  $fShowTfbs :: GHC.Show.Show Types.Tfbs
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Tfbs
                  Types.$fShowTfbs_$cshowsPrec
                  Types.$fShowTfbs_$cshow
                  Types.$fShowTfbs_$cshowList -}
c364d1799620a5ba7a05a7f6bbc17a6f
  $fShowTfbs1 :: Types.Tfbs -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Types.Tfbs) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showList} False True} case w of ww { Types.Tfbs ww1 ww2 ->
                                                                                                  Types.$w$cshowsPrec4
                                                                                                    0#
                                                                                                    ww1
                                                                                                    ww2 }) -}
b7e260b2d20073772915b14bf3ce5638
  $fShowTfbs2 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                     "}"#) -}
5cbc91dd87cea74c8513207c2126e481
  $fShowTfbs3 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                     "wt = "#) -}
43464187d04fc31b48b217355d24f91f
  $fShowTfbs4 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                     ", "#) -}
f01b375b27d26b4ee76acb6c852f2a27
  $fShowTfbs5 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                     "tfbsID = "#) -}
49f41be7d7220db7320924089898f46a
  $fShowTfbs6 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                     "Tfbs {"#) -}
90483ed077595cb2060ae726dc33748c
  $fShowTfbs7 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                     "Weight "#) -}
c364d1799620a5ba7a05a7f6bbc17a6f
  $fShowTfbs_$cshow :: Types.Tfbs -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U),U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.Tfbs) ->
                 Types.$fShowTfbs_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c364d1799620a5ba7a05a7f6bbc17a6f
  $fShowTfbs_$cshowList :: [Types.Tfbs] -> GHC.Show.ShowS
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showList} True True} GHC.Show.showList__
                                                                                                   @ Types.Tfbs
                                                                                                   Types.$fShowTfbs1) -}
c364d1799620a5ba7a05a7f6bbc17a6f
  $fShowTfbs_$cshowsPrec ::
    GHC.Types.Int -> Types.Tfbs -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U(U),U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Types.Tfbs) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.Tfbs ww3 ww4 ->
                 Types.$w$cshowsPrec4 ww1 ww3 ww4 } }) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fShowThres :: GHC.Show.Show Types.Thres
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Thres
                  Types.$fShowThres_$cshowsPrec
                  Types.$fShowThres_$cshow
                  Types.$fShowThres_$cshowList -}
c477b1316e727b5e6b759a7b2233b4a2
  $fShowThres1 :: Types.Thres -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Types.Thres) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showList} False True} Types.$w$cshowsPrec2
                                                                                                    0#
                                                                                                    w) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fShowThres_$cshow :: Types.Thres -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: (\ (x :: Types.Thres) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} True False} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} False True} GHC.Base.++
                                                                                                                                                                                       @ GHC.Types.Char
                                                                                                                                                                                       Types.$fShowGene9
                                                                                                                                                                                       (case x `cast`
                                                                                                                                                                                             (Types.N:Thres[0]) of ww2 { GHC.Types.I# ww3 ->
                                                                                                                                                                                        case GHC.Show.$wshowSignedInt
                                                                                                                                                                                               11#
                                                                                                                                                                                               ww3
                                                                                                                                                                                               (GHC.Types.[]
                                                                                                                                                                                                  @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                                                                                                                        GHC.Types.:
                                                                                                                                                                                          @ GHC.Types.Char
                                                                                                                                                                                          ww5
                                                                                                                                                                                          ww6 } })) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fShowThres_$cshowList :: [Types.Thres] -> GHC.Show.ShowS
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showList} True True} GHC.Show.showList__
                                                                                                   @ Types.Thres
                                                                                                   Types.$fShowThres1) -}
c477b1316e727b5e6b759a7b2233b4a2
  $fShowThres_$cshowsPrec ::
    GHC.Types.Int -> Types.Thres -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Types.Thres) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec2 ww1 w1 }) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fShowWeight :: GHC.Show.Show Types.Weight
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Weight
                  Types.$fShowWeight_$cshowsPrec
                  Types.$fShowWeight_$cshow
                  Types.$fShowWeight_$cshowList -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fShowWeight1 :: Types.Weight -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Types.Weight) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showList} False True} Types.$w$cshowsPrec5
                                                                                                    0#
                                                                                                    w) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fShowWeight_$cshow :: Types.Weight -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: (\ (x :: Types.Weight) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} True False} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} False True} GHC.Base.++
                                                                                                                                                                                       @ GHC.Types.Char
                                                                                                                                                                                       Types.$fShowTfbs7
                                                                                                                                                                                       (case x `cast`
                                                                                                                                                                                             (Types.N:Weight[0]) of ww2 { GHC.Types.I# ww3 ->
                                                                                                                                                                                        case GHC.Show.$wshowSignedInt
                                                                                                                                                                                               11#
                                                                                                                                                                                               ww3
                                                                                                                                                                                               (GHC.Types.[]
                                                                                                                                                                                                  @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                                                                                                                        GHC.Types.:
                                                                                                                                                                                          @ GHC.Types.Char
                                                                                                                                                                                          ww5
                                                                                                                                                                                          ww6 } })) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fShowWeight_$cshowList :: [Types.Weight] -> GHC.Show.ShowS
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showList} True True} GHC.Show.showList__
                                                                                                   @ Types.Weight
                                                                                                   Types.$fShowWeight1) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $fShowWeight_$cshowsPrec ::
    GHC.Types.Int -> Types.Weight -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Types.Weight) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec5 ww1 w1 }) -}
1238da944c8d1141b08a7be10ebbf353
  $sconcatMap :: (a -> [b]) -> [a] -> [b]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a @ b (f :: a -> [b]) (xs :: [a]) ->
                 GHC.Base.build
                   @ b
                   (\ @ b1 (c :: b -> b1 -> b1)[OneShot] (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ a
                      @ b1
                      (\ (x :: a) (b2 :: b1)[OneShot] ->
                       GHC.Base.foldr @ b @ b1 c b2 (f x))
                      n
                      xs)) -}
7d5be095411582e7a5f6d10508da59c1
  $tc'Agent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13717071026600258116##
                   2177163121068691261##
                   Types.$trModule
                   Types.$tc'Agent1) -}
3c04853acc9ee95a5456ec8aadf36cb3
  $tc'Agent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Agent"#) -}
928d6d9f5096af6a1412aa929fad2d5b
  $tc'C:GeneType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13040004606787765055##
                   8661752189272511450##
                   Types.$trModule
                   Types.$tc'C:GeneType1) -}
41525d7b2dc84181fdd09609405eb88e
  $tc'C:GeneType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:GeneType"#) -}
9ee134fb859a03a4a9f509815aa0787c
  $tc'CGene :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6138648782990100781##
                   1923583818575878211##
                   Types.$trModule
                   Types.$tc'CGene1) -}
7e6174766e3ea7cff3c273769cc15cc7
  $tc'CGene1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CGene"#) -}
f4f6f8434b3e356dbd731c408ca701d2
  $tc'CTfbs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   999369668416252004##
                   14736510968910818022##
                   Types.$trModule
                   Types.$tc'CTfbs1) -}
e17ca8d917982176eb19550234f511bd
  $tc'CTfbs1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CTfbs"#) -}
e00be0e80a64ee10a2ed2399cc03a358
  $tc'GS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14321501116839215569##
                   11026533644566359055##
                   Types.$trModule
                   Types.$tc'GS1) -}
d91aa3268dbaa7907776a006eef38360
  $tc'GS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'GS"#) -}
f798e77680afa10468a76e428b1b1577
  $tc'Gene :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6951063806264134193##
                   17792599242417815642##
                   Types.$trModule
                   Types.$tc'Gene1) -}
44b3f4fbdbd8b35d3193292f96b14b62
  $tc'Gene1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Gene"#) -}
dd57a5a1305677e81506c63f8a38c669
  $tc'ID :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13278953122234441593##
                   8952106218379984385##
                   Types.$trModule
                   Types.$tc'ID1) -}
142a725713b379fcbccceb1480f3ac41
  $tc'ID1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ID"#) -}
e55a1fc7c730914fe6375cd64cfef15a
  $tc'NoAgent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5545003087215351968##
                   16717262006119024740##
                   Types.$trModule
                   Types.$tc'NoAgent1) -}
c137df1672861bcf050154ae1873abc8
  $tc'NoAgent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NoAgent"#) -}
1453fc9ff5e557c92f4dcb6ed4340a52
  $tc'Tfbs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12525212971019027270##
                   16726322911236538465##
                   Types.$trModule
                   Types.$tc'Tfbs1) -}
de03b4f3898bb8f996d1c153594cba66
  $tc'Tfbs1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Tfbs"#) -}
735559b865e56fdf6a3ba74576eede8b
  $tc'Thres :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2497977958049164095##
                   1933558436790113065##
                   Types.$trModule
                   Types.$tc'Thres1) -}
0a2dc86236a6d179345f88fddef3ab27
  $tc'Thres1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Thres"#) -}
f6b1eceab37f5e4d645f4386b9197dfa
  $tc'Transposon :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2787302764975854594##
                   16772105340701017257##
                   Types.$trModule
                   Types.$tc'Transposon1) -}
2493a77b6ca3b55fa1f6e731001f68fc
  $tc'Transposon1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Transposon"#) -}
3ad447912053966c92232c40658f187a
  $tc'Weight :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16116657425749902062##
                   12334414328793412370##
                   Types.$trModule
                   Types.$tc'Weight1) -}
d651df1a9744633087640295018f19d2
  $tc'Weight1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Weight"#) -}
c636cfeabd3fa233b44421e3533b9251
  $tc'World :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2637944662775867122##
                   23725289311612328##
                   Types.$trModule
                   Types.$tc'World1) -}
db548382b902a02e90cafff8855896cb
  $tc'World1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'World"#) -}
73bfc89c3c914f4f754e86ea3511efe9
  $tcAgent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7663583667388270771##
                   12561804582262700945##
                   Types.$trModule
                   Types.$tcAgent1) -}
6c3e9cbe354ddd64750f511ed75dfec2
  $tcAgent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Agent"#) -}
33ac4cd5fc8228dcd5626791022a652a
  $tcGene :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14272149258308690436##
                   7314584920444681646##
                   Types.$trModule
                   Types.$tcGene1) -}
5fd5b632a135585b0f9f1a9c5baae80e
  $tcGene1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Gene"#) -}
be9f2d3dfcc508b63b0522c68f6f72e3
  $tcGeneState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   148212473901593329##
                   14227789473737973249##
                   Types.$trModule
                   Types.$tcGeneState1) -}
cf5bd95e4c6f79a9b182ca3eb49c5a5e
  $tcGeneState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "GeneState"#) -}
d2a79691cf65890b08210fb03882f0da
  $tcGeneType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14737859080173886656##
                   17262482802804506138##
                   Types.$trModule
                   Types.$tcGeneType1) -}
7b06322407b6f1dfda9aebc67fc09a11
  $tcGeneType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "GeneType"#) -}
d22ff42516942bff59a96ec26e3aa6b7
  $tcID :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   43396462399028478##
                   4779250508417933572##
                   Types.$trModule
                   Types.$tcID1) -}
8f890dc2429beb7f3719508c75ea8eab
  $tcID1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ID"#) -}
ef53c8f192a384939988b045a91e1a59
  $tcLocus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3664281678073843944##
                   12707566988757385379##
                   Types.$trModule
                   Types.$tcLocus1) -}
fb97faa0398b4582f36c329037f4e6ba
  $tcLocus1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Locus"#) -}
29e228f35345eb6931658b4b57d98e34
  $tcTfbs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   711592396603320655##
                   6031788743173806144##
                   Types.$trModule
                   Types.$tcTfbs1) -}
9a07adc4df1abc2fcf09bd2ac3a4bb92
  $tcTfbs1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Tfbs"#) -}
a82a6ad5e57480f4a5e7b2742eaae4b2
  $tcThres :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17798332674343525700##
                   14010780145419418785##
                   Types.$trModule
                   Types.$tcThres1) -}
e1e13f57e9e8acb1c94c92724428871b
  $tcThres1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Thres"#) -}
76c85cd2fb5d31afceea9f0270d5a61c
  $tcWeight :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17527411985410523053##
                   14281726704456241046##
                   Types.$trModule
                   Types.$tcWeight1) -}
75b7d5e7044f5b7579612f070ed7a58c
  $tcWeight1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Weight"#) -}
53e3cd1bd8b1fd658f18b0f6f92cb048
  $tcWorld :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10819147255238240947##
                   13115467634172629186##
                   Types.$trModule
                   Types.$tcWorld1) -}
4ed0e9b6cae0a4d1191bbfd6f7de0957
  $tcWorld1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "World"#) -}
23cca45dad514d1fa45ea690f1aea7ea
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Types.$trModule2 Types.$trModule1) -}
5e26ed2093dfba35d50576c08b3296eb
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Types"#) -}
2171a7e866c3021bca8dd1cef1160bca
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT"#) -}
1136e8477816e3dea32b1615de82f105
  $w$c/= ::
    Types.ID
    -> Types.Weight -> Types.ID -> Types.Weight -> GHC.Types.Bool
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Types.ID)
                   (ww1 :: Types.Weight)
                   (ww2 :: Types.ID)
                   (ww3 :: Types.Weight) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types./=} True True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.==} True False} case {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.==} False True} Types.$fEqID2
                                                                                                                                                                                                                                                        ww
                                                                                                                                                                                                                                                          `cast`
                                                                                                                                                                                                                                                        (Types.N:ID[0])
                                                                                                                                                                                                                                                        ww2
                                                                                                                                                                                                                                                          `cast`
                                                                                                                                                                                                                                                        (Types.N:ID[0]) of wild {
                                                                                                                                                                        GHC.Types.False
                                                                                                                                                                        -> GHC.Types.True
                                                                                                                                                                        GHC.Types.True
                                                                                                                                                                        -> case {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.==} False True} Types.$fEqLocus1
                                                                                                                                                                                                                                                             ww1
                                                                                                                                                                                                                                                               `cast`
                                                                                                                                                                                                                                                             (Types.N:Weight[0])
                                                                                                                                                                                                                                                             ww3
                                                                                                                                                                                                                                                               `cast`
                                                                                                                                                                                                                                                             (Types.N:Weight[0]) of wild1 {
                                                                                                                                                                             GHC.Types.False
                                                                                                                                                                             -> GHC.Types.True
                                                                                                                                                                             GHC.Types.True
                                                                                                                                                                             -> GHC.Types.False } }) -}
d57d4691b8bbb9015c3958ebf200bceb
  $w$c< ::
    Types.ID
    -> Types.Weight -> Types.ID -> Types.Weight -> GHC.Types.Bool
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Types.ID)
                   (ww1 :: Types.Weight)
                   (ww2 :: Types.ID)
                   (ww3 :: Types.Weight) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.<} True True} case Types.$fOrdID7
                                                                                                 ww
                                                                                                   `cast`
                                                                                                 (Types.N:ID[0])
                                                                                                 ww2
                                                                                                   `cast`
                                                                                                 (Types.N:ID[0]) of wild {
                                                                                            GHC.Types.LT
                                                                                            -> GHC.Types.True
                                                                                            GHC.Types.EQ
                                                                                            -> Types.$fOrdWeight6
                                                                                                 ww1
                                                                                                   `cast`
                                                                                                 (Types.N:Weight[0])
                                                                                                 ww3
                                                                                                   `cast`
                                                                                                 (Types.N:Weight[0])
                                                                                            GHC.Types.GT
                                                                                            -> GHC.Types.False }) -}
ca92b16ab3ba22bf7fe6a5b0c6effb3a
  $w$c<= ::
    Types.ID
    -> Types.Weight -> Types.ID -> Types.Weight -> GHC.Types.Bool
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Types.ID)
                   (ww1 :: Types.Weight)
                   (ww2 :: Types.ID)
                   (ww3 :: Types.Weight) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.<=} True True} case Types.$fOrdID7
                                                                                                  ww
                                                                                                    `cast`
                                                                                                  (Types.N:ID[0])
                                                                                                  ww2
                                                                                                    `cast`
                                                                                                  (Types.N:ID[0]) of wild {
                                                                                             GHC.Types.LT
                                                                                             -> GHC.Types.True
                                                                                             GHC.Types.EQ
                                                                                             -> Types.$fOrdWeight5
                                                                                                  ww1
                                                                                                    `cast`
                                                                                                  (Types.N:Weight[0])
                                                                                                  ww3
                                                                                                    `cast`
                                                                                                  (Types.N:Weight[0])
                                                                                             GHC.Types.GT
                                                                                             -> GHC.Types.False }) -}
aea22eb73bb1ca1ca1a69fb6ab25dd38
  $w$c== ::
    Types.ID
    -> Types.Weight -> Types.ID -> Types.Weight -> GHC.Types.Bool
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Types.ID)
                   (ww1 :: Types.Weight)
                   (ww2 :: Types.ID)
                   (ww3 :: Types.Weight) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.==} True True} case Types.$fEqID2
                                                                                                  ww
                                                                                                    `cast`
                                                                                                  (Types.N:ID[0])
                                                                                                  ww2
                                                                                                    `cast`
                                                                                                  (Types.N:ID[0]) of wild {
                                                                                             GHC.Types.False
                                                                                             -> GHC.Types.False
                                                                                             GHC.Types.True
                                                                                             -> Types.$fEqLocus1
                                                                                                  ww1
                                                                                                    `cast`
                                                                                                  (Types.N:Weight[0])
                                                                                                  ww3
                                                                                                    `cast`
                                                                                                  (Types.N:Weight[0]) }) -}
79b3068e3b3a425b583cc295b60651e0
  $w$c==1 ::
    Types.ID
    -> Types.Thres
    -> Types.GeneState
    -> Types.ID
    -> Types.Thres
    -> Types.GeneState
    -> GHC.Types.Bool
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Types.ID)
                   (ww1 :: Types.Thres)
                   (ww2 :: Types.GeneState)
                   (ww3 :: Types.ID)
                   (ww4 :: Types.Thres)
                   (ww5 :: Types.GeneState) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.==} True True} case Types.$fEqID2
                                                                                                  ww
                                                                                                    `cast`
                                                                                                  (Types.N:ID[0])
                                                                                                  ww3
                                                                                                    `cast`
                                                                                                  (Types.N:ID[0]) of wild {
                                                                                             GHC.Types.False
                                                                                             -> GHC.Types.False
                                                                                             GHC.Types.True
                                                                                             -> case Types.$fEqLocus2
                                                                                                       ww1
                                                                                                         `cast`
                                                                                                       (Types.N:Thres[0])
                                                                                                       ww4
                                                                                                         `cast`
                                                                                                       (Types.N:Thres[0]) of wild1 {
                                                                                                  GHC.Types.False
                                                                                                  -> GHC.Types.False
                                                                                                  GHC.Types.True
                                                                                                  -> Types.$fEqGeneState2
                                                                                                       ww2
                                                                                                         `cast`
                                                                                                       (Types.N:GeneState[0])
                                                                                                       ww5
                                                                                                         `cast`
                                                                                                       (Types.N:GeneState[0]) } }) -}
92d600d98bd48626585f5b7473c018cd
  $w$c> ::
    Types.ID
    -> Types.Weight -> Types.ID -> Types.Weight -> GHC.Types.Bool
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Types.ID)
                   (ww1 :: Types.Weight)
                   (ww2 :: Types.ID)
                   (ww3 :: Types.Weight) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.>} True True} case Types.$fOrdID7
                                                                                                 ww
                                                                                                   `cast`
                                                                                                 (Types.N:ID[0])
                                                                                                 ww2
                                                                                                   `cast`
                                                                                                 (Types.N:ID[0]) of wild {
                                                                                            GHC.Types.LT
                                                                                            -> GHC.Types.False
                                                                                            GHC.Types.EQ
                                                                                            -> Types.$fOrdWeight4
                                                                                                 ww1
                                                                                                   `cast`
                                                                                                 (Types.N:Weight[0])
                                                                                                 ww3
                                                                                                   `cast`
                                                                                                 (Types.N:Weight[0])
                                                                                            GHC.Types.GT
                                                                                            -> GHC.Types.True }) -}
69358ce9c24d3c9cd43e7f12e2d6bfb8
  $w$c>= ::
    Types.ID
    -> Types.Weight -> Types.ID -> Types.Weight -> GHC.Types.Bool
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Types.ID)
                   (ww1 :: Types.Weight)
                   (ww2 :: Types.ID)
                   (ww3 :: Types.Weight) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.>=} True True} case Types.$fOrdID7
                                                                                                  ww
                                                                                                    `cast`
                                                                                                  (Types.N:ID[0])
                                                                                                  ww2
                                                                                                    `cast`
                                                                                                  (Types.N:ID[0]) of wild {
                                                                                             GHC.Types.LT
                                                                                             -> GHC.Types.False
                                                                                             GHC.Types.EQ
                                                                                             -> Types.$fOrdWeight3
                                                                                                  ww1
                                                                                                    `cast`
                                                                                                  (Types.N:Weight[0])
                                                                                                  ww3
                                                                                                    `cast`
                                                                                                  (Types.N:Weight[0])
                                                                                             GHC.Types.GT
                                                                                             -> GHC.Types.True }) -}
349e5c326186c9b09dae4bf22133da3a
  $w$ccompare ::
    Types.ID
    -> Types.Thres
    -> Types.GeneState
    -> Types.ID
    -> Types.Thres
    -> Types.GeneState
    -> GHC.Types.Ordering
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Types.ID)
                   (ww1 :: Types.Thres)
                   (ww2 :: Types.GeneState)
                   (ww3 :: Types.ID)
                   (ww4 :: Types.Thres)
                   (ww5 :: Types.GeneState) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.compare} True True} case Types.$fEqID2
                                                                                                       ww
                                                                                                         `cast`
                                                                                                       (Types.N:ID[0])
                                                                                                       ww3
                                                                                                         `cast`
                                                                                                       (Types.N:ID[0]) of wild {
                                                                                                  GHC.Types.False
                                                                                                  -> Types.$fOrdID7
                                                                                                       ww
                                                                                                         `cast`
                                                                                                       (Types.N:ID[0])
                                                                                                       ww3
                                                                                                         `cast`
                                                                                                       (Types.N:ID[0])
                                                                                                  GHC.Types.True
                                                                                                  -> case Types.$fEqGeneState2
                                                                                                            ww2
                                                                                                              `cast`
                                                                                                            (Types.N:GeneState[0])
                                                                                                            ww5
                                                                                                              `cast`
                                                                                                            (Types.N:GeneState[0]) of wild1 {
                                                                                                       GHC.Types.False
                                                                                                       -> Types.$fOrdGeneState7
                                                                                                            ww5
                                                                                                              `cast`
                                                                                                            (Types.N:GeneState[0])
                                                                                                            ww2
                                                                                                              `cast`
                                                                                                            (Types.N:GeneState[0])
                                                                                                       GHC.Types.True
                                                                                                       -> Types.$fOrdThres7
                                                                                                            ww1
                                                                                                              `cast`
                                                                                                            (Types.N:Thres[0])
                                                                                                            ww4
                                                                                                              `cast`
                                                                                                            (Types.N:Thres[0]) } }) -}
a94737b43de701c00478538a73a6e4a0
  $w$ccompare1 ::
    Types.ID
    -> Types.Weight -> Types.ID -> Types.Weight -> GHC.Types.Ordering
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Types.ID)
                   (ww1 :: Types.Weight)
                   (ww2 :: Types.ID)
                   (ww3 :: Types.Weight) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.compare} True True} case Types.$fOrdID7
                                                                                                       ww
                                                                                                         `cast`
                                                                                                       (Types.N:ID[0])
                                                                                                       ww2
                                                                                                         `cast`
                                                                                                       (Types.N:ID[0]) of wild {
                                                                                                  GHC.Types.LT
                                                                                                  -> GHC.Types.LT
                                                                                                  GHC.Types.EQ
                                                                                                  -> Types.$fOrdWeight7
                                                                                                       ww1
                                                                                                         `cast`
                                                                                                       (Types.N:Weight[0])
                                                                                                       ww3
                                                                                                         `cast`
                                                                                                       (Types.N:Weight[0])
                                                                                                  GHC.Types.GT
                                                                                                  -> GHC.Types.GT }) -}
e61fa6692e0904f1e277a345501f370e
  $w$creadPrec ::
    GHC.Prim.Int# -> Text.ParserCombinators.ReadP.ReadP Types.Gene
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readPrec} False True} case GHC.Prim.tagToEnum#
                                                                                                         @ GHC.Types.Bool
                                                                                                         (GHC.Prim.<=#
                                                                                                            ww
                                                                                                            11#) of wild2 {
                                                                                                    GHC.Types.False
                                                                                                    -> (Text.ParserCombinators.ReadP.pfail1
                                                                                                          @ Types.Gene)
                                                                                                         `cast`
                                                                                                       (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                 <Types.Gene>_R))
                                                                                                    GHC.Types.True
                                                                                                    -> Types.$fReadGene4
                                                                                                         `cast`
                                                                                                       (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                 <Types.Gene>_R)) }) -}
d668358e4ab5e6774fd62fda536c7903
  $w$creadPrec1 ::
    GHC.Prim.Int# -> Text.ParserCombinators.ReadP.ReadP Types.GeneState
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readPrec} False True} case GHC.Prim.tagToEnum#
                                                                                                         @ GHC.Types.Bool
                                                                                                         (GHC.Prim.<=#
                                                                                                            ww
                                                                                                            10#) of wild2 {
                                                                                                    GHC.Types.False
                                                                                                    -> (Text.ParserCombinators.ReadP.pfail1
                                                                                                          @ Types.GeneState)
                                                                                                         `cast`
                                                                                                       (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                 <Types.GeneState>_R))
                                                                                                    GHC.Types.True
                                                                                                    -> Types.$fReadGeneState4
                                                                                                         `cast`
                                                                                                       (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                 <Types.GeneState>_R)) }) -}
f02152849ccc1a6d1ba195f399237c56
  $w$creadPrec2 ::
    GHC.Prim.Int# -> Text.ParserCombinators.ReadP.ReadP Types.ID
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readPrec} False True} case GHC.Prim.tagToEnum#
                                                                                                         @ GHC.Types.Bool
                                                                                                         (GHC.Prim.<=#
                                                                                                            ww
                                                                                                            10#) of wild2 {
                                                                                                    GHC.Types.False
                                                                                                    -> (Text.ParserCombinators.ReadP.pfail1
                                                                                                          @ Types.ID)
                                                                                                         `cast`
                                                                                                       (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                 <Types.ID>_R))
                                                                                                    GHC.Types.True
                                                                                                    -> Types.$fReadID4
                                                                                                         `cast`
                                                                                                       (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                 <Types.ID>_R)) }) -}
c364d1799620a5ba7a05a7f6bbc17a6f
  $w$creadPrec3 ::
    GHC.Prim.Int# -> Text.ParserCombinators.ReadP.ReadP Types.Tfbs
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readPrec} False True} case GHC.Prim.tagToEnum#
                                                                                                         @ GHC.Types.Bool
                                                                                                         (GHC.Prim.<=#
                                                                                                            ww
                                                                                                            11#) of wild2 {
                                                                                                    GHC.Types.False
                                                                                                    -> (Text.ParserCombinators.ReadP.pfail1
                                                                                                          @ Types.Tfbs)
                                                                                                         `cast`
                                                                                                       (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                 <Types.Tfbs>_R))
                                                                                                    GHC.Types.True
                                                                                                    -> Types.$fReadTfbs4
                                                                                                         `cast`
                                                                                                       (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                 <Types.Tfbs>_R)) }) -}
c477b1316e727b5e6b759a7b2233b4a2
  $w$creadPrec4 ::
    GHC.Prim.Int# -> Text.ParserCombinators.ReadP.ReadP Types.Thres
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readPrec} False True} case GHC.Prim.tagToEnum#
                                                                                                         @ GHC.Types.Bool
                                                                                                         (GHC.Prim.<=#
                                                                                                            ww
                                                                                                            10#) of wild2 {
                                                                                                    GHC.Types.False
                                                                                                    -> (Text.ParserCombinators.ReadP.pfail1
                                                                                                          @ Types.Thres)
                                                                                                         `cast`
                                                                                                       (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                 <Types.Thres>_R))
                                                                                                    GHC.Types.True
                                                                                                    -> Types.$fReadThres4
                                                                                                         `cast`
                                                                                                       (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                 <Types.Thres>_R)) }) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $w$creadPrec5 ::
    GHC.Prim.Int# -> Text.ParserCombinators.ReadP.ReadP Types.Weight
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.readPrec} False True} case GHC.Prim.tagToEnum#
                                                                                                         @ GHC.Types.Bool
                                                                                                         (GHC.Prim.<=#
                                                                                                            ww
                                                                                                            10#) of wild2 {
                                                                                                    GHC.Types.False
                                                                                                    -> (Text.ParserCombinators.ReadP.pfail1
                                                                                                          @ Types.Weight)
                                                                                                         `cast`
                                                                                                       (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                 <Types.Weight>_R))
                                                                                                    GHC.Types.True
                                                                                                    -> Types.$fReadWeight4
                                                                                                         `cast`
                                                                                                       (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                 <Types.Weight>_R)) }) -}
d9eb366c4b7125d0035a7bbee0753b84
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Types.ID -> Types.Thres -> Types.GeneState -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,U(U)><L,U(U)><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Types.ID)
                   (ww2 :: Types.Thres)
                   (ww3 :: Types.GeneState) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} True True} let {
                                                                                                    f :: GHC.Base.String
                                                                                                         -> GHC.Base.String
                                                                                                    = Types.$w$cshowsPrec3
                                                                                                        0#
                                                                                                        ww1
                                                                                                  } in
                                                                                                  let {
                                                                                                    f1 :: GHC.Base.String
                                                                                                          -> GHC.Base.String
                                                                                                    = Types.$w$cshowsPrec2
                                                                                                        0#
                                                                                                        ww2
                                                                                                  } in
                                                                                                  let {
                                                                                                    f2 :: GHC.Base.String
                                                                                                          -> GHC.Base.String
                                                                                                    = Types.$w$cshowsPrec1
                                                                                                        0#
                                                                                                        ww3
                                                                                                  } in
                                                                                                  let {
                                                                                                    p :: GHC.Show.ShowS
                                                                                                      {- Arity: 1,
                                                                                                         Strictness: <L,1*U> -}
                                                                                                    = \ (x :: GHC.Base.String) ->
                                                                                                      GHC.Base.++
                                                                                                        @ GHC.Types.Char
                                                                                                        Types.$fShowGene7
                                                                                                        (GHC.Base.++
                                                                                                           @ GHC.Types.Char
                                                                                                           Types.$fShowGene6
                                                                                                           (f (GHC.Base.++
                                                                                                                 @ GHC.Types.Char
                                                                                                                 Types.$fShowGene5
                                                                                                                 (GHC.Base.++
                                                                                                                    @ GHC.Types.Char
                                                                                                                    Types.$fShowGene4
                                                                                                                    (f1
                                                                                                                       (GHC.Base.++
                                                                                                                          @ GHC.Types.Char
                                                                                                                          Types.$fShowGene5
                                                                                                                          (GHC.Base.++
                                                                                                                             @ GHC.Types.Char
                                                                                                                             Types.$fShowGene3
                                                                                                                             (f2
                                                                                                                                (GHC.Base.++
                                                                                                                                   @ GHC.Types.Char
                                                                                                                                   Types.$fShowGene2
                                                                                                                                   x)))))))))
                                                                                                  } in
                                                                                                  case GHC.Prim.tagToEnum#
                                                                                                         @ GHC.Types.Bool
                                                                                                         (GHC.Prim.>=#
                                                                                                            ww
                                                                                                            11#) of wild {
                                                                                                    GHC.Types.False
                                                                                                    -> p
                                                                                                    GHC.Types.True
                                                                                                    -> \ (x :: GHC.Base.String) ->
                                                                                                       GHC.Types.:
                                                                                                         @ GHC.Types.Char
                                                                                                         GHC.Show.shows7
                                                                                                         (p (GHC.Types.:
                                                                                                               @ GHC.Types.Char
                                                                                                               GHC.Show.shows4
                                                                                                               x)) }) -}
d668358e4ab5e6774fd62fda536c7903
  $w$cshowsPrec1 ::
    GHC.Prim.Int# -> Types.GeneState -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: Types.GeneState) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} True True} let {
                                                                                                    p :: GHC.Show.ShowS
                                                                                                      {- Arity: 1,
                                                                                                         Strictness: <L,1*U> -}
                                                                                                    = \ (x :: GHC.Base.String) ->
                                                                                                      GHC.Base.++
                                                                                                        @ GHC.Types.Char
                                                                                                        Types.$fShowGene8
                                                                                                        (case w `cast`
                                                                                                              (Types.N:GeneState[0]) of wild {
                                                                                                           GHC.Types.False
                                                                                                           -> GHC.Base.++
                                                                                                                @ GHC.Types.Char
                                                                                                                GHC.Show.shows18
                                                                                                                x
                                                                                                           GHC.Types.True
                                                                                                           -> GHC.Base.++
                                                                                                                @ GHC.Types.Char
                                                                                                                GHC.Show.shows17
                                                                                                                x })
                                                                                                  } in
                                                                                                  case GHC.Prim.tagToEnum#
                                                                                                         @ GHC.Types.Bool
                                                                                                         (GHC.Prim.>=#
                                                                                                            ww
                                                                                                            11#) of wild {
                                                                                                    GHC.Types.False
                                                                                                    -> p
                                                                                                    GHC.Types.True
                                                                                                    -> \ (x :: GHC.Base.String) ->
                                                                                                       GHC.Types.:
                                                                                                         @ GHC.Types.Char
                                                                                                         GHC.Show.shows7
                                                                                                         (p (GHC.Types.:
                                                                                                               @ GHC.Types.Char
                                                                                                               GHC.Show.shows4
                                                                                                               x)) }) -}
c477b1316e727b5e6b759a7b2233b4a2
  $w$cshowsPrec2 :: GHC.Prim.Int# -> Types.Thres -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><L,U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: Types.Thres) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} True True} case GHC.Prim.tagToEnum#
                                                                                                         @ GHC.Types.Bool
                                                                                                         (GHC.Prim.>=#
                                                                                                            ww
                                                                                                            11#) of wild {
                                                                                                    GHC.Types.False
                                                                                                    -> \ (x :: GHC.Base.String) ->
                                                                                                       GHC.Base.++
                                                                                                         @ GHC.Types.Char
                                                                                                         Types.$fShowGene9
                                                                                                         (case w `cast`
                                                                                                               (Types.N:Thres[0]) of ww2 { GHC.Types.I# ww3 ->
                                                                                                          case GHC.Show.$wshowSignedInt
                                                                                                                 11#
                                                                                                                 ww3
                                                                                                                 x of ww4 { (#,#) ww5 ww6 ->
                                                                                                          GHC.Types.:
                                                                                                            @ GHC.Types.Char
                                                                                                            ww5
                                                                                                            ww6 } })
                                                                                                    GHC.Types.True
                                                                                                    -> \ (x :: GHC.Base.String) ->
                                                                                                       GHC.Types.:
                                                                                                         @ GHC.Types.Char
                                                                                                         GHC.Show.shows7
                                                                                                         (GHC.Base.++
                                                                                                            @ GHC.Types.Char
                                                                                                            Types.$fShowGene9
                                                                                                            (case w `cast`
                                                                                                                  (Types.N:Thres[0]) of ww2 { GHC.Types.I# ww3 ->
                                                                                                             case GHC.Show.$wshowSignedInt
                                                                                                                    11#
                                                                                                                    ww3
                                                                                                                    (GHC.Types.:
                                                                                                                       @ GHC.Types.Char
                                                                                                                       GHC.Show.shows4
                                                                                                                       x) of ww4 { (#,#) ww5 ww6 ->
                                                                                                             GHC.Types.:
                                                                                                               @ GHC.Types.Char
                                                                                                               ww5
                                                                                                               ww6 } })) }) -}
f02152849ccc1a6d1ba195f399237c56
  $w$cshowsPrec3 :: GHC.Prim.Int# -> Types.ID -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><L,U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: Types.ID) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} True True} case GHC.Prim.tagToEnum#
                                                                                                         @ GHC.Types.Bool
                                                                                                         (GHC.Prim.>=#
                                                                                                            ww
                                                                                                            11#) of wild {
                                                                                                    GHC.Types.False
                                                                                                    -> \ (x :: GHC.Base.String) ->
                                                                                                       GHC.Base.++
                                                                                                         @ GHC.Types.Char
                                                                                                         Types.$fShowGene10
                                                                                                         (case w `cast`
                                                                                                               (Types.N:ID[0]) of ww2 { GHC.Types.I# ww3 ->
                                                                                                          case GHC.Show.$wshowSignedInt
                                                                                                                 11#
                                                                                                                 ww3
                                                                                                                 x of ww4 { (#,#) ww5 ww6 ->
                                                                                                          GHC.Types.:
                                                                                                            @ GHC.Types.Char
                                                                                                            ww5
                                                                                                            ww6 } })
                                                                                                    GHC.Types.True
                                                                                                    -> \ (x :: GHC.Base.String) ->
                                                                                                       GHC.Types.:
                                                                                                         @ GHC.Types.Char
                                                                                                         GHC.Show.shows7
                                                                                                         (GHC.Base.++
                                                                                                            @ GHC.Types.Char
                                                                                                            Types.$fShowGene10
                                                                                                            (case w `cast`
                                                                                                                  (Types.N:ID[0]) of ww2 { GHC.Types.I# ww3 ->
                                                                                                             case GHC.Show.$wshowSignedInt
                                                                                                                    11#
                                                                                                                    ww3
                                                                                                                    (GHC.Types.:
                                                                                                                       @ GHC.Types.Char
                                                                                                                       GHC.Show.shows4
                                                                                                                       x) of ww4 { (#,#) ww5 ww6 ->
                                                                                                             GHC.Types.:
                                                                                                               @ GHC.Types.Char
                                                                                                               ww5
                                                                                                               ww6 } })) }) -}
7254f07bf38c4911a40d518c742287e2
  $w$cshowsPrec4 ::
    GHC.Prim.Int# -> Types.ID -> Types.Weight -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,U(U)><L,U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Types.ID)
                   (ww2 :: Types.Weight) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} True True} let {
                                                                                                    f :: GHC.Base.String
                                                                                                         -> GHC.Base.String
                                                                                                    = Types.$w$cshowsPrec3
                                                                                                        0#
                                                                                                        ww1
                                                                                                  } in
                                                                                                  let {
                                                                                                    f1 :: GHC.Base.String
                                                                                                          -> GHC.Base.String
                                                                                                    = Types.$w$cshowsPrec5
                                                                                                        0#
                                                                                                        ww2
                                                                                                  } in
                                                                                                  let {
                                                                                                    p :: GHC.Show.ShowS
                                                                                                      {- Arity: 1,
                                                                                                         Strictness: <L,1*U> -}
                                                                                                    = \ (x :: GHC.Base.String) ->
                                                                                                      GHC.Base.++
                                                                                                        @ GHC.Types.Char
                                                                                                        Types.$fShowTfbs6
                                                                                                        (GHC.Base.++
                                                                                                           @ GHC.Types.Char
                                                                                                           Types.$fShowTfbs5
                                                                                                           (f (GHC.Base.++
                                                                                                                 @ GHC.Types.Char
                                                                                                                 Types.$fShowTfbs4
                                                                                                                 (GHC.Base.++
                                                                                                                    @ GHC.Types.Char
                                                                                                                    Types.$fShowTfbs3
                                                                                                                    (f1
                                                                                                                       (GHC.Base.++
                                                                                                                          @ GHC.Types.Char
                                                                                                                          Types.$fShowTfbs2
                                                                                                                          x))))))
                                                                                                  } in
                                                                                                  case GHC.Prim.tagToEnum#
                                                                                                         @ GHC.Types.Bool
                                                                                                         (GHC.Prim.>=#
                                                                                                            ww
                                                                                                            11#) of wild {
                                                                                                    GHC.Types.False
                                                                                                    -> p
                                                                                                    GHC.Types.True
                                                                                                    -> \ (x :: GHC.Base.String) ->
                                                                                                       GHC.Types.:
                                                                                                         @ GHC.Types.Char
                                                                                                         GHC.Show.shows7
                                                                                                         (p (GHC.Types.:
                                                                                                               @ GHC.Types.Char
                                                                                                               GHC.Show.shows4
                                                                                                               x)) }) -}
8b5c4c11f095ac7a777a7b659b5fa53f
  $w$cshowsPrec5 :: GHC.Prim.Int# -> Types.Weight -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><L,U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: Types.Weight) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} True True} case GHC.Prim.tagToEnum#
                                                                                                         @ GHC.Types.Bool
                                                                                                         (GHC.Prim.>=#
                                                                                                            ww
                                                                                                            11#) of wild {
                                                                                                    GHC.Types.False
                                                                                                    -> \ (x :: GHC.Base.String) ->
                                                                                                       GHC.Base.++
                                                                                                         @ GHC.Types.Char
                                                                                                         Types.$fShowTfbs7
                                                                                                         (case w `cast`
                                                                                                               (Types.N:Weight[0]) of ww2 { GHC.Types.I# ww3 ->
                                                                                                          case GHC.Show.$wshowSignedInt
                                                                                                                 11#
                                                                                                                 ww3
                                                                                                                 x of ww4 { (#,#) ww5 ww6 ->
                                                                                                          GHC.Types.:
                                                                                                            @ GHC.Types.Char
                                                                                                            ww5
                                                                                                            ww6 } })
                                                                                                    GHC.Types.True
                                                                                                    -> \ (x :: GHC.Base.String) ->
                                                                                                       GHC.Types.:
                                                                                                         @ GHC.Types.Char
                                                                                                         GHC.Show.shows7
                                                                                                         (GHC.Base.++
                                                                                                            @ GHC.Types.Char
                                                                                                            Types.$fShowTfbs7
                                                                                                            (case w `cast`
                                                                                                                  (Types.N:Weight[0]) of ww2 { GHC.Types.I# ww3 ->
                                                                                                             case GHC.Show.$wshowSignedInt
                                                                                                                    11#
                                                                                                                    ww3
                                                                                                                    (GHC.Types.:
                                                                                                                       @ GHC.Types.Char
                                                                                                                       GHC.Show.shows4
                                                                                                                       x) of ww4 { (#,#) ww5 ww6 ->
                                                                                                             GHC.Types.:
                                                                                                               @ GHC.Types.Char
                                                                                                               ww5
                                                                                                               ww6 } })) }) -}
96dc13c40ccb216e8863ab97a7d41886
  data Agent
    = Agent {genome :: Types.Genome,
             geneStateTable :: Types.GeneStateTable}
    | NoAgent
b3a3d469ccbb699c81cb44398c9a61e6
  type Agents =
    GHC.Arr.Array (GHC.Types.Int, GHC.Types.Int) Types.Agent
06157d91ad48e8fb468961c405df7893
  type Chromosome = [Types.Locus]
86d083c95cb440c346ac68b02f16b953
  type Env = GHC.Types.Int
e61fa6692e0904f1e277a345501f370e
  data Gene
    = Gene {geneID :: Types.ID,
            thres :: Types.Thres,
            genSt :: Types.GeneState}
d668358e4ab5e6774fd62fda536c7903
  newtype GeneState = GS GHC.Types.Bool
bd67781f8dea1f2df8abe52101f5e14a
  type GeneStateTable = Data.Map.Base.Map Types.ID Types.GeneState
635c0c78b6464dfb26f8335f12eb635d
  class GeneType a where
    iD :: a -> Types.ID
    {-# MINIMAL iD #-}
4737d4eb5057987d4275b1efd57fc1ea
  type Genome = [Types.Chromosome]
f02152849ccc1a6d1ba195f399237c56
  newtype ID = ID GHC.Types.Int
00852ab6e68f9437488a4b665181bda8
  data Locus = Transposon | CGene Types.Gene | CTfbs Types.Tfbs
c364d1799620a5ba7a05a7f6bbc17a6f
  data Tfbs = Tfbs {tfbsID :: Types.ID, wt :: Types.Weight}
c477b1316e727b5e6b759a7b2233b4a2
  newtype Thres = Thres GHC.Types.Int
8b5c4c11f095ac7a777a7b659b5fa53f
  newtype Weight = Weight GHC.Types.Int
9bb6c372a29952d09ae59d711db1b0d5
  data World = World {agents :: Types.Agents, env :: Types.Env}
34556f25827dc09841286d6755a9a58a
  agents :: Types.World -> Types.Agents
  RecSel Left Types.World
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U(U,U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.World) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.agents} True True} case ds of wild { Types.World ds1 ds2 ->
                                                                                               ds1 }) -}
1a5c7eff54975831b312c30e0bb11a49
  env :: Types.World -> Types.Env
  RecSel Left Types.World
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.World) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.env} True True} case ds of wild { Types.World ds1 ds2 ->
                                                                                            ds2 }) -}
6379ca597ae0d687bd8ed0020380f727
  genSt :: Types.Gene -> Types.GeneState
  RecSel Left Types.Gene
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.Gene) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.genSt} True True} case ds of wild { Types.Gene ds1 ds2 ds3 ->
                                                                                              ds3 }) -}
5317883492c0659002ab6e3dfcba2a2e
  geneID :: Types.Gene -> Types.ID
  RecSel Left Types.Gene
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.Gene) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.geneID} True True} case ds of wild { Types.Gene ds1 ds2 ds3 ->
                                                                                               ds1 }) -}
f75e4f5c3314b05b1333663048246268
  geneStateTable :: Types.Agent -> Types.GeneStateTable
  RecSel Left Types.Agent
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.Agent) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.geneStateTable} True True} case ds of wild {
                                                                                                         Types.Agent ds1 ds2
                                                                                                         -> ds2
                                                                                                         Types.NoAgent
                                                                                                         -> Types.geneStateTable1 }) -}
34804740b11e9e8cae0cb542a638eb0b
  geneStateTable1 :: Types.GeneStateTable
  {- Strictness: x -}
c7f64df2f2e325af4eb8c6c54f1a9035
  genome :: Types.Agent -> Types.Genome
  RecSel Left Types.Agent
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.Agent) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.genome} True True} case ds of wild {
                                                                                                 Types.Agent ds1 ds2
                                                                                                 -> ds1
                                                                                                 Types.NoAgent
                                                                                                 -> Types.genome1 }) -}
c562235a638a3bd9631853e70b0832cf
  genome1 :: Types.Genome
  {- Strictness: x -}
b1be411dbe8fca44e75492dc586e5538
  parseLoc :: [GHC.Types.Char] -> Types.Locus
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (str :: [GHC.Types.Char]) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.parseLoc} True True} case {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.parseLoc.h} True True} GHC.List.head
                                                                                                                                                                                          @ GHC.Types.Char
                                                                                                                                                                                          str of wild { GHC.Types.C# x ->
                                                                                                 let {
                                                                                                   s :: [[GHC.Types.Char]]
                                                                                                   = {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.parseLoc.s} True True} {__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.splitOn} True False} ({__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.splitOn} False True} Data.List.Split.Internals.split
                                                                                                                                                                                                                                                                                                                                                                                                              @ GHC.Types.Char
                                                                                                                                                                                                                                                                                                                                                                                                              ({__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.onSublist} True False} Types.parseLoc12))
                                                                                                                                                                                                                                                                                                   str
                                                                                                 } in
                                                                                                 case x of wild1 {
                                                                                                   DEFAULT
                                                                                                   -> case GHC.Base.eqString
                                                                                                             str
                                                                                                             Types.parseLoc11 of wild2 {
                                                                                                        GHC.Types.False
                                                                                                        -> Types.CTfbs
                                                                                                             (Types.Tfbs
                                                                                                                (case Text.Read.readEither6
                                                                                                                        @ Types.ID
                                                                                                                        (Text.ParserCombinators.ReadP.run
                                                                                                                           @ Types.ID
                                                                                                                           Types.parseLoc10
                                                                                                                           (case s of wild3 {
                                                                                                                              []
                                                                                                                              -> GHC.List.badHead
                                                                                                                                   @ [GHC.Types.Char]
                                                                                                                              : x1 ds1
                                                                                                                              -> x1 })) of wild3 {
                                                                                                                   []
                                                                                                                   -> Types.parseLoc9
                                                                                                                   : x1 ds
                                                                                                                   -> case ds of wild4 {
                                                                                                                        []
                                                                                                                        -> x1
                                                                                                                        : ipv ipv1
                                                                                                                        -> Types.parseLoc8 } })
                                                                                                                (case Text.Read.readEither6
                                                                                                                        @ Types.Weight
                                                                                                                        (Text.ParserCombinators.ReadP.run
                                                                                                                           @ Types.Weight
                                                                                                                           Types.parseLoc7
                                                                                                                           (GHC.List.$w!!
                                                                                                                              @ [GHC.Types.Char]
                                                                                                                              s
                                                                                                                              1#)) of wild3 {
                                                                                                                   []
                                                                                                                   -> Types.parseLoc6
                                                                                                                   : x1 ds
                                                                                                                   -> case ds of wild4 {
                                                                                                                        []
                                                                                                                        -> x1
                                                                                                                        : ipv ipv1
                                                                                                                        -> Types.parseLoc5 } }))
                                                                                                        GHC.Types.True
                                                                                                        -> Types.Transposon }
                                                                                                   'G'#
                                                                                                   -> Types.CGene
                                                                                                        (Types.Gene
                                                                                                           (case Text.Read.readEither6
                                                                                                                   @ Types.ID
                                                                                                                   (Text.ParserCombinators.ReadP.run
                                                                                                                      @ Types.ID
                                                                                                                      Types.parseLoc10
                                                                                                                      (case s of wild2 {
                                                                                                                         []
                                                                                                                         -> case GHC.List.badHead
                                                                                                                            ret_ty GHC.Base.String
                                                                                                                            of {}
                                                                                                                         : x1 ds1
                                                                                                                         -> case x1 of wild3 {
                                                                                                                              []
                                                                                                                              -> GHC.List.scanl2
                                                                                                                                   @ GHC.Types.Char
                                                                                                                              : ds2 xs
                                                                                                                              -> xs } })) of wild2 {
                                                                                                              []
                                                                                                              -> Types.parseLoc9
                                                                                                              : x1 ds
                                                                                                              -> case ds of wild3 {
                                                                                                                   []
                                                                                                                   -> x1
                                                                                                                   : ipv ipv1
                                                                                                                   -> Types.parseLoc8 } })
                                                                                                           (case Text.Read.readEither6
                                                                                                                   @ Types.Thres
                                                                                                                   (Text.ParserCombinators.ReadP.run
                                                                                                                      @ Types.Thres
                                                                                                                      Types.parseLoc4
                                                                                                                      (GHC.List.$w!!
                                                                                                                         @ [GHC.Types.Char]
                                                                                                                         s
                                                                                                                         1#)) of wild2 {
                                                                                                              []
                                                                                                              -> Types.parseLoc3
                                                                                                              : x1 ds
                                                                                                              -> case ds of wild3 {
                                                                                                                   []
                                                                                                                   -> x1
                                                                                                                   : ipv ipv1
                                                                                                                   -> Types.parseLoc2 } })
                                                                                                           Types.parseLoc1
                                                                                                             `cast`
                                                                                                           (Sym (Types.N:GeneState[0]))) } }) -}
c90cf0fb8281f5bb2240c70a092122e1
  parseLoc1 :: GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.parseLoc} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.fromInteger} True False} GHC.Types.False) -}
3e805d06367eb4ee80e392b3a7867fb1
  parseLoc10 :: Text.ParserCombinators.ReadP.P Types.ID
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.parseLoc} False True} (Types.$fReadID2
                                                                                                     Text.ParserCombinators.ReadPrec.minPrec)
                                                                                                    `cast`
                                                                                                  (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                       <Types.ID>_R)
                                                                                                    @ Types.ID
                                                                                                    (Text.Read.readEither5
                                                                                                       @ Types.ID)) -}
9a415e95c79e1f8653b7e049c1500eb6
  parseLoc11 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.parseLoc} False True} GHC.CString.unpackCString#
                                                                                                    "T"#) -}
d0bb4fd102e059b3655a893f068c4152
  parseLoc12 :: Data.List.Split.Internals.Splitter GHC.Types.Char
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.parseLoc} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.parseLoc.s} False True} {__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.splitOn} False True} case Data.List.Split.Internals.defaultSplitter
                                                                                                                                                                                                                                                                                                      @ GHC.Prim.Any of wild { Data.List.Split.Internals.Splitter ds ds1 ds2 ds3 ds4 ->
                                                                                                                                                                                                                                                                                               {__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.dropDelims} True False} Data.List.Split.Internals.Splitter
                                                                                                                                                                                                                                                                                                                                                                                                              @ GHC.Types.Char
                                                                                                                                                                                                                                                                                                                                                                                                              Types.parseLoc13
                                                                                                                                                                                                                                                                                                                                                                                                                `cast`
                                                                                                                                                                                                                                                                                                                                                                                                              (Sym (Data.List.Split.Internals.N:Delimiter[0]
                                                                                                                                                                                                                                                                                                                                                                                                                        <GHC.Types.Char>_R))
                                                                                                                                                                                                                                                                                                                                                                                                              Data.List.Split.Internals.Drop
                                                                                                                                                                                                                                                                                                                                                                                                              ds2
                                                                                                                                                                                                                                                                                                                                                                                                              ds3
                                                                                                                                                                                                                                                                                                                                                                                                              ds4 }) -}
5a7304cc304f9a3163c3a7b8b9dd857b
  parseLoc13 :: [GHC.Types.Char -> GHC.Types.Bool]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.parseLoc} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.parseLoc.s} False True} {__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.splitOn} False True} {__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.onSublist} False True} GHC.Base.map
                                                                                                                                                                                                                                                                                                                                                                                                             @ GHC.Types.Char
                                                                                                                                                                                                                                                                                                                                                                                                             @ (GHC.Types.Char
                                                                                                                                                                                                                                                                                                                                                                                                                -> GHC.Types.Bool)
                                                                                                                                                                                                                                                                                                                                                                                                             Types.parseLoc_lvl3
                                                                                                                                                                                                                                                                                                                                                                                                             Types.parseLoc14) -}
b8a0437fba9d7a9a345ce56954f6e9d7
  parseLoc14 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.parseLoc} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.parseLoc.s} False True} GHC.CString.unpackCString#
                                                                                                                                                                                       ":"#) -}
75f97b5d8e0828ff4de607d26f6c4c5f
  parseLoc2 :: Types.Thres
  {- Strictness: x -}
eb419bb77d78d1cf392ce7aa41056493
  parseLoc3 :: Types.Thres
  {- Strictness: x -}
9b7e51cf0fe14ce7c190c33cb430477e
  parseLoc4 :: Text.ParserCombinators.ReadP.P Types.Thres
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.parseLoc} False True} (Types.$fReadThres2
                                                                                                     Text.ParserCombinators.ReadPrec.minPrec)
                                                                                                    `cast`
                                                                                                  (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                       <Types.Thres>_R)
                                                                                                    @ Types.Thres
                                                                                                    (Text.Read.readEither5
                                                                                                       @ Types.Thres)) -}
b9ce5e2e53c0c850419e09a0875d7f69
  parseLoc5 :: Types.Weight
  {- Strictness: x -}
3267fc49392e039091f7685d92c7c326
  parseLoc6 :: Types.Weight
  {- Strictness: x -}
12a2abb5f63bf2698ae06ec969f551f6
  parseLoc7 :: Text.ParserCombinators.ReadP.P Types.Weight
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.parseLoc} False True} (Types.$fReadWeight2
                                                                                                     Text.ParserCombinators.ReadPrec.minPrec)
                                                                                                    `cast`
                                                                                                  (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                       <Types.Weight>_R)
                                                                                                    @ Types.Weight
                                                                                                    (Text.Read.readEither5
                                                                                                       @ Types.Weight)) -}
bd938c07cc136be5e8b093d29b0ece04
  parseLoc8 :: Types.ID
  {- Strictness: x -}
4ec1893dcec3a96583d63f1a8e7ff9f3
  parseLoc9 :: Types.ID
  {- Strictness: x -}
67a1fc0d4facc9e573257595c7b356a0
  parseLoc_lvl3 :: GHC.Types.Char -> GHC.Types.Char -> GHC.Types.Bool
  {- Unfolding: ({__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.splitOn} False True} {__scc {split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals.onSublist} False True} GHC.Classes.eqChar) -}
b1c1c4e9f2ad41a37567b52cef662e91
  showGST :: Types.GeneStateTable -> GHC.Base.String
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showGST} True False} \ (x :: Data.Map.Base.Map
                                                                                                           Types.ID
                                                                                                           Types.GeneState) ->
                                                                                                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showGST} False True} let {
                                                                                                                                                                                   ds1 :: [GHC.Types.Char]
                                                                                                                                                                                   = {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showGST} False True} ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showGST} False True} Types.$sconcatMap
                                                                                                                                                                                                                                                                                                                                                        @ (Types.ID,
                                                                                                                                                                                                                                                                                                                                                           Types.GeneState)
                                                                                                                                                                                                                                                                                                                                                        @ GHC.Types.Char
                                                                                                                                                                                                                                                                                                                                                        Types.showGST2)
                                                                                                                                                                                                                                                                       (Data.Map.Base.toAscList
                                                                                                                                                                                                                                                                          @ Types.ID
                                                                                                                                                                                                                                                                          @ Types.GeneState
                                                                                                                                                                                                                                                                          x)
                                                                                                                                                                                 } in
                                                                                                                                                                                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showGST} False True} case ds1 of wild {
                                                                                                                                                                                                                                                                   []
                                                                                                                                                                                                                                                                   -> GHC.Types.[]
                                                                                                                                                                                                                                                                        @ GHC.Types.Char
                                                                                                                                                                                                                                                                   : x1 xs
                                                                                                                                                                                                                                                                   -> GHC.Types.:
                                                                                                                                                                                                                                                                        @ GHC.Types.Char
                                                                                                                                                                                                                                                                        x1
                                                                                                                                                                                                                                                                        (Data.OldList.prependToAll
                                                                                                                                                                                                                                                                           @ GHC.Types.Char
                                                                                                                                                                                                                                                                           Types.showGST1
                                                                                                                                                                                                                                                                           xs) }) -}
44fdb285f8718b2def2d595e3d697ea4
  showGST1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ' '#) -}
e4cd5dafa4b680cabaab95e4e557572a
  showGST2 :: (Types.ID, Types.GeneState) -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(A,1*U)>,
     Unfolding: (\ (x :: (Types.ID, Types.GeneState)) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showGST} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} True False} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} False True} GHC.Base.++
                                                                                                                                                                                                                                                                       @ GHC.Types.Char
                                                                                                                                                                                                                                                                       Types.$fShowGene8
                                                                                                                                                                                                                                                                       (case x of wild { (,) ds1 y ->
                                                                                                                                                                                                                                                                        case y `cast`
                                                                                                                                                                                                                                                                             (Types.N:GeneState[0]) of wild1 {
                                                                                                                                                                                                                                                                          GHC.Types.False
                                                                                                                                                                                                                                                                          -> Types.showGST4
                                                                                                                                                                                                                                                                          GHC.Types.True
                                                                                                                                                                                                                                                                          -> Types.showGST3 } })) -}
a57c1eb7a5c67d573e70cceaf5d6e284
  showGST3 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showGST} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} False True} GHC.Base.++
                                                                                                                                                                                     @ GHC.Types.Char
                                                                                                                                                                                     GHC.Show.shows17
                                                                                                                                                                                     (GHC.Types.[]
                                                                                                                                                                                        @ GHC.Types.Char)) -}
a683220e627d5ca70fa0a86ffc2829d3
  showGST4 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showGST} False True} {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.showsPrec} False True} GHC.Base.++
                                                                                                                                                                                     @ GHC.Types.Char
                                                                                                                                                                                     GHC.Show.shows18
                                                                                                                                                                                     (GHC.Types.[]
                                                                                                                                                                                        @ GHC.Types.Char)) -}
d4b796a44bc0625aaa39ab9926b84fb5
  tfbsID :: Types.Tfbs -> Types.ID
  RecSel Left Types.Tfbs
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.Tfbs) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.tfbsID} True True} case ds of wild { Types.Tfbs ds1 ds2 ->
                                                                                               ds1 }) -}
19303675d745ff6da8a1e382ce322160
  thres :: Types.Gene -> Types.Thres
  RecSel Left Types.Gene
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.Gene) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.thres} True True} case ds of wild { Types.Gene ds1 ds2 ds3 ->
                                                                                              ds2 }) -}
d399c49ab34a2f681a72e3e1d4d67b89
  wt :: Types.Tfbs -> Types.Weight
  RecSel Left Types.Tfbs
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.Tfbs) ->
                 {__scc {Evolverbetert-0.1.0.0-JiawwqdleTNHNC9Qg9fPkT:Types.wt} True True} case ds of wild { Types.Tfbs ds1 ds2 ->
                                                                                           ds2 }) -}
instance GHC.Enum.Bounded [Types.GeneState]
  = Types.$fBoundedGeneState
instance GHC.Enum.Bounded [Types.Thres] = Types.$fBoundedThres
instance GHC.Enum.Bounded [Types.Weight] = Types.$fBoundedWeight
instance GHC.Enum.Enum [Types.GeneState] = Types.$fEnumGeneState
instance GHC.Enum.Enum [Types.ID] = Types.$fEnumID
instance GHC.Enum.Enum [Types.Thres] = Types.$fEnumThres
instance GHC.Enum.Enum [Types.Weight] = Types.$fEnumWeight
instance GHC.Classes.Eq [Types.Agent] = Types.$fEqAgent
instance GHC.Classes.Eq [Types.Gene] = Types.$fEqGene
instance GHC.Classes.Eq [Types.GeneState] = Types.$fEqGeneState
instance GHC.Classes.Eq [Types.ID] = Types.$fEqID
instance GHC.Classes.Eq [Types.Locus] = Types.$fEqLocus
instance GHC.Classes.Eq [Types.Tfbs] = Types.$fEqTfbs
instance GHC.Classes.Eq [Types.Thres] = Types.$fEqThres
instance GHC.Classes.Eq [Types.Weight] = Types.$fEqWeight
instance Types.GeneType [Types.Gene] = Types.$fGeneTypeGene
instance Types.GeneType [Types.Tfbs] = Types.$fGeneTypeTfbs
instance GHC.Real.Integral [Types.ID] = Types.$fIntegralID
instance GHC.Real.Integral [Types.Thres] = Types.$fIntegralThres
instance GHC.Real.Integral [Types.Weight] = Types.$fIntegralWeight
instance GHC.Num.Num [Types.GeneState] = Types.$fNumGeneState
instance GHC.Num.Num [Types.ID] = Types.$fNumID
instance GHC.Num.Num [Types.Thres] = Types.$fNumThres
instance GHC.Num.Num [Types.Weight] = Types.$fNumWeight
instance GHC.Classes.Ord [Types.Agent] = Types.$fOrdAgent
instance GHC.Classes.Ord [Types.Gene] = Types.$fOrdGene
instance GHC.Classes.Ord [Types.GeneState] = Types.$fOrdGeneState
instance GHC.Classes.Ord [Types.ID] = Types.$fOrdID
instance GHC.Classes.Ord [Types.Locus] = Types.$fOrdLocus
instance GHC.Classes.Ord [Types.Tfbs] = Types.$fOrdTfbs
instance GHC.Classes.Ord [Types.Thres] = Types.$fOrdThres
instance GHC.Classes.Ord [Types.Weight] = Types.$fOrdWeight
instance GHC.Read.Read [Types.Agent] = Types.$fReadAgent
instance GHC.Read.Read [Types.Gene] = Types.$fReadGene
instance GHC.Read.Read [Types.GeneState] = Types.$fReadGeneState
instance GHC.Read.Read [Types.ID] = Types.$fReadID
instance GHC.Read.Read [Types.Locus] = Types.$fReadLocus
instance GHC.Read.Read [Types.Tfbs] = Types.$fReadTfbs
instance GHC.Read.Read [Types.Thres] = Types.$fReadThres
instance GHC.Read.Read [Types.Weight] = Types.$fReadWeight
instance GHC.Real.Real [Types.GeneState] = Types.$fRealGeneState
instance GHC.Real.Real [Types.ID] = Types.$fRealID
instance GHC.Real.Real [Types.Thres] = Types.$fRealThres
instance GHC.Real.Real [Types.Weight] = Types.$fRealWeight
instance GHC.Show.Show [Types.Agent] = Types.$fShowAgent
instance GHC.Show.Show [Types.Gene] = Types.$fShowGene
instance GHC.Show.Show [Types.GeneState] = Types.$fShowGeneState
instance GHC.Show.Show [Types.ID] = Types.$fShowID
instance GHC.Show.Show [Types.Locus] = Types.$fShowLocus
instance GHC.Show.Show [Types.Tfbs] = Types.$fShowTfbs
instance GHC.Show.Show [Types.Thres] = Types.$fShowThres
instance GHC.Show.Show [Types.Weight] = Types.$fShowWeight
"SPEC/Types $fEq[] @ Locus" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                       Types.Locus)
  GHC.Classes.$fEq[] @ Types.Locus $dEq = Types.$fEqAgent_$s$fEq[]
"SPEC/Types $fEq[]_$c/= @ Locus" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                            Types.Locus)
  GHC.Classes.$fEq[]_$c/= @ Types.Locus $dEq
  = Types.$fEqAgent_$s$fEq[]_$c/=
"SPEC/Types $fOrd[] @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                         Types.Locus)
  GHC.Classes.$fOrd[] @ Types.Locus $dOrd
  = Types.$fOrdAgent_$s$fOrd[]
"SPEC/Types $fOrd[]_$c< @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                             Types.Locus)
  GHC.Classes.$fOrd[]_$c< @ Types.Locus $dOrd
  = Types.$fOrdAgent_$s$fOrd[]_$c<
"SPEC/Types $fOrd[]_$c<= @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                              Types.Locus)
  GHC.Classes.$fOrd[]_$c<= @ Types.Locus $dOrd
  = Types.$fOrdAgent_$s$fOrd[]_$c<=
"SPEC/Types $fOrd[]_$c> @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                             Types.Locus)
  GHC.Classes.$fOrd[]_$c> @ Types.Locus $dOrd
  = Types.$fOrdAgent_$s$fOrd[]_$c>
"SPEC/Types $fOrd[]_$c>= @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                              Types.Locus)
  GHC.Classes.$fOrd[]_$c>= @ Types.Locus $dOrd
  = Types.$fOrdAgent_$s$fOrd[]_$c>=
"SPEC/Types $fOrd[]_$cmax @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                               Types.Locus)
  GHC.Classes.$fOrd[]_$cmax @ Types.Locus $dOrd
  = Types.$fOrdAgent_$s$fOrd[]_$cmax
"SPEC/Types $fOrd[]_$cmin @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                               Types.Locus)
  GHC.Classes.$fOrd[]_$cmin @ Types.Locus $dOrd
  = Types.$fOrdAgent_$s$fOrd[]_$cmin
"SPEC/Types $fOrd[]_$cp1Ord @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                 Types.Locus)
  GHC.Classes.$fOrd[]_$cp1Ord @ Types.Locus $dOrd
  = Types.$fOrdAgent_$s$fOrd[]_$cp1Ord
"SPEC/Types concatMap @ [] _ _" [ALWAYS] forall @ a
                                                @ b
                                                ($dFoldable :: Data.Foldable.Foldable [])
  Data.Foldable.concatMap @ [] @ a @ b $dFoldable
  = Types.$sconcatMap @ a @ b
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

