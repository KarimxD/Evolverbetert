
==================== FINAL INTERFACE ====================
2017-05-02 07:04:55.499845 UTC

interface Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types [hpc] 8002
  interface hash: a27895ba84c7db7297c7ff67298d0013
  ABI hash: 32978543d3e5942c0fca1d899b402377
  export-list hash: f2d3892cae9faa75e4d9e5ce4ff3401f
  orphan hash: 6a6ef5672f19778555466496a27eccb5
  flag hash: 5ecbc7edbeefed5afd57cc93de5d9db9
  sig of: Nothing
  used TH splices: False
  where
exports:
  Types.Agent{Types.Agent Types.NoAgent geneStateTable genome}
  Types.Agents
  Types.Chromosome
  Types.Env
  Types.Gene{Types.Gene genSt geneID thres}
  Types.GeneState{Types.GS}
  Types.GeneStateTable
  Types.GeneType{Types.iD}
  Types.Genome
  Types.ID{Types.ID}
  Types.Locus{Types.CGene Types.CTfbs Types.Transposon}
  Types.Tfbs{Types.Tfbs tfbsID wt}
  Types.Thres{Types.Thres}
  Types.Weight{Types.Weight}
  Types.World{Types.World agents env}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  array-0.5.1.1@array-0.5.1.1:Data.Array.IArray 606f8bb830eb2a88c29c91f27c77f304
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:GHC.Arr dbae05e7a9c0aba55cc706ecf0406507
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Enum 3811281f7b5f26da514529cf3ed44009
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Read b6821365d2d5fa2155c9e910160e7f57
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Text.ParserCombinators.ReadPrec 5a182a8d6deb0f7d67aed5fab08a5cc0
import  -/  base-4.9.1.0:Text.Read.Lex 16199fac3c6c2d64cc7c268f3c0d2269
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base a29df8c78ba14cbcd4d90f97bd8d22e9
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Strict f8f0196205d496398718e13b2f098e5d
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 318df275d77dcdb18e0006d8d7870c2a
af1dcb53c958f9cc4cee41e0cdd40f73
  $fBoundedGeneState :: GHC.Enum.Bounded Types.GeneState
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.GeneState
                  Types.$fBoundedGeneState_$cminBound
                  Types.$fBoundedGeneState_$cmaxBound -}
2bb5f393a34c4233725928579ec9b716
  $fBoundedGeneState1 :: GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.maxBound} True False} GHC.Types.True) -}
b0e6429f8c625b76764fd5e2a2db9495
  $fBoundedGeneState2 :: GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.minBound} True False} GHC.Types.False) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fBoundedGeneState_$cmaxBound :: Types.GeneState
  {- Unfolding: InlineRule (0, True, True)
                Types.$fBoundedGeneState1 `cast` (Sym (Types.N:GeneState[0])) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fBoundedGeneState_$cminBound :: Types.GeneState
  {- Unfolding: InlineRule (0, True, True)
                Types.$fBoundedGeneState2 `cast` (Sym (Types.N:GeneState[0])) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fBoundedID :: GHC.Enum.Bounded Types.ID
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.ID
                  Types.$fBoundedID_$cminBound
                  Types.$fBoundedID_$cmaxBound -}
2f9062b3a4f3366de41299a20efde5f1
  $fBoundedID1 :: GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.maxBound} True False} GHC.Base.maxInt) -}
f5bbd7357719fe421a5038e4d2f89fa2
  $fBoundedID2 :: GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.minBound} True False} GHC.Base.minInt) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fBoundedID_$cmaxBound :: Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fBoundedID1 `cast` (Sym (Types.N:ID[0])) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fBoundedID_$cminBound :: Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fBoundedID2 `cast` (Sym (Types.N:ID[0])) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fBoundedThres :: GHC.Enum.Bounded Types.Thres
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Thres
                  Types.$fBoundedThres_$cminBound
                  Types.$fBoundedThres_$cmaxBound -}
44c05659b988da5d76679b8daf2aefe2
  $fBoundedThres1 :: GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.maxBound} True False} GHC.Base.maxInt) -}
51f35ad962ad9ee983eed0259202ad99
  $fBoundedThres2 :: GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.minBound} True False} GHC.Base.minInt) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fBoundedThres_$cmaxBound :: Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fBoundedThres1 `cast` (Sym (Types.N:Thres[0])) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fBoundedThres_$cminBound :: Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fBoundedThres2 `cast` (Sym (Types.N:Thres[0])) -}
62e198601be4cac9703a7878d90fa463
  $fBoundedWeight :: GHC.Enum.Bounded Types.Weight
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Weight
                  Types.$fBoundedWeight_$cminBound
                  Types.$fBoundedWeight_$cmaxBound -}
cf86f8eceea56d65cc9688f00f84f22b
  $fBoundedWeight1 :: GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.maxBound} True False} GHC.Base.maxInt) -}
491cc57c93731ca11ae9f6884badee23
  $fBoundedWeight2 :: GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.minBound} True False} GHC.Base.minInt) -}
62e198601be4cac9703a7878d90fa463
  $fBoundedWeight_$cmaxBound :: Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fBoundedWeight1 `cast` (Sym (Types.N:Weight[0])) -}
62e198601be4cac9703a7878d90fa463
  $fBoundedWeight_$cminBound :: Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fBoundedWeight2 `cast` (Sym (Types.N:Weight[0])) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fEnumGeneState :: GHC.Enum.Enum Types.GeneState
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.GeneState
                  Types.$fEnumGeneState_$csucc
                  Types.$fEnumGeneState_$cpred
                  Types.$fEnumGeneState_$ctoEnum
                  Types.$fEnumGeneState_$cfromEnum
                  Types.$fEnumGeneState_$cenumFrom
                  Types.$fEnumGeneState_$cenumFromThen
                  Types.$fEnumGeneState_$cenumFromTo
                  Types.$fEnumGeneState_$cenumFromThenTo -}
7396c25a18e4c681edfef47bb483f2d7
  $fEnumGeneState1 ::
    GHC.Types.Bool
    -> GHC.Types.Bool -> GHC.Types.Bool -> [GHC.Types.Bool]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.enumFromThenTo} True True} GHC.Enum.$fEnumBool_$cenumFromThenTo) -}
f8ee74e9a712ff4c286cac22645839af
  $fEnumGeneState2 ::
    GHC.Types.Bool -> GHC.Types.Bool -> [GHC.Types.Bool]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.enumFromTo} True True} GHC.Enum.$fEnumBool_$cenumFromTo) -}
62ada232c0c34caa0871374712ec8a79
  $fEnumGeneState3 ::
    GHC.Types.Bool -> GHC.Types.Bool -> [GHC.Types.Bool]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.enumFromThen} True True} GHC.Enum.$fEnumBool_$sboundedEnumFromThen) -}
195dcbe98deab318d0f07aec882d1728
  $fEnumGeneState4 :: GHC.Types.Bool -> [GHC.Types.Bool]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.enumFrom} True True} GHC.Enum.$fEnumBool_$cenumFrom) -}
a45030fb0519b48fb552bb0c13d4a78f
  $fEnumGeneState5 :: GHC.Types.Bool -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.fromEnum} True True} GHC.Enum.$fEnumBool_$cfromEnum) -}
1f7f00e9a2c82ec9b44601297819a270
  $fEnumGeneState6 :: GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.toEnum} True True} GHC.Enum.$fEnumBool_$ctoEnum) -}
4f936db21e323251f39c25cea7387693
  $fEnumGeneState7 :: GHC.Types.Bool -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.pred} True True} GHC.Enum.$fEnumBool_$cpred) -}
ad31742e9716d8eede0c1dfd60eea1cf
  $fEnumGeneState8 :: GHC.Types.Bool -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.succ} True True} GHC.Enum.$fEnumBool_$csucc) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fEnumGeneState_$cenumFrom :: Types.GeneState -> [Types.GeneState]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumGeneState4
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R ([Sym (Types.N:GeneState[0])])_R) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fEnumGeneState_$cenumFromThen ::
    Types.GeneState -> Types.GeneState -> [Types.GeneState]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumGeneState3
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R ([Sym (Types.N:GeneState[0])])_R) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fEnumGeneState_$cenumFromThenTo ::
    Types.GeneState
    -> Types.GeneState -> Types.GeneState -> [Types.GeneState]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumGeneState1
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R ([Sym (Types.N:GeneState[0])])_R) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fEnumGeneState_$cenumFromTo ::
    Types.GeneState -> Types.GeneState -> [Types.GeneState]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumGeneState2
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R ([Sym (Types.N:GeneState[0])])_R) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fEnumGeneState_$cfromEnum :: Types.GeneState -> GHC.Types.Int
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumGeneState5
                  `cast`
                (Sym (Types.N:GeneState[0]) ->_R <GHC.Types.Int>_R) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fEnumGeneState_$cpred :: Types.GeneState -> Types.GeneState
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumGeneState7
                  `cast`
                (Sym (Types.N:GeneState[0]) ->_R Sym (Types.N:GeneState[0])) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fEnumGeneState_$csucc :: Types.GeneState -> Types.GeneState
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumGeneState8
                  `cast`
                (Sym (Types.N:GeneState[0]) ->_R Sym (Types.N:GeneState[0])) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fEnumGeneState_$ctoEnum :: GHC.Types.Int -> Types.GeneState
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumGeneState6
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Types.N:GeneState[0])) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fEnumID :: GHC.Enum.Enum Types.ID
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.ID
                  Types.$fEnumID_$csucc
                  Types.$fEnumID_$cpred
                  Types.$fEnumID_$ctoEnum
                  Types.$fEnumID_$cfromEnum
                  Types.$fEnumID_$cenumFrom
                  Types.$fEnumID_$cenumFromThen
                  Types.$fEnumID_$cenumFromTo
                  Types.$fEnumID_$cenumFromThenTo -}
bcfa7a6dd61aadc67afbafa3ee5ca6d2
  $fEnumID1 ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Int]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.enumFromThenTo} True True} GHC.Enum.$fEnumInt_$cenumFromThenTo) -}
e7aec8bd2952e25c9a6c5ec38f6b6a9d
  $fEnumID2 :: GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Int]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.enumFromTo} True True} GHC.Enum.$fEnumInt_$cenumFromTo) -}
1d67f948caafa2a467edb9b9af921f14
  $fEnumID3 :: GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Int]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.enumFromThen} True True} GHC.Enum.$fEnumInt_$cenumFromThen) -}
3194c2bc15185be92ab5874c67bc335c
  $fEnumID4 :: GHC.Types.Int -> [GHC.Types.Int]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.enumFrom} True True} GHC.Enum.$fEnumInt_$cenumFrom) -}
8e64c8f0fe4ff33789bb8160e9b2204b
  $fEnumID5 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.fromEnum} True True} GHC.Enum.$fEnumInt_$cfromEnum) -}
78b643be5949ab96561eab8acbc8acf4
  $fEnumID6 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.toEnum} True True} GHC.Enum.$fEnumInt_$cfromEnum) -}
95bbf713afc807e3f3106e0bd0e9436b
  $fEnumID7 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.pred} True True} GHC.Enum.$fEnumInt_$cpred) -}
2a0dc9ec65d6b2778236118f898365eb
  $fEnumID8 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.succ} True True} GHC.Enum.$fEnumInt_$csucc) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fEnumID_$cenumFrom :: Types.ID -> [Types.ID]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumID4
                  `cast`
                (Sym (Types.N:ID[0]) ->_R ([Sym (Types.N:ID[0])])_R) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fEnumID_$cenumFromThen :: Types.ID -> Types.ID -> [Types.ID]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumID3
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R ([Sym (Types.N:ID[0])])_R) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fEnumID_$cenumFromThenTo ::
    Types.ID -> Types.ID -> Types.ID -> [Types.ID]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumID1
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R ([Sym (Types.N:ID[0])])_R) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fEnumID_$cenumFromTo :: Types.ID -> Types.ID -> [Types.ID]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumID2
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R ([Sym (Types.N:ID[0])])_R) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fEnumID_$cfromEnum :: Types.ID -> GHC.Types.Int
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumID5
                  `cast`
                (Sym (Types.N:ID[0]) ->_R <GHC.Types.Int>_R) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fEnumID_$cpred :: Types.ID -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumID7
                  `cast`
                (Sym (Types.N:ID[0]) ->_R Sym (Types.N:ID[0])) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fEnumID_$csucc :: Types.ID -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumID8
                  `cast`
                (Sym (Types.N:ID[0]) ->_R Sym (Types.N:ID[0])) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fEnumID_$ctoEnum :: GHC.Types.Int -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumID6
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Types.N:ID[0])) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fEnumThres :: GHC.Enum.Enum Types.Thres
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Thres
                  Types.$fEnumThres_$csucc
                  Types.$fEnumThres_$cpred
                  Types.$fEnumThres_$ctoEnum
                  Types.$fEnumThres_$cfromEnum
                  Types.$fEnumThres_$cenumFrom
                  Types.$fEnumThres_$cenumFromThen
                  Types.$fEnumThres_$cenumFromTo
                  Types.$fEnumThres_$cenumFromThenTo -}
6a5285bd99530063604701b6c7492e4d
  $fEnumThres1 ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Int]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.enumFromThenTo} True True} GHC.Enum.$fEnumInt_$cenumFromThenTo) -}
5920a2e5820cac33b2b9cc4ed66a1a26
  $fEnumThres2 :: GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Int]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.enumFromTo} True True} GHC.Enum.$fEnumInt_$cenumFromTo) -}
dce0bf62c68384051aa5ea7205f0ca82
  $fEnumThres3 :: GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Int]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.enumFromThen} True True} GHC.Enum.$fEnumInt_$cenumFromThen) -}
ffd2c0fddb54ab491a79c8adfd1f8a03
  $fEnumThres4 :: GHC.Types.Int -> [GHC.Types.Int]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.enumFrom} True True} GHC.Enum.$fEnumInt_$cenumFrom) -}
c3a06172b022360760ae6f9b7b3f13a9
  $fEnumThres5 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.fromEnum} True True} GHC.Enum.$fEnumInt_$cfromEnum) -}
7e54daac39bedb6bf3841d006d56bc21
  $fEnumThres6 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.toEnum} True True} GHC.Enum.$fEnumInt_$cfromEnum) -}
8b2748be7daafdf8dbcf1fd6b91b7d82
  $fEnumThres7 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.pred} True True} GHC.Enum.$fEnumInt_$cpred) -}
149778145c83d55b4d40450c8cde5422
  $fEnumThres8 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.succ} True True} GHC.Enum.$fEnumInt_$csucc) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fEnumThres_$cenumFrom :: Types.Thres -> [Types.Thres]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumThres4
                  `cast`
                (Sym (Types.N:Thres[0]) ->_R ([Sym (Types.N:Thres[0])])_R) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fEnumThres_$cenumFromThen ::
    Types.Thres -> Types.Thres -> [Types.Thres]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumThres3
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R ([Sym (Types.N:Thres[0])])_R) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fEnumThres_$cenumFromThenTo ::
    Types.Thres -> Types.Thres -> Types.Thres -> [Types.Thres]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumThres1
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R ([Sym (Types.N:Thres[0])])_R) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fEnumThres_$cenumFromTo ::
    Types.Thres -> Types.Thres -> [Types.Thres]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumThres2
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R ([Sym (Types.N:Thres[0])])_R) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fEnumThres_$cfromEnum :: Types.Thres -> GHC.Types.Int
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumThres5
                  `cast`
                (Sym (Types.N:Thres[0]) ->_R <GHC.Types.Int>_R) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fEnumThres_$cpred :: Types.Thres -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumThres7
                  `cast`
                (Sym (Types.N:Thres[0]) ->_R Sym (Types.N:Thres[0])) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fEnumThres_$csucc :: Types.Thres -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumThres8
                  `cast`
                (Sym (Types.N:Thres[0]) ->_R Sym (Types.N:Thres[0])) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fEnumThres_$ctoEnum :: GHC.Types.Int -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumThres6
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Types.N:Thres[0])) -}
62e198601be4cac9703a7878d90fa463
  $fEnumWeight :: GHC.Enum.Enum Types.Weight
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Weight
                  Types.$fEnumWeight_$csucc
                  Types.$fEnumWeight_$cpred
                  Types.$fEnumWeight_$ctoEnum
                  Types.$fEnumWeight_$cfromEnum
                  Types.$fEnumWeight_$cenumFrom
                  Types.$fEnumWeight_$cenumFromThen
                  Types.$fEnumWeight_$cenumFromTo
                  Types.$fEnumWeight_$cenumFromThenTo -}
ba368a34d1703a0bf9fdf5bf457c2ec5
  $fEnumWeight1 ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Int]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.enumFromThenTo} True True} GHC.Enum.$fEnumInt_$cenumFromThenTo) -}
881ab996ed1d179e1d99fe87eeb9aea7
  $fEnumWeight2 :: GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Int]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.enumFromTo} True True} GHC.Enum.$fEnumInt_$cenumFromTo) -}
187c190c80b0349347356e3c4a55984c
  $fEnumWeight3 :: GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Int]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.enumFromThen} True True} GHC.Enum.$fEnumInt_$cenumFromThen) -}
ef8324170be6f8f87569506cda79253b
  $fEnumWeight4 :: GHC.Types.Int -> [GHC.Types.Int]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.enumFrom} True True} GHC.Enum.$fEnumInt_$cenumFrom) -}
9ec4ee4329b62aa01d251cd565a58495
  $fEnumWeight5 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.fromEnum} True True} GHC.Enum.$fEnumInt_$cfromEnum) -}
874276898497da0f3a0afdae8a4fd3c9
  $fEnumWeight6 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.toEnum} True True} GHC.Enum.$fEnumInt_$cfromEnum) -}
3d5193040ae74e3a4f51ae97a50bf4d9
  $fEnumWeight7 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.pred} True True} GHC.Enum.$fEnumInt_$cpred) -}
9d726e170909ec72003d92fe0e004fa9
  $fEnumWeight8 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.succ} True True} GHC.Enum.$fEnumInt_$csucc) -}
62e198601be4cac9703a7878d90fa463
  $fEnumWeight_$cenumFrom :: Types.Weight -> [Types.Weight]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumWeight4
                  `cast`
                (Sym (Types.N:Weight[0]) ->_R ([Sym (Types.N:Weight[0])])_R) -}
62e198601be4cac9703a7878d90fa463
  $fEnumWeight_$cenumFromThen ::
    Types.Weight -> Types.Weight -> [Types.Weight]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumWeight3
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R ([Sym (Types.N:Weight[0])])_R) -}
62e198601be4cac9703a7878d90fa463
  $fEnumWeight_$cenumFromThenTo ::
    Types.Weight -> Types.Weight -> Types.Weight -> [Types.Weight]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumWeight1
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R ([Sym (Types.N:Weight[0])])_R) -}
62e198601be4cac9703a7878d90fa463
  $fEnumWeight_$cenumFromTo ::
    Types.Weight -> Types.Weight -> [Types.Weight]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumWeight2
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R ([Sym (Types.N:Weight[0])])_R) -}
62e198601be4cac9703a7878d90fa463
  $fEnumWeight_$cfromEnum :: Types.Weight -> GHC.Types.Int
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumWeight5
                  `cast`
                (Sym (Types.N:Weight[0]) ->_R <GHC.Types.Int>_R) -}
62e198601be4cac9703a7878d90fa463
  $fEnumWeight_$cpred :: Types.Weight -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumWeight7
                  `cast`
                (Sym (Types.N:Weight[0]) ->_R Sym (Types.N:Weight[0])) -}
62e198601be4cac9703a7878d90fa463
  $fEnumWeight_$csucc :: Types.Weight -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumWeight8
                  `cast`
                (Sym (Types.N:Weight[0]) ->_R Sym (Types.N:Weight[0])) -}
62e198601be4cac9703a7878d90fa463
  $fEnumWeight_$ctoEnum :: GHC.Types.Int -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEnumWeight6
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Types.N:Weight[0])) -}
38df965694c57ea8a99df285579eb778
  $fEqAgent :: GHC.Classes.Eq Types.Agent
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Agent Types.$fEqAgent_$c== Types.$fEqAgent_$c/= -}
9bdb0d9342bf0a7b968108790cbc6558
  $fEqAgent1 ::
    Data.Map.Base.Map Types.ID Types.GeneState
    -> Data.Map.Base.Map Types.ID Types.GeneState -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.==} False True} Data.Map.Base.$fEqMap_$c==
                                                                                             @ Types.ID
                                                                                             @ Types.GeneState
                                                                                             Types.$fEqID
                                                                                             Types.$fEqGeneState) -}
38df965694c57ea8a99df285579eb778
  $fEqAgent_$c/= :: Types.Agent -> Types.Agent -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Types.Agent) (b :: Types.Agent) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types./=} True True} case Types.$fEqAgent_$c==
                                                                                                 a
                                                                                                 b of wild {
                                                                                            GHC.Types.False
                                                                                            -> GHC.Types.True
                                                                                            GHC.Types.True
                                                                                            -> GHC.Types.False }) -}
38df965694c57ea8a99df285579eb778
  $fEqAgent_$c== :: Types.Agent -> Types.Agent -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.Agent) (ds1 :: Types.Agent) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.==} True True} case ds of wild {
                                                                                            Types.Agent a1 a2
                                                                                            -> case ds1 of wild1 {
                                                                                                 Types.Agent b1 b2
                                                                                                 -> case GHC.Classes.$fEq[]_$c==
                                                                                                           @ [Types.Locus]
                                                                                                           Types.$fEqAgent_$s$fEq[]
                                                                                                           a1
                                                                                                           b1 of wild2 {
                                                                                                      GHC.Types.False
                                                                                                      -> GHC.Types.False
                                                                                                      GHC.Types.True
                                                                                                      -> Types.$fEqAgent1
                                                                                                           a2
                                                                                                           b2 }
                                                                                                 Types.NoAgent
                                                                                                 -> GHC.Types.False }
                                                                                            Types.NoAgent
                                                                                            -> case ds1 of wild1 {
                                                                                                 Types.Agent ipv ipv1
                                                                                                 -> GHC.Types.False
                                                                                                 Types.NoAgent
                                                                                                 -> GHC.Types.True } }) -}
df994c3fc5ada234fa29ffac9bbbecf0
  $fEqAgent_$dEq :: GHC.Classes.Eq Types.Locus
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Types.$fEqLocus -}
1555dce1d5ea9174dcef74d3786e7681
  $fEqAgent_$s$fEq[] :: GHC.Classes.Eq [Types.Locus]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Types.Locus]
                  (GHC.Classes.$fEq[]_$c== @ Types.Locus Types.$fEqAgent_$dEq)
                  Types.$fEqAgent_$s$fEq[]_$c/= -}
feb9c5891866fe87dc76d1471690f97b
  $fEqAgent_$s$fEq[]_$c/= ::
    [Types.Locus] -> [Types.Locus] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: [Types.Locus]) (y :: [Types.Locus]) ->
                 GHC.Classes.not
                   (GHC.Classes.$fEq[]_$c==
                      @ Types.Locus
                      Types.$fEqAgent_$dEq
                      x
                      y)) -}
a072f6d238ac5e449aeaa2a33683da36
  $fEqGene :: GHC.Classes.Eq Types.Gene
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Gene Types.$fEqLocus_$c==1 Types.$fEqGene_$c/= -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fEqGeneState :: GHC.Classes.Eq Types.GeneState
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.GeneState
                  Types.$fEqGeneState_$c==
                  Types.$fEqGeneState_$c/= -}
18b75b176e6d3cc0eeb3c6de9e961aa0
  $fEqGeneState1 ::
    GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types./=} True True} GHC.Classes.$fEqBool_$c/=) -}
af3e91dff6889cd32f53fc1023a7b3ff
  $fEqGeneState2 ::
    GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.==} True True} GHC.Classes.$fEqBool_$c==) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fEqGeneState_$c/= ::
    Types.GeneState -> Types.GeneState -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEqGeneState1
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R <GHC.Types.Bool>_R) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fEqGeneState_$c== ::
    Types.GeneState -> Types.GeneState -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEqGeneState2
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R <GHC.Types.Bool>_R) -}
a072f6d238ac5e449aeaa2a33683da36
  $fEqGene_$c/= :: Types.Gene -> Types.Gene -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U,U,U)><S,1*U(U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Types.Gene) (b :: Types.Gene) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types./=} True True} case Types.$fEqLocus_$c==1
                                                                                                 a
                                                                                                 b of wild {
                                                                                            GHC.Types.False
                                                                                            -> GHC.Types.True
                                                                                            GHC.Types.True
                                                                                            -> GHC.Types.False }) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fEqID :: GHC.Classes.Eq Types.ID
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:. @ Types.ID Types.$fEqID_$c== Types.$fEqID_$c/= -}
7160ad030f8de58a9bf7809129005613
  $fEqID1 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types./=} True True} GHC.Classes.neInt) -}
6bfe6896e5e13d97b7fdb5b5f04fda23
  $fEqID2 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.==} True True} GHC.Classes.eqInt) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fEqID_$c/= :: Types.ID -> Types.ID -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEqID1
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R <GHC.Types.Bool>_R) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fEqID_$c== :: Types.ID -> Types.ID -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEqID2
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R <GHC.Types.Bool>_R) -}
3a1ffa0ff8e7c5056897e544d9829245
  $fEqLocus :: GHC.Classes.Eq Types.Locus
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Locus Types.$fEqLocus_$c==2 Types.$fEqLocus_$c/= -}
ae4980c8a58f298d4fcbdf7ee49b15be
  $fEqLocus1 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.==} True True} GHC.Classes.eqInt) -}
351e1e6807a0c5ddfffdbbbe963cc6e0
  $fEqLocus2 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.==} True True} GHC.Classes.eqInt) -}
3a1ffa0ff8e7c5056897e544d9829245
  $fEqLocus_$c/= :: Types.Locus -> Types.Locus -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Locus) (b :: Types.Locus) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types./=} True True} {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.==} True False} case a of wild {
                                                                                                                                                                      Types.Transposon
                                                                                                                                                                      -> case b of wild1 {
                                                                                                                                                                           DEFAULT
                                                                                                                                                                           -> GHC.Types.True
                                                                                                                                                                           Types.Transposon
                                                                                                                                                                           -> GHC.Types.False }
                                                                                                                                                                      Types.CGene a1
                                                                                                                                                                      -> case b of wild1 {
                                                                                                                                                                           DEFAULT
                                                                                                                                                                           -> GHC.Types.True
                                                                                                                                                                           Types.CGene b1
                                                                                                                                                                           -> case {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.==} False True} Types.$fEqLocus_$c==1
                                                                                                                                                                                                                                                               a1
                                                                                                                                                                                                                                                               b1 of wild2 {
                                                                                                                                                                                GHC.Types.False
                                                                                                                                                                                -> GHC.Types.True
                                                                                                                                                                                GHC.Types.True
                                                                                                                                                                                -> GHC.Types.False } }
                                                                                                                                                                      Types.CTfbs a1
                                                                                                                                                                      -> case b of wild1 {
                                                                                                                                                                           DEFAULT
                                                                                                                                                                           -> GHC.Types.True
                                                                                                                                                                           Types.CTfbs b1
                                                                                                                                                                           -> case {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.==} False True} Types.$fEqLocus_$c==
                                                                                                                                                                                                                                                               a1
                                                                                                                                                                                                                                                               b1 of wild2 {
                                                                                                                                                                                GHC.Types.False
                                                                                                                                                                                -> GHC.Types.True
                                                                                                                                                                                GHC.Types.True
                                                                                                                                                                                -> GHC.Types.False } } }) -}
1dea3bc58315922227e05d4377f1eea5
  $fEqLocus_$c== :: Types.Tfbs -> Types.Tfbs -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U,U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Tfbs) (w1 :: Types.Tfbs) ->
                 case w of ww { Types.Tfbs ww1 ww2 ->
                 case w1 of ww3 { Types.Tfbs ww4 ww5 ->
                 Types.$w$c== ww1 ww2 ww4 ww5 } }) -}
a072f6d238ac5e449aeaa2a33683da36
  $fEqLocus_$c==1 :: Types.Gene -> Types.Gene -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U,U,U)><S,1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Gene) (w1 :: Types.Gene) ->
                 case w of ww { Types.Gene ww1 ww2 ww3 ->
                 case w1 of ww4 { Types.Gene ww5 ww6 ww7 ->
                 Types.$w$c==1 ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
3a1ffa0ff8e7c5056897e544d9829245
  $fEqLocus_$c==2 :: Types.Locus -> Types.Locus -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.Locus) (ds1 :: Types.Locus) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.==} True True} case ds of wild {
                                                                                            Types.Transposon
                                                                                            -> case ds1 of wild1 {
                                                                                                 DEFAULT
                                                                                                 -> GHC.Types.False
                                                                                                 Types.Transposon
                                                                                                 -> GHC.Types.True }
                                                                                            Types.CGene a1
                                                                                            -> case ds1 of wild1 {
                                                                                                 DEFAULT
                                                                                                 -> GHC.Types.False
                                                                                                 Types.CGene b1
                                                                                                 -> Types.$fEqLocus_$c==1
                                                                                                      a1
                                                                                                      b1 }
                                                                                            Types.CTfbs a1
                                                                                            -> case ds1 of wild1 {
                                                                                                 DEFAULT
                                                                                                 -> GHC.Types.False
                                                                                                 Types.CTfbs b1
                                                                                                 -> Types.$fEqLocus_$c==
                                                                                                      a1
                                                                                                      b1 } }) -}
1dea3bc58315922227e05d4377f1eea5
  $fEqTfbs :: GHC.Classes.Eq Types.Tfbs
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Tfbs Types.$fEqLocus_$c== Types.$fEqTfbs_$c/= -}
1dea3bc58315922227e05d4377f1eea5
  $fEqTfbs_$c/= :: Types.Tfbs -> Types.Tfbs -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U,U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Tfbs) (w1 :: Types.Tfbs) ->
                 case w of ww { Types.Tfbs ww1 ww2 ->
                 case w1 of ww3 { Types.Tfbs ww4 ww5 ->
                 Types.$w$c/= ww1 ww2 ww4 ww5 } }) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fEqThres :: GHC.Classes.Eq Types.Thres
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Thres Types.$fEqThres_$c== Types.$fEqThres_$c/= -}
124dbacb725ec2db28213d911951b08b
  $fEqThres1 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types./=} True True} GHC.Classes.neInt) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fEqThres_$c/= :: Types.Thres -> Types.Thres -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEqThres1
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R <GHC.Types.Bool>_R) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fEqThres_$c== :: Types.Thres -> Types.Thres -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEqLocus2
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R <GHC.Types.Bool>_R) -}
62e198601be4cac9703a7878d90fa463
  $fEqWeight :: GHC.Classes.Eq Types.Weight
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Weight Types.$fEqWeight_$c== Types.$fEqWeight_$c/= -}
35201aa586f2d7129d4a1c836a2e7182
  $fEqWeight1 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types./=} True True} GHC.Classes.neInt) -}
62e198601be4cac9703a7878d90fa463
  $fEqWeight_$c/= :: Types.Weight -> Types.Weight -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEqWeight1
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R <GHC.Types.Bool>_R) -}
62e198601be4cac9703a7878d90fa463
  $fEqWeight_$c== :: Types.Weight -> Types.Weight -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fEqLocus1
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R <GHC.Types.Bool>_R) -}
b7eab4f08821948fcc71d5d84aed42c0
  $fEqWorld :: GHC.Classes.Eq Types.World
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.World Types.$fEqWorld_$c== Types.$fEqWorld_$c/= -}
c77f715eb44212b7218236039afce4f0
  $fEqWorld1 ::
    Data.Map.Base.Map Types.ID Types.GeneState
    -> Data.Map.Base.Map Types.ID Types.GeneState -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.==} False True} {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.==} False True} Data.Map.Base.$fEqMap_$c==
                                                                                                                                                                       @ Types.ID
                                                                                                                                                                       @ Types.GeneState
                                                                                                                                                                       Types.$fEqID
                                                                                                                                                                       Types.$fEqGeneState) -}
b7eab4f08821948fcc71d5d84aed42c0
  $fEqWorld_$c/= :: Types.World -> Types.World -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(S(SSSL)L),1*U(1*U(U(1*U(U),1*U(U)),U(1*U(U),1*U(U)),1*U,U),1*U(U))><S(S(SSLL)L),1*U(1*U(U(1*U(U),1*U(U)),U(1*U(U),1*U(U)),1*U,U),1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Types.World) (b :: Types.World) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types./=} True True} case Types.$fEqWorld_$c==
                                                                                                 a
                                                                                                 b of wild {
                                                                                            GHC.Types.False
                                                                                            -> GHC.Types.True
                                                                                            GHC.Types.True
                                                                                            -> GHC.Types.False }) -}
b7eab4f08821948fcc71d5d84aed42c0
  $fEqWorld_$c== :: Types.World -> Types.World -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(S(SSSL)L),1*U(1*U(U(1*U(U),1*U(U)),U(1*U(U),1*U(U)),1*U,U),1*U(U))><S(S(SSLL)L),1*U(1*U(U(1*U(U),1*U(U)),U(1*U(U),1*U(U)),1*U,U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.World) (w1 :: Types.World) ->
                 case w of ww { Types.World ww1 ww2 ->
                 case ww1 of ww3 { GHC.Arr.Array ww4 ww5 ww6 ww7 ->
                 case ww4 of ww8 { (,) ww9 ww10 ->
                 case ww5 of ww11 { (,) ww12 ww13 ->
                 case w1 of ww14 { Types.World ww15 ww16 ->
                 case ww15 of ww17 { GHC.Arr.Array ww18 ww19 ww20 ww21 ->
                 case ww18 of ww22 { (,) ww23 ww24 ->
                 case ww19 of ww25 { (,) ww26 ww27 ->
                 Types.$w$c==2
                   ww9
                   ww10
                   ww12
                   ww13
                   ww6
                   ww7
                   ww2
                   ww23
                   ww24
                   ww26
                   ww27
                   ww20
                   ww21
                   ww16 } } } } } } } }) -}
b2674ec13353b81d4ec5e1754d7246f5
  $fGeneTypeGene :: Types.GeneType Types.Gene
  DFunId
  {- Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Types.$fGeneTypeGene_$ciD
                  `cast`
                (Sym (Types.N:GeneType[0] <Types.Gene>_N)) -}
147f2f63e77fdcfa488cdb3ebe20b541
  $fGeneTypeGene_$ciD :: Types.Gene -> Types.ID
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.iD} True True} Types.geneID) -}
b2674ec13353b81d4ec5e1754d7246f5
  $fGeneTypeTfbs :: Types.GeneType Types.Tfbs
  DFunId
  {- Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Types.$fGeneTypeTfbs_$ciD
                  `cast`
                (Sym (Types.N:GeneType[0] <Types.Tfbs>_N)) -}
59b878c5f01952c15d2ffe84d257239a
  $fGeneTypeTfbs_$ciD :: Types.Tfbs -> Types.ID
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.iD} True True} Types.tfbsID) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fIntegralID :: GHC.Real.Integral Types.ID
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.ID
                  Types.$fRealID
                  Types.$fEnumID
                  Types.$fIntegralID_$cquot
                  Types.$fIntegralID_$crem
                  Types.$fIntegralID_$cdiv
                  Types.$fIntegralID_$cmod
                  Types.$fIntegralID_$cquotRem
                  Types.$fIntegralID_$cdivMod
                  Types.$fIntegralID_$ctoInteger -}
c70d093fff85d53a6d7ef1bcc6af2dcf
  $fIntegralID1 :: GHC.Types.Int -> GHC.Integer.Type.Integer
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.toInteger} True True} GHC.Real.$fIntegralInt_$ctoInteger) -}
419acbb1ed9f7ac8d792c80222500a72
  $fIntegralID2 ::
    GHC.Types.Int -> GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int)
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.divMod} True True} GHC.Real.$fIntegralInt_$cdivMod) -}
be7c7f9a66e9dc13be2f0913781202d2
  $fIntegralID3 ::
    GHC.Types.Int -> GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int)
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.quotRem} True True} GHC.Real.$fIntegralInt_$cquotRem) -}
7cbebca5b103c3b3a6eb9c7c834d7a6b
  $fIntegralID4 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.mod} True True} GHC.Real.$fIntegralInt_$cmod) -}
a37a9aba7ceca050c4ad134d22f5019f
  $fIntegralID5 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.div} True True} GHC.Real.$fIntegralInt_$cdiv) -}
b019b76f191ef1a2e250a064a9992814
  $fIntegralID6 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.rem} True True} GHC.Real.$fIntegralInt_$crem) -}
06ed7c25848988678e29c2745570af37
  $fIntegralID7 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.quot} True True} GHC.Real.$fIntegralInt_$cquot) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fIntegralID_$cdiv :: Types.ID -> Types.ID -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralID5
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fIntegralID_$cdivMod ::
    Types.ID -> Types.ID -> (Types.ID, Types.ID)
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralID2
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R ((,) (Sym (Types.N:ID[0])) (Sym (Types.N:ID[0])))_R) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fIntegralID_$cmod :: Types.ID -> Types.ID -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralID4
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fIntegralID_$cquot :: Types.ID -> Types.ID -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralID7
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fIntegralID_$cquotRem ::
    Types.ID -> Types.ID -> (Types.ID, Types.ID)
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralID3
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R ((,) (Sym (Types.N:ID[0])) (Sym (Types.N:ID[0])))_R) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fIntegralID_$crem :: Types.ID -> Types.ID -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralID6
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fIntegralID_$ctoInteger :: Types.ID -> GHC.Integer.Type.Integer
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralID1
                  `cast`
                (Sym (Types.N:ID[0]) ->_R <GHC.Integer.Type.Integer>_R) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fIntegralThres :: GHC.Real.Integral Types.Thres
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Thres
                  Types.$fRealThres
                  Types.$fEnumThres
                  Types.$fIntegralThres_$cquot
                  Types.$fIntegralThres_$crem
                  Types.$fIntegralThres_$cdiv
                  Types.$fIntegralThres_$cmod
                  Types.$fIntegralThres_$cquotRem
                  Types.$fIntegralThres_$cdivMod
                  Types.$fIntegralThres_$ctoInteger -}
e37bdf1af6a882c3cf16a4102c4d3652
  $fIntegralThres1 :: GHC.Types.Int -> GHC.Integer.Type.Integer
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.toInteger} True True} GHC.Real.$fIntegralInt_$ctoInteger) -}
38dff1c3369eae9bc508e2cc38d88220
  $fIntegralThres2 ::
    GHC.Types.Int -> GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int)
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.divMod} True True} GHC.Real.$fIntegralInt_$cdivMod) -}
4581605911d18f860db42ad038e689a1
  $fIntegralThres3 ::
    GHC.Types.Int -> GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int)
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.quotRem} True True} GHC.Real.$fIntegralInt_$cquotRem) -}
12a7a61a5e5475ffa881fa29ded4e6de
  $fIntegralThres4 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.mod} True True} GHC.Real.$fIntegralInt_$cmod) -}
09d6ada55fb7d2e0100cefa75b845f0f
  $fIntegralThres5 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.div} True True} GHC.Real.$fIntegralInt_$cdiv) -}
8a229af817e3293b2f5ab0bcce518c8e
  $fIntegralThres6 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.rem} True True} GHC.Real.$fIntegralInt_$crem) -}
a7c62dd0beef56a2816305f51a932979
  $fIntegralThres7 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.quot} True True} GHC.Real.$fIntegralInt_$cquot) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fIntegralThres_$cdiv :: Types.Thres -> Types.Thres -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralThres5
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fIntegralThres_$cdivMod ::
    Types.Thres -> Types.Thres -> (Types.Thres, Types.Thres)
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralThres2
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R ((,) (Sym (Types.N:Thres[0])) (Sym (Types.N:Thres[0])))_R) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fIntegralThres_$cmod :: Types.Thres -> Types.Thres -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralThres4
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fIntegralThres_$cquot :: Types.Thres -> Types.Thres -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralThres7
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fIntegralThres_$cquotRem ::
    Types.Thres -> Types.Thres -> (Types.Thres, Types.Thres)
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralThres3
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R ((,) (Sym (Types.N:Thres[0])) (Sym (Types.N:Thres[0])))_R) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fIntegralThres_$crem :: Types.Thres -> Types.Thres -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralThres6
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fIntegralThres_$ctoInteger ::
    Types.Thres -> GHC.Integer.Type.Integer
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralThres1
                  `cast`
                (Sym (Types.N:Thres[0]) ->_R <GHC.Integer.Type.Integer>_R) -}
62e198601be4cac9703a7878d90fa463
  $fIntegralWeight :: GHC.Real.Integral Types.Weight
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Weight
                  Types.$fRealWeight
                  Types.$fEnumWeight
                  Types.$fIntegralWeight_$cquot
                  Types.$fIntegralWeight_$crem
                  Types.$fIntegralWeight_$cdiv
                  Types.$fIntegralWeight_$cmod
                  Types.$fIntegralWeight_$cquotRem
                  Types.$fIntegralWeight_$cdivMod
                  Types.$fIntegralWeight_$ctoInteger -}
f26d9510a4bc5c96b072f15d8cc7fc77
  $fIntegralWeight1 :: GHC.Types.Int -> GHC.Integer.Type.Integer
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.toInteger} True True} GHC.Real.$fIntegralInt_$ctoInteger) -}
1edd83d2c72598fe491d6cde13cb6838
  $fIntegralWeight2 ::
    GHC.Types.Int -> GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int)
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.divMod} True True} GHC.Real.$fIntegralInt_$cdivMod) -}
1bfd8b4fa11a6e34ffca1f26654488bc
  $fIntegralWeight3 ::
    GHC.Types.Int -> GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int)
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.quotRem} True True} GHC.Real.$fIntegralInt_$cquotRem) -}
fa64f6abfe1a83ecd3dbb3cce95c02ed
  $fIntegralWeight4 ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.mod} True True} GHC.Real.$fIntegralInt_$cmod) -}
f63ed647b0076a5b1e17f335f63fef79
  $fIntegralWeight5 ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.div} True True} GHC.Real.$fIntegralInt_$cdiv) -}
ae3d7ab0d90b37881313edf1922a9475
  $fIntegralWeight6 ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.rem} True True} GHC.Real.$fIntegralInt_$crem) -}
576761aa5bf21a93356c93d6325b1a37
  $fIntegralWeight7 ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.quot} True True} GHC.Real.$fIntegralInt_$cquot) -}
62e198601be4cac9703a7878d90fa463
  $fIntegralWeight_$cdiv ::
    Types.Weight -> Types.Weight -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralWeight5
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])) -}
62e198601be4cac9703a7878d90fa463
  $fIntegralWeight_$cdivMod ::
    Types.Weight -> Types.Weight -> (Types.Weight, Types.Weight)
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralWeight2
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R ((,)
                         (Sym (Types.N:Weight[0])) (Sym (Types.N:Weight[0])))_R) -}
62e198601be4cac9703a7878d90fa463
  $fIntegralWeight_$cmod ::
    Types.Weight -> Types.Weight -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralWeight4
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])) -}
62e198601be4cac9703a7878d90fa463
  $fIntegralWeight_$cquot ::
    Types.Weight -> Types.Weight -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralWeight7
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])) -}
62e198601be4cac9703a7878d90fa463
  $fIntegralWeight_$cquotRem ::
    Types.Weight -> Types.Weight -> (Types.Weight, Types.Weight)
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralWeight3
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R ((,)
                         (Sym (Types.N:Weight[0])) (Sym (Types.N:Weight[0])))_R) -}
62e198601be4cac9703a7878d90fa463
  $fIntegralWeight_$crem ::
    Types.Weight -> Types.Weight -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralWeight6
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])) -}
62e198601be4cac9703a7878d90fa463
  $fIntegralWeight_$ctoInteger ::
    Types.Weight -> GHC.Integer.Type.Integer
  {- Unfolding: InlineRule (0, True, True)
                Types.$fIntegralWeight1
                  `cast`
                (Sym (Types.N:Weight[0]) ->_R <GHC.Integer.Type.Integer>_R) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fNumGeneState :: GHC.Num.Num Types.GeneState
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.GeneState
                  Types.$fNumGeneState_$c+
                  Types.$fNumGeneState_$c-
                  Types.$fNumGeneState_$c*
                  Types.$fNumGeneState_$cnegate
                  Types.$fNumGeneState_$cabs
                  Types.$fNumGeneState_$csignum
                  Types.$fNumGeneState_$cfromInteger -}
d6e95e9c185176c02b2a0fdb87482ed7
  $fNumGeneState1 :: GHC.Integer.Type.Integer -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: GHC.Integer.Type.Integer) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.fromInteger} True True} case GHC.Integer.Type.gtInteger#
                                                                                                          a
                                                                                                          Types.$fNumGeneState2 of wild { DEFAULT ->
                                                                                                   GHC.Prim.tagToEnum#
                                                                                                     @ GHC.Types.Bool
                                                                                                     wild }) -}
d2956d166727b04a972a03ac0bc11bbd
  $fNumGeneState2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fNumGeneState3 :: Types.GeneState -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Types.GeneState) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.negate} True True} GHC.Classes.not
                                                                                                ds
                                                                                                  `cast`
                                                                                                (Types.N:GeneState[0])) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fNumGeneState4 ::
    Types.GeneState -> Types.GeneState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Types.GeneState) (ds1 :: Types.GeneState) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.+} True True} GHC.Classes.||
                                                                                           ds
                                                                                             `cast`
                                                                                           (Types.N:GeneState[0])
                                                                                           ds1
                                                                                             `cast`
                                                                                           (Types.N:GeneState[0])) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fNumGeneState_$c* ::
    Types.GeneState -> Types.GeneState -> Types.GeneState
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Types.GeneState) (ds1 :: Types.GeneState) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.*} True True} case ds
                                                                                                `cast`
                                                                                              (Types.N:GeneState[0]) of wild {
                                                                                           GHC.Types.False
                                                                                           -> case ds1
                                                                                                     `cast`
                                                                                                   (Types.N:GeneState[0]) of wild1 {
                                                                                                GHC.Types.False
                                                                                                -> GHC.Types.True
                                                                                                     `cast`
                                                                                                   (Sym (Types.N:GeneState[0]))
                                                                                                GHC.Types.True
                                                                                                -> GHC.Types.False
                                                                                                     `cast`
                                                                                                   (Sym (Types.N:GeneState[0])) }
                                                                                           GHC.Types.True
                                                                                           -> GHC.Types.False
                                                                                                `cast`
                                                                                              (Sym (Types.N:GeneState[0])) }) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fNumGeneState_$c+ ::
    Types.GeneState -> Types.GeneState -> Types.GeneState
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (0, True, True)
                Types.$fNumGeneState4
                  `cast`
                (<Types.GeneState>_R
                 ->_R <Types.GeneState>_R
                 ->_R Sym (Types.N:GeneState[0])) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fNumGeneState_$c- ::
    Types.GeneState -> Types.GeneState -> Types.GeneState
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Types.GeneState) (y :: Types.GeneState) ->
                 Types.$fNumGeneState_$c+ x (Types.$fNumGeneState_$cnegate y)) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fNumGeneState_$cabs :: Types.GeneState -> Types.GeneState
  {- Unfolding: (({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.abs} True False} GHC.Base.id)
                   @ Types.GeneState) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fNumGeneState_$cfromInteger ::
    GHC.Integer.Type.Integer -> Types.GeneState
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Types.$fNumGeneState1
                  `cast`
                (<GHC.Integer.Type.Integer>_R ->_R Sym (Types.N:GeneState[0])) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fNumGeneState_$cnegate :: Types.GeneState -> Types.GeneState
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Types.$fNumGeneState3
                  `cast`
                (<Types.GeneState>_R ->_R Sym (Types.N:GeneState[0])) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fNumGeneState_$csignum :: Types.GeneState -> Types.GeneState
  {- Unfolding: (({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.signum} True False} GHC.Base.id)
                   @ Types.GeneState) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fNumID :: GHC.Num.Num Types.ID
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.ID
                  Types.$fNumID_$c+
                  Types.$fNumID_$c-
                  Types.$fNumID_$c*
                  Types.$fNumID_$cnegate
                  Types.$fNumID_$cabs
                  Types.$fNumID_$csignum
                  Types.$fNumID_$cfromInteger -}
27f8960948f29c60ed38f871811dd116
  $fNumID1 :: GHC.Integer.Type.Integer -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.fromInteger} True True} GHC.Num.$fNumInt_$cfromInteger) -}
7d098a0194888c5381f3faa4b14a26b9
  $fNumID2 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.signum} True True} GHC.Num.$fNumInt_$csignum) -}
b1e986675a7970f5e24928d9a7bbe1d9
  $fNumID3 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.abs} True True} GHC.Num.$fNumInt_$cabs) -}
ca299b78bec836b3e3731d82513264f4
  $fNumID4 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.negate} True True} GHC.Num.$fNumInt_$cnegate) -}
69205b2ba3aa5d6aaa9709ab53920b40
  $fNumID5 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.*} True True} GHC.Num.$fNumInt_$c*) -}
2e27e9d026214cf9485d657ffd01b574
  $fNumID6 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.-} True True} GHC.Num.$fNumInt_$c-) -}
0b5c7dd7d7dbddf347e894205087975b
  $fNumID7 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.+} True True} GHC.Num.$fNumInt_$c+) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fNumID_$c* :: Types.ID -> Types.ID -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumID5
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fNumID_$c+ :: Types.ID -> Types.ID -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumID7
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fNumID_$c- :: Types.ID -> Types.ID -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumID6
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fNumID_$cabs :: Types.ID -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumID3
                  `cast`
                (Sym (Types.N:ID[0]) ->_R Sym (Types.N:ID[0])) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fNumID_$cfromInteger :: GHC.Integer.Type.Integer -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumID1
                  `cast`
                (<GHC.Integer.Type.Integer>_R ->_R Sym (Types.N:ID[0])) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fNumID_$cnegate :: Types.ID -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumID4
                  `cast`
                (Sym (Types.N:ID[0]) ->_R Sym (Types.N:ID[0])) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fNumID_$csignum :: Types.ID -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumID2
                  `cast`
                (Sym (Types.N:ID[0]) ->_R Sym (Types.N:ID[0])) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fNumThres :: GHC.Num.Num Types.Thres
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Thres
                  Types.$fNumThres_$c+
                  Types.$fNumThres_$c-
                  Types.$fNumThres_$c*
                  Types.$fNumThres_$cnegate
                  Types.$fNumThres_$cabs
                  Types.$fNumThres_$csignum
                  Types.$fNumThres_$cfromInteger -}
4750ef20227d4770f0143bf7a1344b19
  $fNumThres1 :: GHC.Integer.Type.Integer -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.fromInteger} True True} GHC.Num.$fNumInt_$cfromInteger) -}
3e1ca941a36e673bcfd34193960ef221
  $fNumThres2 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.signum} True True} GHC.Num.$fNumInt_$csignum) -}
dc9e9fe90ac04d08ed5fa326eb6356ba
  $fNumThres3 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.abs} True True} GHC.Num.$fNumInt_$cabs) -}
8d9842e0d6c26b0c46da3870ea1cd972
  $fNumThres4 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.negate} True True} GHC.Num.$fNumInt_$cnegate) -}
e13b51da118256e373f6dbcc33325db4
  $fNumThres5 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.*} True True} GHC.Num.$fNumInt_$c*) -}
bc06d55eff5c537292920af2b557699b
  $fNumThres6 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.-} True True} GHC.Num.$fNumInt_$c-) -}
bac63a7b5f72fd60a509f50211300b32
  $fNumThres7 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.+} True True} GHC.Num.$fNumInt_$c+) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fNumThres_$c* :: Types.Thres -> Types.Thres -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumThres5
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fNumThres_$c+ :: Types.Thres -> Types.Thres -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumThres7
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fNumThres_$c- :: Types.Thres -> Types.Thres -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumThres6
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fNumThres_$cabs :: Types.Thres -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumThres3
                  `cast`
                (Sym (Types.N:Thres[0]) ->_R Sym (Types.N:Thres[0])) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fNumThres_$cfromInteger :: GHC.Integer.Type.Integer -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumThres1
                  `cast`
                (<GHC.Integer.Type.Integer>_R ->_R Sym (Types.N:Thres[0])) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fNumThres_$cnegate :: Types.Thres -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumThres4
                  `cast`
                (Sym (Types.N:Thres[0]) ->_R Sym (Types.N:Thres[0])) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fNumThres_$csignum :: Types.Thres -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumThres2
                  `cast`
                (Sym (Types.N:Thres[0]) ->_R Sym (Types.N:Thres[0])) -}
62e198601be4cac9703a7878d90fa463
  $fNumWeight :: GHC.Num.Num Types.Weight
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Weight
                  Types.$fNumWeight_$c+
                  Types.$fNumWeight_$c-
                  Types.$fNumWeight_$c*
                  Types.$fNumWeight_$cnegate
                  Types.$fNumWeight_$cabs
                  Types.$fNumWeight_$csignum
                  Types.$fNumWeight_$cfromInteger -}
6c5aa79215f0123517ab939cccfeb1bb
  $fNumWeight1 :: GHC.Integer.Type.Integer -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.fromInteger} True True} GHC.Num.$fNumInt_$cfromInteger) -}
2dc7b6d92d9e41d769ad3d4524a42518
  $fNumWeight2 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.signum} True True} GHC.Num.$fNumInt_$csignum) -}
7b677829daefe798f18649963f1b27e9
  $fNumWeight3 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.abs} True True} GHC.Num.$fNumInt_$cabs) -}
901c59f2eebbc805ca8c19adcbe73243
  $fNumWeight4 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.negate} True True} GHC.Num.$fNumInt_$cnegate) -}
154cdb749e704a3395722f49199f1c41
  $fNumWeight5 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.*} True True} GHC.Num.$fNumInt_$c*) -}
bab86e1d561022e00af5cd964da4625b
  $fNumWeight6 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.-} True True} GHC.Num.$fNumInt_$c-) -}
d022d292ed13315243775aeb968f4c7d
  $fNumWeight7 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.+} True True} GHC.Num.$fNumInt_$c+) -}
62e198601be4cac9703a7878d90fa463
  $fNumWeight_$c* :: Types.Weight -> Types.Weight -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumWeight5
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])) -}
62e198601be4cac9703a7878d90fa463
  $fNumWeight_$c+ :: Types.Weight -> Types.Weight -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumWeight7
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])) -}
62e198601be4cac9703a7878d90fa463
  $fNumWeight_$c- :: Types.Weight -> Types.Weight -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumWeight6
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])) -}
62e198601be4cac9703a7878d90fa463
  $fNumWeight_$cabs :: Types.Weight -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumWeight3
                  `cast`
                (Sym (Types.N:Weight[0]) ->_R Sym (Types.N:Weight[0])) -}
62e198601be4cac9703a7878d90fa463
  $fNumWeight_$cfromInteger ::
    GHC.Integer.Type.Integer -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumWeight1
                  `cast`
                (<GHC.Integer.Type.Integer>_R ->_R Sym (Types.N:Weight[0])) -}
62e198601be4cac9703a7878d90fa463
  $fNumWeight_$cnegate :: Types.Weight -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumWeight4
                  `cast`
                (Sym (Types.N:Weight[0]) ->_R Sym (Types.N:Weight[0])) -}
62e198601be4cac9703a7878d90fa463
  $fNumWeight_$csignum :: Types.Weight -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fNumWeight2
                  `cast`
                (Sym (Types.N:Weight[0]) ->_R Sym (Types.N:Weight[0])) -}
38df965694c57ea8a99df285579eb778
  $fOrdAgent :: GHC.Classes.Ord Types.Agent
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Agent
                  Types.$fEqAgent
                  Types.$fOrdAgent_$ccompare
                  Types.$fOrdAgent_$c<
                  Types.$fOrdAgent_$c<=
                  Types.$fOrdAgent_$c>
                  Types.$fOrdAgent_$c>=
                  Types.$fOrdAgent_$cmax
                  Types.$fOrdAgent_$cmin -}
89acb4eb9746398b223c4dc0dd81565d
  $fOrdAgent1 :: GHC.Classes.Ord (Types.ID, Types.GeneState)
  {- Unfolding: (GHC.Classes.$fOrd(,)
                   @ Types.ID
                   @ Types.GeneState
                   Types.$fOrdID
                   Types.$fOrdGeneState) -}
38df965694c57ea8a99df285579eb778
  $fOrdAgent_$c< :: Types.Agent -> Types.Agent -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Agent) (b :: Types.Agent) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.<} True True} case a of wild {
                                                                                           Types.Agent a1 a2
                                                                                           -> case b of wild1 {
                                                                                                Types.Agent b1 b2
                                                                                                -> case GHC.Classes.$fOrd[]_$ccompare
                                                                                                          @ [Types.Locus]
                                                                                                          Types.$fOrdAgent_$s$fOrd[]
                                                                                                          a1
                                                                                                          b1 of wild2 {
                                                                                                     GHC.Types.LT
                                                                                                     -> GHC.Types.True
                                                                                                     GHC.Types.EQ
                                                                                                     -> Data.Map.Base.$fOrdMap_$c<
                                                                                                          @ Types.ID
                                                                                                          @ Types.GeneState
                                                                                                          Types.$fOrdID
                                                                                                          Types.$fOrdGeneState
                                                                                                          a2
                                                                                                          b2
                                                                                                     GHC.Types.GT
                                                                                                     -> GHC.Types.False }
                                                                                                Types.NoAgent
                                                                                                -> GHC.Types.True }
                                                                                           Types.NoAgent
                                                                                           -> case b of wild1 { DEFAULT ->
                                                                                              GHC.Types.False } }) -}
38df965694c57ea8a99df285579eb778
  $fOrdAgent_$c<= :: Types.Agent -> Types.Agent -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Agent) (b :: Types.Agent) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.<=} True True} case a of wild {
                                                                                            Types.Agent a1 a2
                                                                                            -> case b of wild1 {
                                                                                                 Types.Agent b1 b2
                                                                                                 -> case GHC.Classes.$fOrd[]_$ccompare
                                                                                                           @ [Types.Locus]
                                                                                                           Types.$fOrdAgent_$s$fOrd[]
                                                                                                           a1
                                                                                                           b1 of wild2 {
                                                                                                      GHC.Types.LT
                                                                                                      -> GHC.Types.True
                                                                                                      GHC.Types.EQ
                                                                                                      -> Data.Map.Base.$fOrdMap_$c<=
                                                                                                           @ Types.ID
                                                                                                           @ Types.GeneState
                                                                                                           Types.$fOrdID
                                                                                                           Types.$fOrdGeneState
                                                                                                           a2
                                                                                                           b2
                                                                                                      GHC.Types.GT
                                                                                                      -> GHC.Types.False }
                                                                                                 Types.NoAgent
                                                                                                 -> GHC.Types.True }
                                                                                            Types.NoAgent
                                                                                            -> case b of wild1 {
                                                                                                 Types.Agent ipv ipv1
                                                                                                 -> GHC.Types.False
                                                                                                 Types.NoAgent
                                                                                                 -> GHC.Types.True } }) -}
38df965694c57ea8a99df285579eb778
  $fOrdAgent_$c> :: Types.Agent -> Types.Agent -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Agent) (b :: Types.Agent) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.>} True True} case a of wild {
                                                                                           Types.Agent a1 a2
                                                                                           -> case b of wild1 {
                                                                                                Types.Agent b1 b2
                                                                                                -> case GHC.Classes.$fOrd[]_$ccompare
                                                                                                          @ [Types.Locus]
                                                                                                          Types.$fOrdAgent_$s$fOrd[]
                                                                                                          a1
                                                                                                          b1 of wild2 {
                                                                                                     GHC.Types.LT
                                                                                                     -> GHC.Types.False
                                                                                                     GHC.Types.EQ
                                                                                                     -> Data.Map.Base.$fOrdMap_$c>
                                                                                                          @ Types.ID
                                                                                                          @ Types.GeneState
                                                                                                          Types.$fOrdID
                                                                                                          Types.$fOrdGeneState
                                                                                                          a2
                                                                                                          b2
                                                                                                     GHC.Types.GT
                                                                                                     -> GHC.Types.True }
                                                                                                Types.NoAgent
                                                                                                -> GHC.Types.False }
                                                                                           Types.NoAgent
                                                                                           -> case b of wild1 {
                                                                                                Types.Agent ipv ipv1
                                                                                                -> GHC.Types.True
                                                                                                Types.NoAgent
                                                                                                -> GHC.Types.False } }) -}
38df965694c57ea8a99df285579eb778
  $fOrdAgent_$c>= :: Types.Agent -> Types.Agent -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Agent) (b :: Types.Agent) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.>=} True True} case a of wild {
                                                                                            Types.Agent a1 a2
                                                                                            -> case b of wild1 {
                                                                                                 Types.Agent b1 b2
                                                                                                 -> case GHC.Classes.$fOrd[]_$ccompare
                                                                                                           @ [Types.Locus]
                                                                                                           Types.$fOrdAgent_$s$fOrd[]
                                                                                                           a1
                                                                                                           b1 of wild2 {
                                                                                                      GHC.Types.LT
                                                                                                      -> GHC.Types.False
                                                                                                      GHC.Types.EQ
                                                                                                      -> Data.Map.Base.$fOrdMap_$c>=
                                                                                                           @ Types.ID
                                                                                                           @ Types.GeneState
                                                                                                           Types.$fOrdID
                                                                                                           Types.$fOrdGeneState
                                                                                                           a2
                                                                                                           b2
                                                                                                      GHC.Types.GT
                                                                                                      -> GHC.Types.True }
                                                                                                 Types.NoAgent
                                                                                                 -> GHC.Types.False }
                                                                                            Types.NoAgent
                                                                                            -> case b of wild1 { DEFAULT ->
                                                                                               GHC.Types.True } }) -}
38df965694c57ea8a99df285579eb778
  $fOrdAgent_$ccompare ::
    Types.Agent -> Types.Agent -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Agent) (b :: Types.Agent) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.compare} True True} case a of wild {
                                                                                                 Types.Agent a1 a2
                                                                                                 -> case b of wild1 {
                                                                                                      Types.Agent b1 b2
                                                                                                      -> case GHC.Classes.$fOrd[]_$ccompare
                                                                                                                @ [Types.Locus]
                                                                                                                Types.$fOrdAgent_$s$fOrd[]
                                                                                                                a1
                                                                                                                b1 of wild2 {
                                                                                                           GHC.Types.LT
                                                                                                           -> GHC.Types.LT
                                                                                                           GHC.Types.EQ
                                                                                                           -> GHC.Classes.$fOrd[]_$ccompare
                                                                                                                @ (Types.ID,
                                                                                                                   Types.GeneState)
                                                                                                                Types.$fOrdAgent1
                                                                                                                (Data.Map.Base.toAscList1
                                                                                                                   @ Types.ID
                                                                                                                   @ Types.GeneState
                                                                                                                   (GHC.Types.[]
                                                                                                                      @ (Types.ID,
                                                                                                                         Types.GeneState))
                                                                                                                   a2)
                                                                                                                (Data.Map.Base.toAscList1
                                                                                                                   @ Types.ID
                                                                                                                   @ Types.GeneState
                                                                                                                   (GHC.Types.[]
                                                                                                                      @ (Types.ID,
                                                                                                                         Types.GeneState))
                                                                                                                   b2)
                                                                                                           GHC.Types.GT
                                                                                                           -> GHC.Types.GT }
                                                                                                      Types.NoAgent
                                                                                                      -> GHC.Types.LT }
                                                                                                 Types.NoAgent
                                                                                                 -> case b of wild1 {
                                                                                                      Types.Agent ipv ipv1
                                                                                                      -> GHC.Types.GT
                                                                                                      Types.NoAgent
                                                                                                      -> GHC.Types.EQ } }) -}
38df965694c57ea8a99df285579eb778
  $fOrdAgent_$cmax :: Types.Agent -> Types.Agent -> Types.Agent
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Agent) (y :: Types.Agent) ->
                 case Types.$fOrdAgent_$c<= x y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
38df965694c57ea8a99df285579eb778
  $fOrdAgent_$cmin :: Types.Agent -> Types.Agent -> Types.Agent
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Agent) (y :: Types.Agent) ->
                 case Types.$fOrdAgent_$c<= x y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
0963515099b5cdf40c0072f5d7883988
  $fOrdAgent_$s$fOrd[] :: GHC.Classes.Ord [Types.Locus]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Types.Locus]
                  Types.$fOrdAgent_$s$fOrd[]_$cp1Ord
                  (GHC.Classes.$fOrd[]_$ccompare @ Types.Locus Types.$fOrdLocus)
                  Types.$fOrdAgent_$s$fOrd[]_$c<
                  Types.$fOrdAgent_$s$fOrd[]_$c<=
                  Types.$fOrdAgent_$s$fOrd[]_$c>
                  Types.$fOrdAgent_$s$fOrd[]_$c>=
                  Types.$fOrdAgent_$s$fOrd[]_$cmax
                  Types.$fOrdAgent_$s$fOrd[]_$cmin -}
d0ec895d3d30df983b1ea42d115afd81
  $fOrdAgent_$s$fOrd[]_$c< ::
    [Types.Locus] -> [Types.Locus] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Types.Locus]) (y :: [Types.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Types.Locus
                        Types.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
6dc60f00a923c90caae19515555196bb
  $fOrdAgent_$s$fOrd[]_$c<= ::
    [Types.Locus] -> [Types.Locus] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Types.Locus]) (y :: [Types.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Types.Locus
                        Types.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
2bae6976aa4b126c5819ca0c120434da
  $fOrdAgent_$s$fOrd[]_$c> ::
    [Types.Locus] -> [Types.Locus] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Types.Locus]) (y :: [Types.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Types.Locus
                        Types.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
b90443460b3dd751db51aebb952d5756
  $fOrdAgent_$s$fOrd[]_$c>= ::
    [Types.Locus] -> [Types.Locus] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Types.Locus]) (y :: [Types.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Types.Locus
                        Types.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
7c31fdadedf567aadb21e6f5490d5f1e
  $fOrdAgent_$s$fOrd[]_$cmax ::
    [Types.Locus] -> [Types.Locus] -> [Types.Locus]
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Types.Locus]) (y :: [Types.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Types.Locus
                        Types.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
40b0c82c6754c7072e9558c8fd6d63cf
  $fOrdAgent_$s$fOrd[]_$cmin ::
    [Types.Locus] -> [Types.Locus] -> [Types.Locus]
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Types.Locus]) (y :: [Types.Locus]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Types.Locus
                        Types.$fOrdLocus
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
849333d842c917ab8bb70ade8a09277f
  $fOrdAgent_$s$fOrd[]_$cp1Ord :: GHC.Classes.Eq [Types.Locus]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Types.$fEqAgent_$s$fEq[] -}
a072f6d238ac5e449aeaa2a33683da36
  $fOrdGene :: GHC.Classes.Ord Types.Gene
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Gene
                  Types.$fEqGene
                  Types.$fOrdLocus_$ccompare
                  Types.$fOrdLocus_$c<2
                  Types.$fOrdLocus_$c<=1
                  Types.$fOrdLocus_$c>2
                  Types.$fOrdLocus_$c>=2
                  Types.$fOrdGene_$cmax
                  Types.$fOrdGene_$cmin -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fOrdGeneState :: GHC.Classes.Ord Types.GeneState
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.GeneState
                  Types.$fEqGeneState
                  Types.$fOrdGeneState_$ccompare
                  Types.$fOrdGeneState_$c<
                  Types.$fOrdGeneState_$c<=
                  Types.$fOrdGeneState_$c>
                  Types.$fOrdGeneState_$c>=
                  Types.$fOrdGeneState_$cmax
                  Types.$fOrdGeneState_$cmin -}
ba1eb68640a1155260b0f80bedddc65a
  $fOrdGeneState1 ::
    GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.min} True True} GHC.Classes.$fOrdBool_$cmin) -}
2e492680d7dd7f7cde23af68bbe7f814
  $fOrdGeneState2 ::
    GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.max} True True} GHC.Classes.$fOrdBool_$cmax) -}
24138ef828f3540af13fc74aa51bb6c8
  $fOrdGeneState3 ::
    GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.>=} True True} GHC.Classes.$fOrdBool_$c>=) -}
8307e54aeeb4261c501b2d878879776b
  $fOrdGeneState4 ::
    GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.>} True True} GHC.Classes.$fOrdBool_$c>) -}
3a4f2520e39513e7479c130e236358eb
  $fOrdGeneState5 ::
    GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.<=} True True} GHC.Classes.$fOrdBool_$c<=) -}
9a54bf5a7916b5021cc22de03599d2a0
  $fOrdGeneState6 ::
    GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.<} True True} GHC.Classes.$fOrdBool_$c<) -}
3ebfb11bca1241ee00810d8db1af0233
  $fOrdGeneState7 ::
    GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Ordering
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.compare} True True} GHC.Classes.$fOrdBool_$ccompare) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fOrdGeneState_$c< ::
    Types.GeneState -> Types.GeneState -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdGeneState6
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R <GHC.Types.Bool>_R) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fOrdGeneState_$c<= ::
    Types.GeneState -> Types.GeneState -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdGeneState5
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R <GHC.Types.Bool>_R) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fOrdGeneState_$c> ::
    Types.GeneState -> Types.GeneState -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdGeneState4
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R <GHC.Types.Bool>_R) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fOrdGeneState_$c>= ::
    Types.GeneState -> Types.GeneState -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdGeneState3
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R <GHC.Types.Bool>_R) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fOrdGeneState_$ccompare ::
    Types.GeneState -> Types.GeneState -> GHC.Types.Ordering
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdGeneState7
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R <GHC.Types.Ordering>_R) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fOrdGeneState_$cmax ::
    Types.GeneState -> Types.GeneState -> Types.GeneState
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdGeneState2
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fOrdGeneState_$cmin ::
    Types.GeneState -> Types.GeneState -> Types.GeneState
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdGeneState1
                  `cast`
                (Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])
                 ->_R Sym (Types.N:GeneState[0])) -}
a072f6d238ac5e449aeaa2a33683da36
  $fOrdGene_$cmax :: Types.Gene -> Types.Gene -> Types.Gene
  {- Arity: 2, Strictness: <S,U(U,U,U)><S,U(U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Gene) (y :: Types.Gene) ->
                 case Types.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
a072f6d238ac5e449aeaa2a33683da36
  $fOrdGene_$cmin :: Types.Gene -> Types.Gene -> Types.Gene
  {- Arity: 2, Strictness: <S,U(U,U,U)><S,U(U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Gene) (y :: Types.Gene) ->
                 case Types.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fOrdID :: GHC.Classes.Ord Types.ID
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.ID
                  Types.$fEqID
                  Types.$fOrdID_$ccompare
                  Types.$fOrdID_$c<
                  Types.$fOrdID_$c<=
                  Types.$fOrdID_$c>
                  Types.$fOrdID_$c>=
                  Types.$fOrdID_$cmax
                  Types.$fOrdID_$cmin -}
2cde909e2f2e3dd51949d850f5fce9bd
  $fOrdID1 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.min} True True} GHC.Classes.$fOrdInt_$cmin) -}
0035ea4d8186736223d11aad25770806
  $fOrdID2 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.max} True True} GHC.Classes.$fOrdInt_$cmax) -}
7ac3d428df4b9b7f89f372fa8f2260a1
  $fOrdID3 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.>=} True True} GHC.Classes.geInt) -}
7f89b7df6aa035759c297f1a1a461a24
  $fOrdID4 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.>} True True} GHC.Classes.gtInt) -}
968b6f4ada3c834679031455eb68aeec
  $fOrdID5 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.<=} True True} GHC.Classes.leInt) -}
1282a10fe0bc376c4889750574b860e0
  $fOrdID6 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.<} True True} GHC.Classes.ltInt) -}
043403746ec57ce9abea3cb43cce2047
  $fOrdID7 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Ordering
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.compare} True True} GHC.Classes.compareInt) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fOrdID_$c< :: Types.ID -> Types.ID -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdID6
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R <GHC.Types.Bool>_R) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fOrdID_$c<= :: Types.ID -> Types.ID -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdID5
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R <GHC.Types.Bool>_R) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fOrdID_$c> :: Types.ID -> Types.ID -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdID4
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R <GHC.Types.Bool>_R) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fOrdID_$c>= :: Types.ID -> Types.ID -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdID3
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R <GHC.Types.Bool>_R) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fOrdID_$ccompare :: Types.ID -> Types.ID -> GHC.Types.Ordering
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdID7
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R <GHC.Types.Ordering>_R) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fOrdID_$cmax :: Types.ID -> Types.ID -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdID2
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fOrdID_$cmin :: Types.ID -> Types.ID -> Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdID1
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])
                 ->_R Sym (Types.N:ID[0])) -}
3a1ffa0ff8e7c5056897e544d9829245
  $fOrdLocus :: GHC.Classes.Ord Types.Locus
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Locus
                  Types.$fEqLocus
                  Types.$fOrdLocus_$ccompare1
                  Types.$fOrdLocus_$c<
                  Types.$fOrdLocus_$c<=2
                  Types.$fOrdLocus_$c>
                  Types.$fOrdLocus_$c>=
                  Types.$fOrdLocus_$cmax
                  Types.$fOrdLocus_$cmin -}
3a1ffa0ff8e7c5056897e544d9829245
  $fOrdLocus_$c< :: Types.Locus -> Types.Locus -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Locus) (b :: Types.Locus) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.<} True True} case a of wild {
                                                                                           Types.Transposon
                                                                                           -> case b of wild1 {
                                                                                                DEFAULT
                                                                                                -> GHC.Types.True
                                                                                                Types.Transposon
                                                                                                -> GHC.Types.False }
                                                                                           Types.CGene a1
                                                                                           -> case b of wild1 {
                                                                                                Types.Transposon
                                                                                                -> GHC.Types.False
                                                                                                Types.CGene b1
                                                                                                -> Types.$fOrdLocus_$c<2
                                                                                                     a1
                                                                                                     b1
                                                                                                Types.CTfbs ipv
                                                                                                -> GHC.Types.True }
                                                                                           Types.CTfbs a1
                                                                                           -> case b of wild1 {
                                                                                                DEFAULT
                                                                                                -> GHC.Types.False
                                                                                                Types.CTfbs b1
                                                                                                -> Types.$fOrdLocus_$c<1
                                                                                                     a1
                                                                                                     b1 } }) -}
1dea3bc58315922227e05d4377f1eea5
  $fOrdLocus_$c<1 :: Types.Tfbs -> Types.Tfbs -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U,U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Tfbs) (w1 :: Types.Tfbs) ->
                 case w of ww { Types.Tfbs ww1 ww2 ->
                 case w1 of ww3 { Types.Tfbs ww4 ww5 ->
                 Types.$w$c< ww1 ww2 ww4 ww5 } }) -}
a072f6d238ac5e449aeaa2a33683da36
  $fOrdLocus_$c<2 :: Types.Gene -> Types.Gene -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U,U,U)><S,1*U(U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Gene) (y :: Types.Gene) ->
                 case Types.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
1dea3bc58315922227e05d4377f1eea5
  $fOrdLocus_$c<= :: Types.Tfbs -> Types.Tfbs -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U,U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Tfbs) (w1 :: Types.Tfbs) ->
                 case w of ww { Types.Tfbs ww1 ww2 ->
                 case w1 of ww3 { Types.Tfbs ww4 ww5 ->
                 Types.$w$c<= ww1 ww2 ww4 ww5 } }) -}
a072f6d238ac5e449aeaa2a33683da36
  $fOrdLocus_$c<=1 :: Types.Gene -> Types.Gene -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U,U,U)><S,1*U(U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Gene) (y :: Types.Gene) ->
                 case Types.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
3a1ffa0ff8e7c5056897e544d9829245
  $fOrdLocus_$c<=2 :: Types.Locus -> Types.Locus -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Locus) (b :: Types.Locus) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.<=} True True} case a of wild {
                                                                                            Types.Transposon
                                                                                            -> case b of wild1 { DEFAULT ->
                                                                                               GHC.Types.True }
                                                                                            Types.CGene a1
                                                                                            -> case b of wild1 {
                                                                                                 Types.Transposon
                                                                                                 -> GHC.Types.False
                                                                                                 Types.CGene b1
                                                                                                 -> Types.$fOrdLocus_$c<=1
                                                                                                      a1
                                                                                                      b1
                                                                                                 Types.CTfbs ipv
                                                                                                 -> GHC.Types.True }
                                                                                            Types.CTfbs a1
                                                                                            -> case b of wild1 {
                                                                                                 DEFAULT
                                                                                                 -> GHC.Types.False
                                                                                                 Types.CTfbs b1
                                                                                                 -> Types.$fOrdLocus_$c<=
                                                                                                      a1
                                                                                                      b1 } }) -}
3a1ffa0ff8e7c5056897e544d9829245
  $fOrdLocus_$c> :: Types.Locus -> Types.Locus -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Locus) (b :: Types.Locus) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.>} True True} case a of wild {
                                                                                           Types.Transposon
                                                                                           -> case b of wild1 { DEFAULT ->
                                                                                              GHC.Types.False }
                                                                                           Types.CGene a1
                                                                                           -> case b of wild1 {
                                                                                                Types.Transposon
                                                                                                -> GHC.Types.True
                                                                                                Types.CGene b1
                                                                                                -> Types.$fOrdLocus_$c>2
                                                                                                     a1
                                                                                                     b1
                                                                                                Types.CTfbs ipv
                                                                                                -> GHC.Types.False }
                                                                                           Types.CTfbs a1
                                                                                           -> case b of wild1 {
                                                                                                DEFAULT
                                                                                                -> GHC.Types.True
                                                                                                Types.CTfbs b1
                                                                                                -> Types.$fOrdLocus_$c>1
                                                                                                     a1
                                                                                                     b1 } }) -}
1dea3bc58315922227e05d4377f1eea5
  $fOrdLocus_$c>1 :: Types.Tfbs -> Types.Tfbs -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U,U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Tfbs) (w1 :: Types.Tfbs) ->
                 case w of ww { Types.Tfbs ww1 ww2 ->
                 case w1 of ww3 { Types.Tfbs ww4 ww5 ->
                 Types.$w$c> ww1 ww2 ww4 ww5 } }) -}
a072f6d238ac5e449aeaa2a33683da36
  $fOrdLocus_$c>2 :: Types.Gene -> Types.Gene -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U,U,U)><S,1*U(U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Gene) (y :: Types.Gene) ->
                 case Types.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
3a1ffa0ff8e7c5056897e544d9829245
  $fOrdLocus_$c>= :: Types.Locus -> Types.Locus -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Locus) (b :: Types.Locus) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.>=} True True} case a of wild {
                                                                                            Types.Transposon
                                                                                            -> case b of wild1 {
                                                                                                 DEFAULT
                                                                                                 -> GHC.Types.False
                                                                                                 Types.Transposon
                                                                                                 -> GHC.Types.True }
                                                                                            Types.CGene a1
                                                                                            -> case b of wild1 {
                                                                                                 Types.Transposon
                                                                                                 -> GHC.Types.True
                                                                                                 Types.CGene b1
                                                                                                 -> Types.$fOrdLocus_$c>=2
                                                                                                      a1
                                                                                                      b1
                                                                                                 Types.CTfbs ipv
                                                                                                 -> GHC.Types.False }
                                                                                            Types.CTfbs a1
                                                                                            -> case b of wild1 {
                                                                                                 DEFAULT
                                                                                                 -> GHC.Types.True
                                                                                                 Types.CTfbs b1
                                                                                                 -> Types.$fOrdLocus_$c>=1
                                                                                                      a1
                                                                                                      b1 } }) -}
1dea3bc58315922227e05d4377f1eea5
  $fOrdLocus_$c>=1 :: Types.Tfbs -> Types.Tfbs -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U,U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Tfbs) (w1 :: Types.Tfbs) ->
                 case w of ww { Types.Tfbs ww1 ww2 ->
                 case w1 of ww3 { Types.Tfbs ww4 ww5 ->
                 Types.$w$c>= ww1 ww2 ww4 ww5 } }) -}
a072f6d238ac5e449aeaa2a33683da36
  $fOrdLocus_$c>=2 :: Types.Gene -> Types.Gene -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U,U,U)><S,1*U(U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Types.Gene) (y :: Types.Gene) ->
                 case Types.$fOrdLocus_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
a072f6d238ac5e449aeaa2a33683da36
  $fOrdLocus_$ccompare ::
    Types.Gene -> Types.Gene -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,1*U(U,U,U)><S,1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Gene) (w1 :: Types.Gene) ->
                 case w of ww { Types.Gene ww1 ww2 ww3 ->
                 case w1 of ww4 { Types.Gene ww5 ww6 ww7 ->
                 Types.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
3a1ffa0ff8e7c5056897e544d9829245
  $fOrdLocus_$ccompare1 ::
    Types.Locus -> Types.Locus -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.Locus) (b :: Types.Locus) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.compare} True True} case a of wild {
                                                                                                 Types.Transposon
                                                                                                 -> case b of wild1 {
                                                                                                      DEFAULT
                                                                                                      -> GHC.Types.LT
                                                                                                      Types.Transposon
                                                                                                      -> GHC.Types.EQ }
                                                                                                 Types.CGene a1
                                                                                                 -> case b of wild1 {
                                                                                                      Types.Transposon
                                                                                                      -> GHC.Types.GT
                                                                                                      Types.CGene b1
                                                                                                      -> Types.$fOrdLocus_$ccompare
                                                                                                           a1
                                                                                                           b1
                                                                                                      Types.CTfbs ipv
                                                                                                      -> GHC.Types.LT }
                                                                                                 Types.CTfbs a1
                                                                                                 -> case b of wild1 {
                                                                                                      DEFAULT
                                                                                                      -> GHC.Types.GT
                                                                                                      Types.CTfbs b1
                                                                                                      -> Types.$fOrdLocus_$ccompare2
                                                                                                           a1
                                                                                                           b1 } }) -}
1dea3bc58315922227e05d4377f1eea5
  $fOrdLocus_$ccompare2 ::
    Types.Tfbs -> Types.Tfbs -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,1*U(U,U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Tfbs) (w1 :: Types.Tfbs) ->
                 case w of ww { Types.Tfbs ww1 ww2 ->
                 case w1 of ww3 { Types.Tfbs ww4 ww5 ->
                 Types.$w$ccompare1 ww1 ww2 ww4 ww5 } }) -}
3a1ffa0ff8e7c5056897e544d9829245
  $fOrdLocus_$cmax :: Types.Locus -> Types.Locus -> Types.Locus
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Types.Locus) (y :: Types.Locus) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.<=} True False} case x of wild {
                                                                                             Types.Transposon
                                                                                             -> y
                                                                                             Types.CGene a1
                                                                                             -> case y of wild1 {
                                                                                                  Types.Transposon
                                                                                                  -> wild
                                                                                                  Types.CGene b1
                                                                                                  -> case {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.<=} False True} Types.$fOrdLocus_$c<=1
                                                                                                                                                                                      a1
                                                                                                                                                                                      b1 of wild2 {
                                                                                                       GHC.Types.False
                                                                                                       -> wild
                                                                                                       GHC.Types.True
                                                                                                       -> wild1 }
                                                                                                  Types.CTfbs ipv
                                                                                                  -> wild1 }
                                                                                             Types.CTfbs a1
                                                                                             -> case y of wild1 {
                                                                                                  DEFAULT
                                                                                                  -> wild
                                                                                                  Types.CTfbs b1
                                                                                                  -> case {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.<=} False True} Types.$fOrdLocus_$c<=
                                                                                                                                                                                      a1
                                                                                                                                                                                      b1 of wild2 {
                                                                                                       GHC.Types.False
                                                                                                       -> wild
                                                                                                       GHC.Types.True
                                                                                                       -> wild1 } } }) -}
3a1ffa0ff8e7c5056897e544d9829245
  $fOrdLocus_$cmin :: Types.Locus -> Types.Locus -> Types.Locus
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Types.Locus) (y :: Types.Locus) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.<=} True False} case x of wild {
                                                                                             Types.Transposon
                                                                                             -> case y of wild1 { DEFAULT ->
                                                                                                Types.Transposon }
                                                                                             Types.CGene a1
                                                                                             -> case y of wild1 {
                                                                                                  Types.Transposon
                                                                                                  -> Types.Transposon
                                                                                                  Types.CGene b1
                                                                                                  -> case {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.<=} False True} Types.$fOrdLocus_$c<=1
                                                                                                                                                                                      a1
                                                                                                                                                                                      b1 of wild2 {
                                                                                                       GHC.Types.False
                                                                                                       -> wild1
                                                                                                       GHC.Types.True
                                                                                                       -> wild }
                                                                                                  Types.CTfbs ipv
                                                                                                  -> wild }
                                                                                             Types.CTfbs a1
                                                                                             -> case y of wild1 {
                                                                                                  DEFAULT
                                                                                                  -> wild1
                                                                                                  Types.CTfbs b1
                                                                                                  -> case {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.<=} False True} Types.$fOrdLocus_$c<=
                                                                                                                                                                                      a1
                                                                                                                                                                                      b1 of wild2 {
                                                                                                       GHC.Types.False
                                                                                                       -> wild1
                                                                                                       GHC.Types.True
                                                                                                       -> wild } } }) -}
1dea3bc58315922227e05d4377f1eea5
  $fOrdTfbs :: GHC.Classes.Ord Types.Tfbs
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Tfbs
                  Types.$fEqTfbs
                  Types.$fOrdLocus_$ccompare2
                  Types.$fOrdLocus_$c<1
                  Types.$fOrdLocus_$c<=
                  Types.$fOrdLocus_$c>1
                  Types.$fOrdLocus_$c>=1
                  Types.$fOrdTfbs_$cmax
                  Types.$fOrdTfbs_$cmin -}
1dea3bc58315922227e05d4377f1eea5
  $fOrdTfbs_$cmax :: Types.Tfbs -> Types.Tfbs -> Types.Tfbs
  {- Arity: 2, Strictness: <S,1*U(U,U)><S,1*U(U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Tfbs) (w1 :: Types.Tfbs) ->
                 case w of ww { Types.Tfbs ww1 ww2 ->
                 case w1 of ww3 { Types.Tfbs ww4 ww5 ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.<=} True False} case {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.<=} False True} Types.$fOrdID7
                                                                                                                                                                            ww1
                                                                                                                                                                              `cast`
                                                                                                                                                                            (Types.N:ID[0])
                                                                                                                                                                            ww4
                                                                                                                                                                              `cast`
                                                                                                                                                                            (Types.N:ID[0]) of wild {
                                                                                             GHC.Types.LT
                                                                                             -> Types.Tfbs
                                                                                                  ww4
                                                                                                  ww5
                                                                                             GHC.Types.EQ
                                                                                             -> case {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.<=} False True} Types.$fOrdWeight5
                                                                                                                                                                                 ww2
                                                                                                                                                                                   `cast`
                                                                                                                                                                                 (Types.N:Weight[0])
                                                                                                                                                                                 ww5
                                                                                                                                                                                   `cast`
                                                                                                                                                                                 (Types.N:Weight[0]) of wild1 {
                                                                                                  GHC.Types.False
                                                                                                  -> Types.Tfbs
                                                                                                       ww1
                                                                                                       ww2
                                                                                                  GHC.Types.True
                                                                                                  -> Types.Tfbs
                                                                                                       ww4
                                                                                                       ww5 }
                                                                                             GHC.Types.GT
                                                                                             -> Types.Tfbs
                                                                                                  ww1
                                                                                                  ww2 } } }) -}
1dea3bc58315922227e05d4377f1eea5
  $fOrdTfbs_$cmin :: Types.Tfbs -> Types.Tfbs -> Types.Tfbs
  {- Arity: 2, Strictness: <S,1*U(U,U)><S,1*U(U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Tfbs) (w1 :: Types.Tfbs) ->
                 case w of ww { Types.Tfbs ww1 ww2 ->
                 case w1 of ww3 { Types.Tfbs ww4 ww5 ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.<=} True False} case {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.<=} False True} Types.$fOrdID7
                                                                                                                                                                            ww1
                                                                                                                                                                              `cast`
                                                                                                                                                                            (Types.N:ID[0])
                                                                                                                                                                            ww4
                                                                                                                                                                              `cast`
                                                                                                                                                                            (Types.N:ID[0]) of wild {
                                                                                             GHC.Types.LT
                                                                                             -> Types.Tfbs
                                                                                                  ww1
                                                                                                  ww2
                                                                                             GHC.Types.EQ
                                                                                             -> case {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.<=} False True} Types.$fOrdWeight5
                                                                                                                                                                                 ww2
                                                                                                                                                                                   `cast`
                                                                                                                                                                                 (Types.N:Weight[0])
                                                                                                                                                                                 ww5
                                                                                                                                                                                   `cast`
                                                                                                                                                                                 (Types.N:Weight[0]) of wild1 {
                                                                                                  GHC.Types.False
                                                                                                  -> Types.Tfbs
                                                                                                       ww4
                                                                                                       ww5
                                                                                                  GHC.Types.True
                                                                                                  -> Types.Tfbs
                                                                                                       ww1
                                                                                                       ww2 }
                                                                                             GHC.Types.GT
                                                                                             -> Types.Tfbs
                                                                                                  ww4
                                                                                                  ww5 } } }) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fOrdThres :: GHC.Classes.Ord Types.Thres
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Thres
                  Types.$fEqThres
                  Types.$fOrdThres_$ccompare
                  Types.$fOrdThres_$c<
                  Types.$fOrdThres_$c<=
                  Types.$fOrdThres_$c>
                  Types.$fOrdThres_$c>=
                  Types.$fOrdThres_$cmax
                  Types.$fOrdThres_$cmin -}
ee98ceccbd3125283f1a4c0b1dc090d2
  $fOrdThres1 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.min} True True} GHC.Classes.$fOrdInt_$cmin) -}
e985ebba39f3f5eaf07a5a35d717ea71
  $fOrdThres2 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.max} True True} GHC.Classes.$fOrdInt_$cmax) -}
2b254799b75877e6ce32b68bc96da421
  $fOrdThres3 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.>=} True True} GHC.Classes.geInt) -}
83483357b774e1724b0f8661ce0fc25c
  $fOrdThres4 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.>} True True} GHC.Classes.gtInt) -}
60cd852a450f380f335b72dd7cf35d58
  $fOrdThres5 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.<=} True True} GHC.Classes.leInt) -}
ed101faf29d53dbec5845619a7df81e6
  $fOrdThres6 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.<} True True} GHC.Classes.ltInt) -}
71d30b36099af8837c8801cf920204b7
  $fOrdThres7 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Ordering
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.compare} True True} GHC.Classes.compareInt) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fOrdThres_$c< :: Types.Thres -> Types.Thres -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdThres6
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R <GHC.Types.Bool>_R) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fOrdThres_$c<= :: Types.Thres -> Types.Thres -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdThres5
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R <GHC.Types.Bool>_R) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fOrdThres_$c> :: Types.Thres -> Types.Thres -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdThres4
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R <GHC.Types.Bool>_R) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fOrdThres_$c>= :: Types.Thres -> Types.Thres -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdThres3
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R <GHC.Types.Bool>_R) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fOrdThres_$ccompare ::
    Types.Thres -> Types.Thres -> GHC.Types.Ordering
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdThres7
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R <GHC.Types.Ordering>_R) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fOrdThres_$cmax :: Types.Thres -> Types.Thres -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdThres2
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fOrdThres_$cmin :: Types.Thres -> Types.Thres -> Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdThres1
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])
                 ->_R Sym (Types.N:Thres[0])) -}
62e198601be4cac9703a7878d90fa463
  $fOrdWeight :: GHC.Classes.Ord Types.Weight
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Weight
                  Types.$fEqWeight
                  Types.$fOrdWeight_$ccompare
                  Types.$fOrdWeight_$c<
                  Types.$fOrdWeight_$c<=
                  Types.$fOrdWeight_$c>
                  Types.$fOrdWeight_$c>=
                  Types.$fOrdWeight_$cmax
                  Types.$fOrdWeight_$cmin -}
e814955ccc21de67dcd6b64449d72c48
  $fOrdWeight1 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.min} True True} GHC.Classes.$fOrdInt_$cmin) -}
aa7e137ec3516f0e5731087d69b11b35
  $fOrdWeight2 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.max} True True} GHC.Classes.$fOrdInt_$cmax) -}
a48447593961a221dc79c32cd5fd2b44
  $fOrdWeight3 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.>=} True True} GHC.Classes.geInt) -}
111944bda2b4d9a04111e1bbff696dad
  $fOrdWeight4 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.>} True True} GHC.Classes.gtInt) -}
d57c3364bb0f3ff7fecb79605870547f
  $fOrdWeight5 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.<=} True True} GHC.Classes.leInt) -}
9367d2f07ba0dba79dccf729cb69b57b
  $fOrdWeight6 :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.<} True True} GHC.Classes.ltInt) -}
12c2c35aff5ab539f7685b044e4b71da
  $fOrdWeight7 ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Ordering
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.compare} True True} GHC.Classes.compareInt) -}
62e198601be4cac9703a7878d90fa463
  $fOrdWeight_$c< :: Types.Weight -> Types.Weight -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdWeight6
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R <GHC.Types.Bool>_R) -}
62e198601be4cac9703a7878d90fa463
  $fOrdWeight_$c<= :: Types.Weight -> Types.Weight -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdWeight5
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R <GHC.Types.Bool>_R) -}
62e198601be4cac9703a7878d90fa463
  $fOrdWeight_$c> :: Types.Weight -> Types.Weight -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdWeight4
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R <GHC.Types.Bool>_R) -}
62e198601be4cac9703a7878d90fa463
  $fOrdWeight_$c>= :: Types.Weight -> Types.Weight -> GHC.Types.Bool
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdWeight3
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R <GHC.Types.Bool>_R) -}
62e198601be4cac9703a7878d90fa463
  $fOrdWeight_$ccompare ::
    Types.Weight -> Types.Weight -> GHC.Types.Ordering
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdWeight7
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R <GHC.Types.Ordering>_R) -}
62e198601be4cac9703a7878d90fa463
  $fOrdWeight_$cmax :: Types.Weight -> Types.Weight -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdWeight2
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])) -}
62e198601be4cac9703a7878d90fa463
  $fOrdWeight_$cmin :: Types.Weight -> Types.Weight -> Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fOrdWeight1
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])
                 ->_R Sym (Types.N:Weight[0])) -}
38df965694c57ea8a99df285579eb778
  $fReadAgent :: GHC.Read.Read Types.Agent
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Agent
                  Types.$fReadAgent_$creadsPrec
                  Types.$fReadAgent_$creadList
                  Types.$fReadAgent_$creadPrec
                  Types.$fReadAgent_$creadListPrec -}
38df965694c57ea8a99df285579eb778
  $fReadAgent1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Types.Agent] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readListPrec} True False} \ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                                                                                                       @ b
                                                                                                       (eta1 :: [Types.Agent]
                                                                                                                -> Text.ParserCombinators.ReadP.P
                                                                                                                     b) ->
                                                                                                     {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readListPrec} False True} GHC.Read.list1
                                                                                                                                                                                           @ Types.Agent
                                                                                                                                                                                           Types.$fReadAgent2
                                                                                                                                                                                             `cast`
                                                                                                                                                                                           (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                                                                                                                     <Types.Agent>_R))
                                                                                                                                                                                           eta
                                                                                                                                                                                           @ b
                                                                                                                                                                                           eta1) -}
38df965694c57ea8a99df285579eb778
  $fReadAgent2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.Agent
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readPrec} True True} GHC.Read.parens1
                                                                                                  @ Types.Agent
                                                                                                  Types.$fReadAgent3
                                                                                                    `cast`
                                                                                                  (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                            <Types.Agent>_R))) -}
38df965694c57ea8a99df285579eb778
  $fReadAgent3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.Agent
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: (\ (n :: Text.ParserCombinators.ReadPrec.Prec) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readPrec} False True} let {
                                                                                                   ds3 :: Text.ParserCombinators.ReadP.ReadP
                                                                                                            Types.Agent
                                                                                                   = {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readPrec} False True} case n of wild { GHC.Types.I# x ->
                                                                                                                                                                                     case GHC.Prim.tagToEnum#
                                                                                                                                                                                            @ GHC.Types.Bool
                                                                                                                                                                                            (GHC.Prim.<=#
                                                                                                                                                                                               x
                                                                                                                                                                                               11#) of wild2 {
                                                                                                                                                                                       GHC.Types.False
                                                                                                                                                                                       -> (Text.ParserCombinators.ReadP.pfail1
                                                                                                                                                                                             @ Types.Agent)
                                                                                                                                                                                            `cast`
                                                                                                                                                                                          (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                                                                                                    <Types.Agent>_R))
                                                                                                                                                                                       GHC.Types.True
                                                                                                                                                                                       -> Types.$fReadAgent5
                                                                                                                                                                                            `cast`
                                                                                                                                                                                          (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                                                                                                    <Types.Agent>_R)) } }
                                                                                                 } in
                                                                                                 (\ @ b
                                                                                                    (k :: Types.Agent
                                                                                                          -> Text.ParserCombinators.ReadP.P
                                                                                                               b) ->
                                                                                                  Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                                                                                    @ b
                                                                                                    ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readPrec} False True} let {
                                                                                                                                                                                       lvl81 :: Text.ParserCombinators.ReadP.P
                                                                                                                                                                                                  b
                                                                                                                                                                                       = let {
                                                                                                                                                                                           lvl82 :: Text.ParserCombinators.ReadP.P
                                                                                                                                                                                                      b
                                                                                                                                                                                           = k Types.NoAgent
                                                                                                                                                                                         } in
                                                                                                                                                                                         Text.Read.Lex.expect2
                                                                                                                                                                                           @ b
                                                                                                                                                                                           (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                                                                                                                                                                            case a1 of wild {
                                                                                                                                                                                              DEFAULT
                                                                                                                                                                                              -> Text.ParserCombinators.ReadP.Fail
                                                                                                                                                                                                   @ b
                                                                                                                                                                                              Text.Read.Lex.Ident a2
                                                                                                                                                                                              -> case GHC.Base.eqString
                                                                                                                                                                                                        a2
                                                                                                                                                                                                        Types.$fReadAgent4 of wild1 {
                                                                                                                                                                                                   GHC.Types.False
                                                                                                                                                                                                   -> Text.ParserCombinators.ReadP.Fail
                                                                                                                                                                                                        @ b
                                                                                                                                                                                                   GHC.Types.True
                                                                                                                                                                                                   -> lvl82 } })
                                                                                                                                                                                     } in
                                                                                                                                                                                     let {
                                                                                                                                                                                       k1 :: ()
                                                                                                                                                                                             -> Text.ParserCombinators.ReadP.P
                                                                                                                                                                                                  b
                                                                                                                                                                                         {- Arity: 1,
                                                                                                                                                                                            Strictness: <L,A>,
                                                                                                                                                                                            Inline: INLINE[0],
                                                                                                                                                                                            Unfolding: InlineRule (1,
                                                                                                                                                                                                                   True,
                                                                                                                                                                                                                   True)
                                                                                                                                                                                                       (\ (w4 :: ()) ->
                                                                                                                                                                                                        lvl81) -}
                                                                                                                                                                                       = \ (w4 :: ()) ->
                                                                                                                                                                                         lvl81
                                                                                                                                                                                     } in
                                                                                                                                                                                     Text.ParserCombinators.ReadP.Look
                                                                                                                                                                                       @ b
                                                                                                                                                                                       (\ (a :: GHC.Base.String) ->
                                                                                                                                                                                        (Text.ParserCombinators.ReadP.skipSpaces_skip
                                                                                                                                                                                           a)
                                                                                                                                                                                          `cast`
                                                                                                                                                                                        (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                                                                                             <()>_R)
                                                                                                                                                                                          @ b
                                                                                                                                                                                          k1))
                                                                                                    (ds3
                                                                                                       `cast`
                                                                                                     (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                          <Types.Agent>_R)
                                                                                                       @ b
                                                                                                       k))
                                                                                                   `cast`
                                                                                                 (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                           <Types.Agent>_R))) -}
d587a8e7d107c5f5dd5ceb84a9ac5279
  $fReadAgent4 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readPrec} False True} GHC.CString.unpackCString#
                                                                                                   "NoAgent"#) -}
38df965694c57ea8a99df285579eb778
  $fReadAgent5 ::
    (Types.Agent -> Text.ParserCombinators.ReadP.P b1)
    -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 1 -}
38df965694c57ea8a99df285579eb778
  $fReadAgent6 :: Text.ParserCombinators.ReadP.P [Types.Agent]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readList} False True} Types.$fReadAgent1
                                                                                                   GHC.Read.$fRead()5
                                                                                                   @ [Types.Agent]
                                                                                                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                                                                                                      @ [Types.Agent])) -}
38df965694c57ea8a99df285579eb778
  $fReadAgent_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Types.Agent]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readList} True True} Text.ParserCombinators.ReadP.run
                                                                                                  @ [Types.Agent]
                                                                                                  Types.$fReadAgent6) -}
38df965694c57ea8a99df285579eb778
  $fReadAgent_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Types.Agent]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadAgent1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Types.Agent]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Types.Agent]>_R))) -}
38df965694c57ea8a99df285579eb778
  $fReadAgent_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Types.Agent
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadAgent2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Types.Agent>_R)) -}
38df965694c57ea8a99df285579eb778
  $fReadAgent_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Types.Agent
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Types.Agent
                   ((Types.$fReadAgent2 eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.Agent>_R)
                      @ Types.Agent
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Types.Agent))) -}
a072f6d238ac5e449aeaa2a33683da36
  $fReadGene :: GHC.Read.Read Types.Gene
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Gene
                  Types.$fReadGene_$creadsPrec
                  Types.$fReadGene_$creadList
                  Types.$fReadGene_$creadPrec
                  Types.$fReadGene_$creadListPrec -}
a072f6d238ac5e449aeaa2a33683da36
  $fReadGene1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Types.Gene] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readListPrec} True False} \ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                                                                                                       @ b
                                                                                                       (eta1 :: [Types.Gene]
                                                                                                                -> Text.ParserCombinators.ReadP.P
                                                                                                                     b) ->
                                                                                                     {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readListPrec} False True} GHC.Read.list1
                                                                                                                                                                                           @ Types.Gene
                                                                                                                                                                                           Types.$fReadGene2
                                                                                                                                                                                             `cast`
                                                                                                                                                                                           (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                                                                                                                     <Types.Gene>_R))
                                                                                                                                                                                           eta
                                                                                                                                                                                           @ b
                                                                                                                                                                                           eta1) -}
a072f6d238ac5e449aeaa2a33683da36
  $fReadGene2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.Gene
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readPrec} True True} GHC.Read.parens1
                                                                                                  @ Types.Gene
                                                                                                  Types.$fReadGene3
                                                                                                    `cast`
                                                                                                  (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                            <Types.Gene>_R))) -}
a072f6d238ac5e449aeaa2a33683da36
  $fReadGene3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.Gene
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec) ->
                 case w of ww { GHC.Types.I# ww1 -> Types.$w$creadPrec ww1 }) -}
a072f6d238ac5e449aeaa2a33683da36
  $fReadGene4 ::
    (Types.Gene -> Text.ParserCombinators.ReadP.P b1)
    -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 1 -}
a072f6d238ac5e449aeaa2a33683da36
  $fReadGene5 :: Text.ParserCombinators.ReadP.P [Types.Gene]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readList} False True} Types.$fReadGene1
                                                                                                   GHC.Read.$fRead()5
                                                                                                   @ [Types.Gene]
                                                                                                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                                                                                                      @ [Types.Gene])) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fReadGeneState :: GHC.Read.Read Types.GeneState
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.GeneState
                  Types.$fReadGeneState_$creadsPrec
                  Types.$fReadGeneState_$creadList
                  Types.$fReadGeneState_$creadPrec
                  Types.$fReadGeneState_$creadListPrec -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fReadGeneState1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Types.GeneState] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readListPrec} True False} \ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                                                                                                       @ b
                                                                                                       (eta1 :: [Types.GeneState]
                                                                                                                -> Text.ParserCombinators.ReadP.P
                                                                                                                     b) ->
                                                                                                     {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readListPrec} False True} GHC.Read.list1
                                                                                                                                                                                           @ Types.GeneState
                                                                                                                                                                                           Types.$fReadGeneState2
                                                                                                                                                                                             `cast`
                                                                                                                                                                                           (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                                                                                                                     <Types.GeneState>_R))
                                                                                                                                                                                           eta
                                                                                                                                                                                           @ b
                                                                                                                                                                                           eta1) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fReadGeneState2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.GeneState
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readPrec} True True} GHC.Read.parens1
                                                                                                  @ Types.GeneState
                                                                                                  Types.$fReadGeneState3
                                                                                                    `cast`
                                                                                                  (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                            <Types.GeneState>_R))) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fReadGeneState3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.GeneState
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec) ->
                 case w of ww { GHC.Types.I# ww1 -> Types.$w$creadPrec1 ww1 }) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fReadGeneState4 ::
    (Types.GeneState -> Text.ParserCombinators.ReadP.P b1)
    -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 1,
     Unfolding: (\ @ b1
                   (k1 :: Types.GeneState -> Text.ParserCombinators.ReadP.P b1) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readPrec} False True} let {
                                                                                                   lvl81 :: Text.ParserCombinators.ReadP.P
                                                                                                              b1
                                                                                                   = let {
                                                                                                       lvl82 :: Text.ParserCombinators.ReadP.P
                                                                                                                  b1
                                                                                                       = GHC.Read.$fReadBool3
                                                                                                           Types.$fReadGeneState6
                                                                                                           @ b1
                                                                                                           (\ (a1 :: GHC.Types.Bool) ->
                                                                                                            k1
                                                                                                              a1
                                                                                                                `cast`
                                                                                                              (Sym (Types.N:GeneState[0])))
                                                                                                     } in
                                                                                                     Text.Read.Lex.expect2
                                                                                                       @ b1
                                                                                                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                                                                                        case a1 of wild {
                                                                                                          DEFAULT
                                                                                                          -> Text.ParserCombinators.ReadP.Fail
                                                                                                               @ b1
                                                                                                          Text.Read.Lex.Ident a2
                                                                                                          -> case GHC.Base.eqString
                                                                                                                    a2
                                                                                                                    Types.$fReadGeneState5 of wild1 {
                                                                                                               GHC.Types.False
                                                                                                               -> Text.ParserCombinators.ReadP.Fail
                                                                                                                    @ b1
                                                                                                               GHC.Types.True
                                                                                                               -> lvl82 } })
                                                                                                 } in
                                                                                                 let {
                                                                                                   k :: ()
                                                                                                        -> Text.ParserCombinators.ReadP.P
                                                                                                             b1
                                                                                                     {- Arity: 1,
                                                                                                        Strictness: <L,A>,
                                                                                                        Inline: INLINE[0],
                                                                                                        Unfolding: InlineRule (1,
                                                                                                                               True,
                                                                                                                               True)
                                                                                                                   (\ (w4 :: ()) ->
                                                                                                                    lvl81) -}
                                                                                                   = \ (w4 :: ()) ->
                                                                                                     lvl81
                                                                                                 } in
                                                                                                 Text.ParserCombinators.ReadP.Look
                                                                                                   @ b1
                                                                                                   (\ (a :: GHC.Base.String) ->
                                                                                                    (Text.ParserCombinators.ReadP.skipSpaces_skip
                                                                                                       a)
                                                                                                      `cast`
                                                                                                    (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                         <()>_R)
                                                                                                      @ b1
                                                                                                      k)) -}
f18f561dc382fa85dbf026834836b383
  $fReadGeneState5 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readPrec} False True} GHC.CString.unpackCString#
                                                                                                   "GS"#) -}
ccaa8b7c183241f54712485cf055b5cb
  $fReadGeneState6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fReadGeneState7 ::
    Text.ParserCombinators.ReadP.P [Types.GeneState]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readList} False True} Types.$fReadGeneState1
                                                                                                   GHC.Read.$fRead()5
                                                                                                   @ [Types.GeneState]
                                                                                                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                                                                                                      @ [Types.GeneState])) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fReadGeneState_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Types.GeneState]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readList} True True} Text.ParserCombinators.ReadP.run
                                                                                                  @ [Types.GeneState]
                                                                                                  Types.$fReadGeneState7) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fReadGeneState_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Types.GeneState]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadGeneState1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Types.GeneState]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Types.GeneState]>_R))) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fReadGeneState_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Types.GeneState
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadGeneState2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Types.GeneState>_R)) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fReadGeneState_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Types.GeneState
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Types.GeneState
                   ((Types.$fReadGeneState2 eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.GeneState>_R)
                      @ Types.GeneState
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Types.GeneState))) -}
a072f6d238ac5e449aeaa2a33683da36
  $fReadGene_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Types.Gene]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readList} True True} Text.ParserCombinators.ReadP.run
                                                                                                  @ [Types.Gene]
                                                                                                  Types.$fReadGene5) -}
a072f6d238ac5e449aeaa2a33683da36
  $fReadGene_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Types.Gene]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadGene1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Types.Gene]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Types.Gene]>_R))) -}
a072f6d238ac5e449aeaa2a33683da36
  $fReadGene_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Types.Gene
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadGene2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Types.Gene>_R)) -}
a072f6d238ac5e449aeaa2a33683da36
  $fReadGene_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Types.Gene
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Types.Gene
                   ((Types.$fReadGene2 eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.Gene>_R)
                      @ Types.Gene
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Types.Gene))) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fReadID :: GHC.Read.Read Types.ID
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.ID
                  Types.$fReadID_$creadsPrec
                  Types.$fReadID_$creadList
                  Types.$fReadID_$creadPrec
                  Types.$fReadID_$creadListPrec -}
11cf07ccdff9acbf576dc2c8351e445c
  $fReadID1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Types.ID] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readListPrec} True False} \ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                                                                                                       @ b
                                                                                                       (eta1 :: [Types.ID]
                                                                                                                -> Text.ParserCombinators.ReadP.P
                                                                                                                     b) ->
                                                                                                     {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readListPrec} False True} GHC.Read.list1
                                                                                                                                                                                           @ Types.ID
                                                                                                                                                                                           Types.$fReadID2
                                                                                                                                                                                             `cast`
                                                                                                                                                                                           (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                                                                                                                     <Types.ID>_R))
                                                                                                                                                                                           eta
                                                                                                                                                                                           @ b
                                                                                                                                                                                           eta1) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fReadID2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.ID
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readPrec} True True} GHC.Read.parens1
                                                                                                  @ Types.ID
                                                                                                  Types.$fReadID3
                                                                                                    `cast`
                                                                                                  (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                            <Types.ID>_R))) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fReadID3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.ID
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec) ->
                 case w of ww { GHC.Types.I# ww1 -> Types.$w$creadPrec2 ww1 }) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fReadID4 ::
    (Types.ID -> Text.ParserCombinators.ReadP.P b1)
    -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 1,
     Unfolding: (\ @ b1
                   (k1 :: Types.ID -> Text.ParserCombinators.ReadP.P b1) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readPrec} False True} let {
                                                                                                   lvl81 :: Text.ParserCombinators.ReadP.P
                                                                                                              b1
                                                                                                   = let {
                                                                                                       lvl82 :: Text.ParserCombinators.ReadP.P
                                                                                                                  b1
                                                                                                       = GHC.Read.$fReadInt3
                                                                                                           GHC.Read.$fReadInt_$sconvertInt
                                                                                                           Types.$fReadGeneState6
                                                                                                           @ b1
                                                                                                           (\ (a1 :: GHC.Types.Int) ->
                                                                                                            k1
                                                                                                              a1
                                                                                                                `cast`
                                                                                                              (Sym (Types.N:ID[0])))
                                                                                                     } in
                                                                                                     Text.Read.Lex.expect2
                                                                                                       @ b1
                                                                                                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                                                                                        case a1 of wild {
                                                                                                          DEFAULT
                                                                                                          -> Text.ParserCombinators.ReadP.Fail
                                                                                                               @ b1
                                                                                                          Text.Read.Lex.Ident a2
                                                                                                          -> case GHC.Base.eqString
                                                                                                                    a2
                                                                                                                    Types.$fReadID5 of wild1 {
                                                                                                               GHC.Types.False
                                                                                                               -> Text.ParserCombinators.ReadP.Fail
                                                                                                                    @ b1
                                                                                                               GHC.Types.True
                                                                                                               -> lvl82 } })
                                                                                                 } in
                                                                                                 let {
                                                                                                   k :: ()
                                                                                                        -> Text.ParserCombinators.ReadP.P
                                                                                                             b1
                                                                                                     {- Arity: 1,
                                                                                                        Strictness: <L,A>,
                                                                                                        Inline: INLINE[0],
                                                                                                        Unfolding: InlineRule (1,
                                                                                                                               True,
                                                                                                                               True)
                                                                                                                   (\ (w4 :: ()) ->
                                                                                                                    lvl81) -}
                                                                                                   = \ (w4 :: ()) ->
                                                                                                     lvl81
                                                                                                 } in
                                                                                                 Text.ParserCombinators.ReadP.Look
                                                                                                   @ b1
                                                                                                   (\ (a :: GHC.Base.String) ->
                                                                                                    (Text.ParserCombinators.ReadP.skipSpaces_skip
                                                                                                       a)
                                                                                                      `cast`
                                                                                                    (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                         <()>_R)
                                                                                                      @ b1
                                                                                                      k)) -}
1af5a03b1d7319eb3f35833b073b1add
  $fReadID5 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readPrec} False True} GHC.CString.unpackCString#
                                                                                                   "ID"#) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fReadID6 :: Text.ParserCombinators.ReadP.P [Types.ID]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readList} False True} Types.$fReadID1
                                                                                                   GHC.Read.$fRead()5
                                                                                                   @ [Types.ID]
                                                                                                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                                                                                                      @ [Types.ID])) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fReadID_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Types.ID]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readList} True True} Text.ParserCombinators.ReadP.run
                                                                                                  @ [Types.ID]
                                                                                                  Types.$fReadID6) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fReadID_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Types.ID]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadID1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <[Types.ID]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Types.ID]>_R))) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fReadID_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Types.ID
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadID2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Types.ID>_R)) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fReadID_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Types.ID
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Types.ID
                   ((Types.$fReadID2 eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.ID>_R)
                      @ Types.ID
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Types.ID))) -}
3a1ffa0ff8e7c5056897e544d9829245
  $fReadLocus :: GHC.Read.Read Types.Locus
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Locus
                  Types.$fReadLocus_$creadsPrec
                  Types.$fReadLocus_$creadList
                  Types.$fReadLocus_$creadPrec
                  Types.$fReadLocus_$creadListPrec -}
3a1ffa0ff8e7c5056897e544d9829245
  $fReadLocus1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Types.Locus] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readListPrec} True False} \ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                                                                                                       @ b
                                                                                                       (eta1 :: [Types.Locus]
                                                                                                                -> Text.ParserCombinators.ReadP.P
                                                                                                                     b) ->
                                                                                                     {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readListPrec} False True} GHC.Read.list1
                                                                                                                                                                                           @ Types.Locus
                                                                                                                                                                                           Types.$fReadLocus2
                                                                                                                                                                                             `cast`
                                                                                                                                                                                           (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                                                                                                                     <Types.Locus>_R))
                                                                                                                                                                                           eta
                                                                                                                                                                                           @ b
                                                                                                                                                                                           eta1) -}
3a1ffa0ff8e7c5056897e544d9829245
  $fReadLocus2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.Locus
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readPrec} True True} GHC.Read.parens1
                                                                                                  @ Types.Locus
                                                                                                  Types.$fReadLocus3
                                                                                                    `cast`
                                                                                                  (Trans
                                                                                                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                                                                                                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                      <Types.Locus>_R))
                                                                                                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                                 <Types.Locus>_R)))) -}
3a1ffa0ff8e7c5056897e544d9829245
  $fReadLocus3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Types.Locus -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U(U)><L,C(U)> -}
3a1ffa0ff8e7c5056897e544d9829245
  $fReadLocus4 :: Text.ParserCombinators.ReadP.P [Types.Locus]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readList} False True} Types.$fReadLocus1
                                                                                                   GHC.Read.$fRead()5
                                                                                                   @ [Types.Locus]
                                                                                                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                                                                                                      @ [Types.Locus])) -}
3a1ffa0ff8e7c5056897e544d9829245
  $fReadLocus_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Types.Locus]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readList} True True} Text.ParserCombinators.ReadP.run
                                                                                                  @ [Types.Locus]
                                                                                                  Types.$fReadLocus4) -}
3a1ffa0ff8e7c5056897e544d9829245
  $fReadLocus_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Types.Locus]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadLocus1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Types.Locus]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Types.Locus]>_R))) -}
3a1ffa0ff8e7c5056897e544d9829245
  $fReadLocus_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Types.Locus
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadLocus2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Types.Locus>_R)) -}
3a1ffa0ff8e7c5056897e544d9829245
  $fReadLocus_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Types.Locus
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Types.Locus
                   ((Types.$fReadLocus2 eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.Locus>_R)
                      @ Types.Locus
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Types.Locus))) -}
1dea3bc58315922227e05d4377f1eea5
  $fReadTfbs :: GHC.Read.Read Types.Tfbs
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Tfbs
                  Types.$fReadTfbs_$creadsPrec
                  Types.$fReadTfbs_$creadList
                  Types.$fReadTfbs_$creadPrec
                  Types.$fReadTfbs_$creadListPrec -}
1dea3bc58315922227e05d4377f1eea5
  $fReadTfbs1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Types.Tfbs] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readListPrec} True False} \ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                                                                                                       @ b
                                                                                                       (eta1 :: [Types.Tfbs]
                                                                                                                -> Text.ParserCombinators.ReadP.P
                                                                                                                     b) ->
                                                                                                     {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readListPrec} False True} GHC.Read.list1
                                                                                                                                                                                           @ Types.Tfbs
                                                                                                                                                                                           Types.$fReadTfbs2
                                                                                                                                                                                             `cast`
                                                                                                                                                                                           (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                                                                                                                     <Types.Tfbs>_R))
                                                                                                                                                                                           eta
                                                                                                                                                                                           @ b
                                                                                                                                                                                           eta1) -}
1dea3bc58315922227e05d4377f1eea5
  $fReadTfbs2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.Tfbs
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readPrec} True True} GHC.Read.parens1
                                                                                                  @ Types.Tfbs
                                                                                                  Types.$fReadTfbs3
                                                                                                    `cast`
                                                                                                  (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                            <Types.Tfbs>_R))) -}
1dea3bc58315922227e05d4377f1eea5
  $fReadTfbs3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.Tfbs
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec) ->
                 case w of ww { GHC.Types.I# ww1 -> Types.$w$creadPrec3 ww1 }) -}
1dea3bc58315922227e05d4377f1eea5
  $fReadTfbs4 ::
    (Types.Tfbs -> Text.ParserCombinators.ReadP.P b1)
    -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 1 -}
1dea3bc58315922227e05d4377f1eea5
  $fReadTfbs5 :: Text.ParserCombinators.ReadP.P [Types.Tfbs]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readList} False True} Types.$fReadTfbs1
                                                                                                   GHC.Read.$fRead()5
                                                                                                   @ [Types.Tfbs]
                                                                                                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                                                                                                      @ [Types.Tfbs])) -}
1dea3bc58315922227e05d4377f1eea5
  $fReadTfbs_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Types.Tfbs]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readList} True True} Text.ParserCombinators.ReadP.run
                                                                                                  @ [Types.Tfbs]
                                                                                                  Types.$fReadTfbs5) -}
1dea3bc58315922227e05d4377f1eea5
  $fReadTfbs_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Types.Tfbs]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadTfbs1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Types.Tfbs]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Types.Tfbs]>_R))) -}
1dea3bc58315922227e05d4377f1eea5
  $fReadTfbs_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Types.Tfbs
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadTfbs2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Types.Tfbs>_R)) -}
1dea3bc58315922227e05d4377f1eea5
  $fReadTfbs_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Types.Tfbs
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Types.Tfbs
                   ((Types.$fReadTfbs2 eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.Tfbs>_R)
                      @ Types.Tfbs
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Types.Tfbs))) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fReadThres :: GHC.Read.Read Types.Thres
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Thres
                  Types.$fReadThres_$creadsPrec
                  Types.$fReadThres_$creadList
                  Types.$fReadThres_$creadPrec
                  Types.$fReadThres_$creadListPrec -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fReadThres1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Types.Thres] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readListPrec} True False} \ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                                                                                                       @ b
                                                                                                       (eta1 :: [Types.Thres]
                                                                                                                -> Text.ParserCombinators.ReadP.P
                                                                                                                     b) ->
                                                                                                     {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readListPrec} False True} GHC.Read.list1
                                                                                                                                                                                           @ Types.Thres
                                                                                                                                                                                           Types.$fReadThres2
                                                                                                                                                                                             `cast`
                                                                                                                                                                                           (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                                                                                                                     <Types.Thres>_R))
                                                                                                                                                                                           eta
                                                                                                                                                                                           @ b
                                                                                                                                                                                           eta1) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fReadThres2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.Thres
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readPrec} True True} GHC.Read.parens1
                                                                                                  @ Types.Thres
                                                                                                  Types.$fReadThres3
                                                                                                    `cast`
                                                                                                  (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                            <Types.Thres>_R))) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fReadThres3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.Thres
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec) ->
                 case w of ww { GHC.Types.I# ww1 -> Types.$w$creadPrec4 ww1 }) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fReadThres4 ::
    (Types.Thres -> Text.ParserCombinators.ReadP.P b1)
    -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 1,
     Unfolding: (\ @ b1
                   (k1 :: Types.Thres -> Text.ParserCombinators.ReadP.P b1) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readPrec} False True} let {
                                                                                                   lvl81 :: Text.ParserCombinators.ReadP.P
                                                                                                              b1
                                                                                                   = let {
                                                                                                       lvl82 :: Text.ParserCombinators.ReadP.P
                                                                                                                  b1
                                                                                                       = GHC.Read.$fReadInt3
                                                                                                           GHC.Read.$fReadInt_$sconvertInt
                                                                                                           Types.$fReadGeneState6
                                                                                                           @ b1
                                                                                                           (\ (a1 :: GHC.Types.Int) ->
                                                                                                            k1
                                                                                                              a1
                                                                                                                `cast`
                                                                                                              (Sym (Types.N:Thres[0])))
                                                                                                     } in
                                                                                                     Text.Read.Lex.expect2
                                                                                                       @ b1
                                                                                                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                                                                                        case a1 of wild {
                                                                                                          DEFAULT
                                                                                                          -> Text.ParserCombinators.ReadP.Fail
                                                                                                               @ b1
                                                                                                          Text.Read.Lex.Ident a2
                                                                                                          -> case GHC.Base.eqString
                                                                                                                    a2
                                                                                                                    Types.$fReadThres5 of wild1 {
                                                                                                               GHC.Types.False
                                                                                                               -> Text.ParserCombinators.ReadP.Fail
                                                                                                                    @ b1
                                                                                                               GHC.Types.True
                                                                                                               -> lvl82 } })
                                                                                                 } in
                                                                                                 let {
                                                                                                   k :: ()
                                                                                                        -> Text.ParserCombinators.ReadP.P
                                                                                                             b1
                                                                                                     {- Arity: 1,
                                                                                                        Strictness: <L,A>,
                                                                                                        Inline: INLINE[0],
                                                                                                        Unfolding: InlineRule (1,
                                                                                                                               True,
                                                                                                                               True)
                                                                                                                   (\ (w4 :: ()) ->
                                                                                                                    lvl81) -}
                                                                                                   = \ (w4 :: ()) ->
                                                                                                     lvl81
                                                                                                 } in
                                                                                                 Text.ParserCombinators.ReadP.Look
                                                                                                   @ b1
                                                                                                   (\ (a :: GHC.Base.String) ->
                                                                                                    (Text.ParserCombinators.ReadP.skipSpaces_skip
                                                                                                       a)
                                                                                                      `cast`
                                                                                                    (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                         <()>_R)
                                                                                                      @ b1
                                                                                                      k)) -}
0824bc83e476872708776883cf136999
  $fReadThres5 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readPrec} False True} GHC.CString.unpackCString#
                                                                                                   "Thres"#) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fReadThres6 :: Text.ParserCombinators.ReadP.P [Types.Thres]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readList} False True} Types.$fReadThres1
                                                                                                   GHC.Read.$fRead()5
                                                                                                   @ [Types.Thres]
                                                                                                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                                                                                                      @ [Types.Thres])) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fReadThres_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Types.Thres]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readList} True True} Text.ParserCombinators.ReadP.run
                                                                                                  @ [Types.Thres]
                                                                                                  Types.$fReadThres6) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fReadThres_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Types.Thres]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadThres1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Types.Thres]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Types.Thres]>_R))) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fReadThres_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Types.Thres
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadThres2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Types.Thres>_R)) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fReadThres_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Types.Thres
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Types.Thres
                   ((Types.$fReadThres2 eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.Thres>_R)
                      @ Types.Thres
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Types.Thres))) -}
62e198601be4cac9703a7878d90fa463
  $fReadWeight :: GHC.Read.Read Types.Weight
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Weight
                  Types.$fReadWeight_$creadsPrec
                  Types.$fReadWeight_$creadList
                  Types.$fReadWeight_$creadPrec
                  Types.$fReadWeight_$creadListPrec -}
62e198601be4cac9703a7878d90fa463
  $fReadWeight1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Types.Weight] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readListPrec} True False} \ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                                                                                                       @ b
                                                                                                       (eta1 :: [Types.Weight]
                                                                                                                -> Text.ParserCombinators.ReadP.P
                                                                                                                     b) ->
                                                                                                     {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readListPrec} False True} GHC.Read.list1
                                                                                                                                                                                           @ Types.Weight
                                                                                                                                                                                           Types.$fReadWeight2
                                                                                                                                                                                             `cast`
                                                                                                                                                                                           (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                                                                                                                     <Types.Weight>_R))
                                                                                                                                                                                           eta
                                                                                                                                                                                           @ b
                                                                                                                                                                                           eta1) -}
62e198601be4cac9703a7878d90fa463
  $fReadWeight2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.Weight
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readPrec} True True} GHC.Read.parens1
                                                                                                  @ Types.Weight
                                                                                                  Types.$fReadWeight3
                                                                                                    `cast`
                                                                                                  (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                            <Types.Weight>_R))) -}
62e198601be4cac9703a7878d90fa463
  $fReadWeight3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.Weight
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec) ->
                 case w of ww { GHC.Types.I# ww1 -> Types.$w$creadPrec5 ww1 }) -}
62e198601be4cac9703a7878d90fa463
  $fReadWeight4 ::
    (Types.Weight -> Text.ParserCombinators.ReadP.P b1)
    -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 1,
     Unfolding: (\ @ b1
                   (k1 :: Types.Weight -> Text.ParserCombinators.ReadP.P b1) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readPrec} False True} let {
                                                                                                   lvl81 :: Text.ParserCombinators.ReadP.P
                                                                                                              b1
                                                                                                   = let {
                                                                                                       lvl82 :: Text.ParserCombinators.ReadP.P
                                                                                                                  b1
                                                                                                       = GHC.Read.$fReadInt3
                                                                                                           GHC.Read.$fReadInt_$sconvertInt
                                                                                                           Types.$fReadGeneState6
                                                                                                           @ b1
                                                                                                           (\ (a1 :: GHC.Types.Int) ->
                                                                                                            k1
                                                                                                              a1
                                                                                                                `cast`
                                                                                                              (Sym (Types.N:Weight[0])))
                                                                                                     } in
                                                                                                     Text.Read.Lex.expect2
                                                                                                       @ b1
                                                                                                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                                                                                        case a1 of wild {
                                                                                                          DEFAULT
                                                                                                          -> Text.ParserCombinators.ReadP.Fail
                                                                                                               @ b1
                                                                                                          Text.Read.Lex.Ident a2
                                                                                                          -> case GHC.Base.eqString
                                                                                                                    a2
                                                                                                                    Types.$fReadWeight5 of wild1 {
                                                                                                               GHC.Types.False
                                                                                                               -> Text.ParserCombinators.ReadP.Fail
                                                                                                                    @ b1
                                                                                                               GHC.Types.True
                                                                                                               -> lvl82 } })
                                                                                                 } in
                                                                                                 let {
                                                                                                   k :: ()
                                                                                                        -> Text.ParserCombinators.ReadP.P
                                                                                                             b1
                                                                                                     {- Arity: 1,
                                                                                                        Strictness: <L,A>,
                                                                                                        Inline: INLINE[0],
                                                                                                        Unfolding: InlineRule (1,
                                                                                                                               True,
                                                                                                                               True)
                                                                                                                   (\ (w4 :: ()) ->
                                                                                                                    lvl81) -}
                                                                                                   = \ (w4 :: ()) ->
                                                                                                     lvl81
                                                                                                 } in
                                                                                                 Text.ParserCombinators.ReadP.Look
                                                                                                   @ b1
                                                                                                   (\ (a :: GHC.Base.String) ->
                                                                                                    (Text.ParserCombinators.ReadP.skipSpaces_skip
                                                                                                       a)
                                                                                                      `cast`
                                                                                                    (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                         <()>_R)
                                                                                                      @ b1
                                                                                                      k)) -}
439b822d2d6fb8381c5991b4e5612d73
  $fReadWeight5 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readPrec} False True} GHC.CString.unpackCString#
                                                                                                   "Weight"#) -}
62e198601be4cac9703a7878d90fa463
  $fReadWeight6 :: Text.ParserCombinators.ReadP.P [Types.Weight]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readList} False True} Types.$fReadWeight1
                                                                                                   GHC.Read.$fRead()5
                                                                                                   @ [Types.Weight]
                                                                                                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                                                                                                      @ [Types.Weight])) -}
62e198601be4cac9703a7878d90fa463
  $fReadWeight_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Types.Weight]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readList} True True} Text.ParserCombinators.ReadP.run
                                                                                                  @ [Types.Weight]
                                                                                                  Types.$fReadWeight6) -}
62e198601be4cac9703a7878d90fa463
  $fReadWeight_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Types.Weight]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadWeight1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Types.Weight]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Types.Weight]>_R))) -}
62e198601be4cac9703a7878d90fa463
  $fReadWeight_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Types.Weight
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadWeight2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Types.Weight>_R)) -}
62e198601be4cac9703a7878d90fa463
  $fReadWeight_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Types.Weight
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Types.Weight
                   ((Types.$fReadWeight2 eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.Weight>_R)
                      @ Types.Weight
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Types.Weight))) -}
b7eab4f08821948fcc71d5d84aed42c0
  $fReadWorld :: GHC.Read.Read Types.World
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.World
                  Types.$fReadWorld_$creadsPrec
                  Types.$fReadWorld_$creadList
                  Types.$fReadWorld_$creadPrec
                  Types.$fReadWorld_$creadListPrec -}
b7eab4f08821948fcc71d5d84aed42c0
  $fReadWorld1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Types.World] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readListPrec} True False} \ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                                                                                                       @ b
                                                                                                       (eta1 :: [Types.World]
                                                                                                                -> Text.ParserCombinators.ReadP.P
                                                                                                                     b) ->
                                                                                                     {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readListPrec} False True} GHC.Read.list1
                                                                                                                                                                                           @ Types.World
                                                                                                                                                                                           Types.$fReadWorld2
                                                                                                                                                                                             `cast`
                                                                                                                                                                                           (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                                                                                                                     <Types.World>_R))
                                                                                                                                                                                           eta
                                                                                                                                                                                           @ b
                                                                                                                                                                                           eta1) -}
b7eab4f08821948fcc71d5d84aed42c0
  $fReadWorld2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.World
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readPrec} True True} GHC.Read.parens1
                                                                                                  @ Types.World
                                                                                                  Types.$fReadWorld3
                                                                                                    `cast`
                                                                                                  (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                                            <Types.World>_R))) -}
b7eab4f08821948fcc71d5d84aed42c0
  $fReadWorld3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Types.World
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec) ->
                 case w of ww { GHC.Types.I# ww1 -> Types.$w$creadPrec6 ww1 }) -}
b7eab4f08821948fcc71d5d84aed42c0
  $fReadWorld4 ::
    (Types.World -> Text.ParserCombinators.ReadP.P b1)
    -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 1 -}
b7eab4f08821948fcc71d5d84aed42c0
  $fReadWorld5 :: Text.ParserCombinators.ReadP.P [Types.World]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readList} False True} Types.$fReadWorld1
                                                                                                   GHC.Read.$fRead()5
                                                                                                   @ [Types.World]
                                                                                                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                                                                                                      @ [Types.World])) -}
b7eab4f08821948fcc71d5d84aed42c0
  $fReadWorld_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Types.World]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readList} True True} Text.ParserCombinators.ReadP.run
                                                                                                  @ [Types.World]
                                                                                                  Types.$fReadWorld5) -}
b7eab4f08821948fcc71d5d84aed42c0
  $fReadWorld_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Types.World]
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadWorld1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Types.World]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Types.World]>_R))) -}
b7eab4f08821948fcc71d5d84aed42c0
  $fReadWorld_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Types.World
  {- Unfolding: InlineRule (0, True, True)
                Types.$fReadWorld2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Types.World>_R)) -}
b7eab4f08821948fcc71d5d84aed42c0
  $fReadWorld_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Types.World
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Types.World
                   ((Types.$fReadWorld2 eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Types.World>_R)
                      @ Types.World
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Types.World))) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fRealGeneState :: GHC.Real.Real Types.GeneState
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.GeneState
                  Types.$fNumGeneState
                  Types.$fOrdGeneState
                  Types.$fRealGeneState_$ctoRational -}
00932bd97cbcd57691ba553a95ef2d08
  $fRealGeneState1 :: GHC.Real.Rational
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   Types.$fRealGeneState2
                   GHC.Real.$fEnumRatio1) -}
6ce0ac6d749335ff453dbbd1290706f7
  $fRealGeneState2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
9d0dded59316d657f51609efa6462cf9
  $fRealGeneState3 :: GHC.Real.Rational
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   Types.$fNumGeneState2
                   GHC.Real.$fEnumRatio1) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fRealGeneState_$ctoRational ::
    Types.GeneState -> GHC.Real.Rational
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.GeneState) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.toRational} True True} case ds
                                                                                                         `cast`
                                                                                                       (Types.N:GeneState[0]) of wild {
                                                                                                    GHC.Types.False
                                                                                                    -> Types.$fRealGeneState3
                                                                                                    GHC.Types.True
                                                                                                    -> Types.$fRealGeneState1 }) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fRealID :: GHC.Real.Real Types.ID
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.ID
                  Types.$fNumID
                  Types.$fOrdID
                  Types.$fRealID_$ctoRational -}
a777e7413a40a7e0c36a0868d76eee6c
  $fRealID1 :: GHC.Types.Int -> GHC.Real.Rational
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.toRational} True True} GHC.Real.$fEnumRatio_$ctoRational) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fRealID_$ctoRational :: Types.ID -> GHC.Real.Rational
  {- Unfolding: InlineRule (0, True, True)
                Types.$fRealID1
                  `cast`
                (Sym (Types.N:ID[0])
                 ->_R <GHC.Real.Ratio GHC.Integer.Type.Integer>_R) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fRealThres :: GHC.Real.Real Types.Thres
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Thres
                  Types.$fNumThres
                  Types.$fOrdThres
                  Types.$fRealThres_$ctoRational -}
d041894e9d00f8aa038fea59a6a4093b
  $fRealThres1 :: GHC.Types.Int -> GHC.Real.Rational
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.toRational} True True} GHC.Real.$fEnumRatio_$ctoRational) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fRealThres_$ctoRational :: Types.Thres -> GHC.Real.Rational
  {- Unfolding: InlineRule (0, True, True)
                Types.$fRealThres1
                  `cast`
                (Sym (Types.N:Thres[0])
                 ->_R <GHC.Real.Ratio GHC.Integer.Type.Integer>_R) -}
62e198601be4cac9703a7878d90fa463
  $fRealWeight :: GHC.Real.Real Types.Weight
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Weight
                  Types.$fNumWeight
                  Types.$fOrdWeight
                  Types.$fRealWeight_$ctoRational -}
bf840bc62d751777dacadc472c78e806
  $fRealWeight1 :: GHC.Types.Int -> GHC.Real.Rational
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.toRational} True True} GHC.Real.$fEnumRatio_$ctoRational) -}
62e198601be4cac9703a7878d90fa463
  $fRealWeight_$ctoRational :: Types.Weight -> GHC.Real.Rational
  {- Unfolding: InlineRule (0, True, True)
                Types.$fRealWeight1
                  `cast`
                (Sym (Types.N:Weight[0])
                 ->_R <GHC.Real.Ratio GHC.Integer.Type.Integer>_R) -}
38df965694c57ea8a99df285579eb778
  $fShowAgent :: GHC.Show.Show Types.Agent
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Agent
                  Types.$fShowAgent_$cshowsPrec
                  Types.$fShowAgent_$cshow
                  Types.$fShowAgent_$cshowList -}
38df965694c57ea8a99df285579eb778
  $fShowAgent1 :: Types.Agent -> GHC.Show.ShowS
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showList} False True} Types.$fShowAgent_$cshowsPrec
                                                                                                   Types.$fShowAgent2) -}
482c14b7852bb4953e7a5c2400ae9f9c
  $fShowAgent10 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                    "}"#) -}
d5c5c052323fb51c06b6fc538a8da487
  $fShowAgent11 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                    "wt = "#) -}
34656ce5f9a000d5e2fd78cdcdd8d888
  $fShowAgent12 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                    ", "#) -}
0bfbbefe987255150985124df551a139
  $fShowAgent13 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                    "tfbsID = "#) -}
311224c81d36306ec9b055736007d1dc
  $fShowAgent14 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                    "Tfbs {"#) -}
eee6891486ea771a0c870f109c0b4abd
  $fShowAgent15 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                    "Weight "#) -}
f8928dca8cad7891905b43c37b6e2939
  $fShowAgent16 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                    "ID "#) -}
1b511fd82c4a922a0c61ee65adffad21
  $fShowAgent17 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                    "CGene "#) -}
7cc8cf4f9e99c10c10c955cff8246468
  $fShowAgent18 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                    "}"#) -}
7da926b292d782928357429a02c02049
  $fShowAgent19 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                    "genSt = "#) -}
d143786deb7baabb13adf367a9d1ebc7
  $fShowAgent2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
d8ab8413df3bf1dcf11c3a5a700f14ea
  $fShowAgent20 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                    "thres = "#) -}
ca502dee56b83a74ba970bbdaab9cbaa
  $fShowAgent21 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                    ", "#) -}
7c2704db2c1153e72e31565429d54b6a
  $fShowAgent22 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                    "geneID = "#) -}
f84e6daea7b17bf5dcb4156d907c1557
  $fShowAgent23 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                    "Gene {"#) -}
cf88c3deffdb5dc24053a4ead8fb000a
  $fShowAgent24 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                    "GS "#) -}
adf0d1b9a9b24f6624cc0a644f4e3502
  $fShowAgent25 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                    "Thres "#) -}
21dbfcb29bcee0dcdf02eeefed1b8d53
  $fShowAgent26 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Types.$fShowAgent27) -}
0c2e71d388e387692389e824f41861ba
  $fShowAgent27 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                    "Transposon"#) -}
9c4384e68519c955b576a465a0aaed21
  $fShowAgent28 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                    "genome = "#) -}
494ded8ea6c5c0882c6ec746633b794a
  $fShowAgent29 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                    "Agent {"#) -}
6b13b87bc646b2287adc52177fc45cb9
  $fShowAgent3 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Types.$fShowAgent4) -}
dc5e94ff3e93ba40b28c91f5854f61db
  $fShowAgent4 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                    "NoAgent"#) -}
3d890e3300580b65e2757b8bd5219149
  $fShowAgent5 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                    "}"#) -}
955f091744f5ebd013314cfd273ff11a
  $fShowAgent6 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                    "geneStateTable = "#) -}
8cf863e7c7234b19d93d3447dba2f907
  $fShowAgent7 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                    ", "#) -}
3a1ffa0ff8e7c5056897e544d9829245
  $fShowAgent8 :: Types.Locus -> GHC.Show.ShowS
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showList} False True} Types.$fShowAgent_$cshowsPrec1
                                                                                                   Types.$fShowAgent2) -}
13b9d5d21d0eb5b83680949e1dbcb094
  $fShowAgent9 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                    "CTfbs "#) -}
38df965694c57ea8a99df285579eb778
  $fShowAgent_$cshow :: Types.Agent -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.Agent) ->
                 Types.$fShowAgent_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
38df965694c57ea8a99df285579eb778
  $fShowAgent_$cshowList :: [Types.Agent] -> GHC.Show.ShowS
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showList} True True} GHC.Show.showList__
                                                                                                  @ Types.Agent
                                                                                                  Types.$fShowAgent1) -}
3a1ffa0ff8e7c5056897e544d9829245
  $fShowAgent_$cshowList1 :: [Types.Locus] -> GHC.Show.ShowS
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showList} True True} GHC.Show.showList__
                                                                                                  @ Types.Locus
                                                                                                  Types.$fShowAgent8) -}
38df965694c57ea8a99df285579eb778
  $fShowAgent_$cshowsPrec ::
    GHC.Types.Int -> Types.Agent -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ (a :: GHC.Types.Int) (ds :: Types.Agent) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} True True} case ds of wild {
                                                                                                   Types.Agent b1 b2
                                                                                                   -> case a of wild1 { GHC.Types.I# x ->
                                                                                                      let {
                                                                                                        f :: GHC.Base.String
                                                                                                             -> GHC.Base.String
                                                                                                        = Data.Map.Base.$w$cshowsPrec
                                                                                                            @ Types.ID
                                                                                                            @ Types.GeneState
                                                                                                            Types.$fShowID
                                                                                                            Types.$fShowGeneState
                                                                                                            0#
                                                                                                            b2
                                                                                                      } in
                                                                                                      let {
                                                                                                        p :: GHC.Show.ShowS
                                                                                                          {- Arity: 1,
                                                                                                             Strictness: <L,1*U> -}
                                                                                                        = \ (x1 :: GHC.Base.String) ->
                                                                                                          GHC.Base.++
                                                                                                            @ GHC.Types.Char
                                                                                                            Types.$fShowAgent29
                                                                                                            (GHC.Base.++
                                                                                                               @ GHC.Types.Char
                                                                                                               Types.$fShowAgent28
                                                                                                               (GHC.Show.showList__
                                                                                                                  @ [Types.Locus]
                                                                                                                  Types.$fShowAgent_$cshowList1
                                                                                                                  b1
                                                                                                                  (GHC.Base.++
                                                                                                                     @ GHC.Types.Char
                                                                                                                     Types.$fShowAgent7
                                                                                                                     (GHC.Base.++
                                                                                                                        @ GHC.Types.Char
                                                                                                                        Types.$fShowAgent6
                                                                                                                        (f (GHC.Base.++
                                                                                                                              @ GHC.Types.Char
                                                                                                                              Types.$fShowAgent5
                                                                                                                              x1))))))
                                                                                                      } in
                                                                                                      case GHC.Prim.tagToEnum#
                                                                                                             @ GHC.Types.Bool
                                                                                                             (GHC.Prim.>=#
                                                                                                                x
                                                                                                                11#) of wild2 {
                                                                                                        GHC.Types.False
                                                                                                        -> p
                                                                                                        GHC.Types.True
                                                                                                        -> \ (x1 :: GHC.Base.String) ->
                                                                                                           GHC.Types.:
                                                                                                             @ GHC.Types.Char
                                                                                                             GHC.Show.shows7
                                                                                                             (p (GHC.Types.:
                                                                                                                   @ GHC.Types.Char
                                                                                                                   GHC.Show.shows4
                                                                                                                   x1)) } }
                                                                                                   Types.NoAgent
                                                                                                   -> Types.$fShowAgent3 }) -}
3a1ffa0ff8e7c5056897e544d9829245
  $fShowAgent_$cshowsPrec1 ::
    GHC.Types.Int -> Types.Locus -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ (ds :: GHC.Types.Int) (ds1 :: Types.Locus) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} True True} case ds1 of wild {
                                                                                                   Types.Transposon
                                                                                                   -> Types.$fShowAgent26
                                                                                                   Types.CGene b1
                                                                                                   -> case ds of wild1 { GHC.Types.I# x ->
                                                                                                      let {
                                                                                                        g :: GHC.Base.String
                                                                                                             -> GHC.Base.String
                                                                                                        = case b1 of ww { Types.Gene ww1 ww2 ww3 ->
                                                                                                          Types.$w$cshowsPrec3
                                                                                                            11#
                                                                                                            ww1
                                                                                                            ww2
                                                                                                            ww3 }
                                                                                                      } in
                                                                                                      case GHC.Prim.tagToEnum#
                                                                                                             @ GHC.Types.Bool
                                                                                                             (GHC.Prim.>=#
                                                                                                                x
                                                                                                                11#) of wild2 {
                                                                                                        GHC.Types.False
                                                                                                        -> \ (x1 :: GHC.Base.String) ->
                                                                                                           GHC.Base.++
                                                                                                             @ GHC.Types.Char
                                                                                                             Types.$fShowAgent17
                                                                                                             (g x1)
                                                                                                        GHC.Types.True
                                                                                                        -> \ (x1 :: GHC.Base.String) ->
                                                                                                           GHC.Types.:
                                                                                                             @ GHC.Types.Char
                                                                                                             GHC.Show.shows7
                                                                                                             (GHC.Base.++
                                                                                                                @ GHC.Types.Char
                                                                                                                Types.$fShowAgent17
                                                                                                                (g (GHC.Types.:
                                                                                                                      @ GHC.Types.Char
                                                                                                                      GHC.Show.shows4
                                                                                                                      x1))) } }
                                                                                                   Types.CTfbs b1
                                                                                                   -> case ds of wild1 { GHC.Types.I# x ->
                                                                                                      let {
                                                                                                        g :: GHC.Base.String
                                                                                                             -> GHC.Base.String
                                                                                                        = case b1 of ww { Types.Tfbs ww1 ww2 ->
                                                                                                          Types.$w$cshowsPrec
                                                                                                            11#
                                                                                                            ww1
                                                                                                            ww2 }
                                                                                                      } in
                                                                                                      case GHC.Prim.tagToEnum#
                                                                                                             @ GHC.Types.Bool
                                                                                                             (GHC.Prim.>=#
                                                                                                                x
                                                                                                                11#) of wild2 {
                                                                                                        GHC.Types.False
                                                                                                        -> \ (x1 :: GHC.Base.String) ->
                                                                                                           GHC.Base.++
                                                                                                             @ GHC.Types.Char
                                                                                                             Types.$fShowAgent9
                                                                                                             (g x1)
                                                                                                        GHC.Types.True
                                                                                                        -> \ (x1 :: GHC.Base.String) ->
                                                                                                           GHC.Types.:
                                                                                                             @ GHC.Types.Char
                                                                                                             GHC.Show.shows7
                                                                                                             (GHC.Base.++
                                                                                                                @ GHC.Types.Char
                                                                                                                Types.$fShowAgent9
                                                                                                                (g (GHC.Types.:
                                                                                                                      @ GHC.Types.Char
                                                                                                                      GHC.Show.shows4
                                                                                                                      x1))) } } }) -}
a072f6d238ac5e449aeaa2a33683da36
  $fShowGene :: GHC.Show.Show Types.Gene
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Gene
                  Types.$fShowGene_$cshowsPrec
                  Types.$fShowGene_$cshow
                  Types.$fShowGene_$cshowList -}
a072f6d238ac5e449aeaa2a33683da36
  $fShowGene1 :: Types.Gene -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Types.Gene) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showList} False True} case w of ww { Types.Gene ww1 ww2 ww3 ->
                                                                                                 Types.$w$cshowsPrec3
                                                                                                   0#
                                                                                                   ww1
                                                                                                   ww2
                                                                                                   ww3 }) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fShowGeneState :: GHC.Show.Show Types.GeneState
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.GeneState
                  Types.$fShowGeneState_$cshowsPrec
                  Types.$fShowGeneState_$cshow
                  Types.$fShowGeneState_$cshowList -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fShowGeneState1 :: Types.GeneState -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Types.GeneState) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showList} False True} Types.$w$cshowsPrec4
                                                                                                   0#
                                                                                                   w) -}
3c72b7e4dd86f568d34974bbc5143c28
  $fShowGeneState2 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.Base.++
                                                                                                    @ GHC.Types.Char
                                                                                                    GHC.Show.shows17
                                                                                                    (GHC.Types.[]
                                                                                                       @ GHC.Types.Char)) -}
c6449b9ddd11c6d38a1b3aaa4c5f8aa3
  $fShowGeneState3 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.Base.++
                                                                                                    @ GHC.Types.Char
                                                                                                    GHC.Show.shows18
                                                                                                    (GHC.Types.[]
                                                                                                       @ GHC.Types.Char)) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fShowGeneState_$cshow :: Types.GeneState -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: Types.GeneState) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} True False} {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.Base.++
                                                                                                                                                                                     @ GHC.Types.Char
                                                                                                                                                                                     Types.$fShowAgent24
                                                                                                                                                                                     (case x `cast`
                                                                                                                                                                                           (Types.N:GeneState[0]) of wild {
                                                                                                                                                                                        GHC.Types.False
                                                                                                                                                                                        -> Types.$fShowGeneState3
                                                                                                                                                                                        GHC.Types.True
                                                                                                                                                                                        -> Types.$fShowGeneState2 })) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fShowGeneState_$cshowList :: [Types.GeneState] -> GHC.Show.ShowS
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showList} True True} GHC.Show.showList__
                                                                                                  @ Types.GeneState
                                                                                                  Types.$fShowGeneState1) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $fShowGeneState_$cshowsPrec ::
    GHC.Types.Int -> Types.GeneState -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Types.GeneState) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec4 ww1 w1 }) -}
a072f6d238ac5e449aeaa2a33683da36
  $fShowGene_$cshow :: Types.Gene -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U),U(U),U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.Gene) ->
                 Types.$fShowGene_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a072f6d238ac5e449aeaa2a33683da36
  $fShowGene_$cshowList :: [Types.Gene] -> GHC.Show.ShowS
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showList} True True} GHC.Show.showList__
                                                                                                  @ Types.Gene
                                                                                                  Types.$fShowGene1) -}
a072f6d238ac5e449aeaa2a33683da36
  $fShowGene_$cshowsPrec ::
    GHC.Types.Int -> Types.Gene -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U(U),U(U),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Types.Gene) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.Gene ww3 ww4 ww5 ->
                 Types.$w$cshowsPrec3 ww1 ww3 ww4 ww5 } }) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fShowID :: GHC.Show.Show Types.ID
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.ID
                  Types.$fShowID_$cshowsPrec
                  Types.$fShowID_$cshow
                  Types.$fShowID_$cshowList -}
11cf07ccdff9acbf576dc2c8351e445c
  $fShowID1 :: Types.ID -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Types.ID) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showList} False True} Types.$w$cshowsPrec2
                                                                                                   0#
                                                                                                   w) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fShowID_$cshow :: Types.ID -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: (\ (x :: Types.ID) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} True False} {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.Base.++
                                                                                                                                                                                     @ GHC.Types.Char
                                                                                                                                                                                     Types.$fShowAgent16
                                                                                                                                                                                     (case x `cast`
                                                                                                                                                                                           (Types.N:ID[0]) of ww2 { GHC.Types.I# ww3 ->
                                                                                                                                                                                      case GHC.Show.$wshowSignedInt
                                                                                                                                                                                             11#
                                                                                                                                                                                             ww3
                                                                                                                                                                                             (GHC.Types.[]
                                                                                                                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                                                                                                                      GHC.Types.:
                                                                                                                                                                                        @ GHC.Types.Char
                                                                                                                                                                                        ww5
                                                                                                                                                                                        ww6 } })) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fShowID_$cshowList :: [Types.ID] -> GHC.Show.ShowS
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showList} True True} GHC.Show.showList__
                                                                                                  @ Types.ID
                                                                                                  Types.$fShowID1) -}
11cf07ccdff9acbf576dc2c8351e445c
  $fShowID_$cshowsPrec :: GHC.Types.Int -> Types.ID -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Types.ID) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec2 ww1 w1 }) -}
3a1ffa0ff8e7c5056897e544d9829245
  $fShowLocus :: GHC.Show.Show Types.Locus
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Locus
                  Types.$fShowAgent_$cshowsPrec1
                  Types.$fShowLocus_$cshow
                  Types.$fShowAgent_$cshowList1 -}
3a1ffa0ff8e7c5056897e544d9829245
  $fShowLocus_$cshow :: Types.Locus -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Types.Locus) ->
                 ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} True True} case x of wild {
                                                                                                    Types.Transposon
                                                                                                    -> Types.$fShowAgent26
                                                                                                    Types.CGene b1
                                                                                                    -> \ (x1 :: GHC.Base.String)[OneShot] ->
                                                                                                       GHC.Base.++
                                                                                                         @ GHC.Types.Char
                                                                                                         Types.$fShowAgent17
                                                                                                         (case b1 of ww { Types.Gene ww1 ww2 ww3 ->
                                                                                                          Types.$w$cshowsPrec3
                                                                                                            11#
                                                                                                            ww1
                                                                                                            ww2
                                                                                                            ww3
                                                                                                            x1 })
                                                                                                    Types.CTfbs b1
                                                                                                    -> \ (x1 :: GHC.Base.String)[OneShot] ->
                                                                                                       GHC.Base.++
                                                                                                         @ GHC.Types.Char
                                                                                                         Types.$fShowAgent9
                                                                                                         (case b1 of ww { Types.Tfbs ww1 ww2 ->
                                                                                                          Types.$w$cshowsPrec
                                                                                                            11#
                                                                                                            ww1
                                                                                                            ww2
                                                                                                            x1 }) })
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1dea3bc58315922227e05d4377f1eea5
  $fShowTfbs :: GHC.Show.Show Types.Tfbs
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Tfbs
                  Types.$fShowTfbs_$cshowsPrec
                  Types.$fShowTfbs_$cshow
                  Types.$fShowTfbs_$cshowList -}
1dea3bc58315922227e05d4377f1eea5
  $fShowTfbs1 :: Types.Tfbs -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Types.Tfbs) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showList} False True} case w of ww { Types.Tfbs ww1 ww2 ->
                                                                                                 Types.$w$cshowsPrec
                                                                                                   0#
                                                                                                   ww1
                                                                                                   ww2 }) -}
1dea3bc58315922227e05d4377f1eea5
  $fShowTfbs_$cshow :: Types.Tfbs -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U),U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.Tfbs) ->
                 Types.$fShowTfbs_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1dea3bc58315922227e05d4377f1eea5
  $fShowTfbs_$cshowList :: [Types.Tfbs] -> GHC.Show.ShowS
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showList} True True} GHC.Show.showList__
                                                                                                  @ Types.Tfbs
                                                                                                  Types.$fShowTfbs1) -}
1dea3bc58315922227e05d4377f1eea5
  $fShowTfbs_$cshowsPrec ::
    GHC.Types.Int -> Types.Tfbs -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U(U),U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Types.Tfbs) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.Tfbs ww3 ww4 ->
                 Types.$w$cshowsPrec ww1 ww3 ww4 } }) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fShowThres :: GHC.Show.Show Types.Thres
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Thres
                  Types.$fShowThres_$cshowsPrec
                  Types.$fShowThres_$cshow
                  Types.$fShowThres_$cshowList -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fShowThres1 :: Types.Thres -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Types.Thres) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showList} False True} Types.$w$cshowsPrec5
                                                                                                   0#
                                                                                                   w) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fShowThres_$cshow :: Types.Thres -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: (\ (x :: Types.Thres) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} True False} {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.Base.++
                                                                                                                                                                                     @ GHC.Types.Char
                                                                                                                                                                                     Types.$fShowAgent25
                                                                                                                                                                                     (case x `cast`
                                                                                                                                                                                           (Types.N:Thres[0]) of ww2 { GHC.Types.I# ww3 ->
                                                                                                                                                                                      case GHC.Show.$wshowSignedInt
                                                                                                                                                                                             11#
                                                                                                                                                                                             ww3
                                                                                                                                                                                             (GHC.Types.[]
                                                                                                                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                                                                                                                      GHC.Types.:
                                                                                                                                                                                        @ GHC.Types.Char
                                                                                                                                                                                        ww5
                                                                                                                                                                                        ww6 } })) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fShowThres_$cshowList :: [Types.Thres] -> GHC.Show.ShowS
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showList} True True} GHC.Show.showList__
                                                                                                  @ Types.Thres
                                                                                                  Types.$fShowThres1) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $fShowThres_$cshowsPrec ::
    GHC.Types.Int -> Types.Thres -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Types.Thres) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec5 ww1 w1 }) -}
62e198601be4cac9703a7878d90fa463
  $fShowWeight :: GHC.Show.Show Types.Weight
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Weight
                  Types.$fShowWeight_$cshowsPrec
                  Types.$fShowWeight_$cshow
                  Types.$fShowWeight_$cshowList -}
62e198601be4cac9703a7878d90fa463
  $fShowWeight1 :: Types.Weight -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Types.Weight) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showList} False True} Types.$w$cshowsPrec1
                                                                                                   0#
                                                                                                   w) -}
62e198601be4cac9703a7878d90fa463
  $fShowWeight_$cshow :: Types.Weight -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: (\ (x :: Types.Weight) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} True False} {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.Base.++
                                                                                                                                                                                     @ GHC.Types.Char
                                                                                                                                                                                     Types.$fShowAgent15
                                                                                                                                                                                     (case x `cast`
                                                                                                                                                                                           (Types.N:Weight[0]) of ww2 { GHC.Types.I# ww3 ->
                                                                                                                                                                                      case GHC.Show.$wshowSignedInt
                                                                                                                                                                                             11#
                                                                                                                                                                                             ww3
                                                                                                                                                                                             (GHC.Types.[]
                                                                                                                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                                                                                                                      GHC.Types.:
                                                                                                                                                                                        @ GHC.Types.Char
                                                                                                                                                                                        ww5
                                                                                                                                                                                        ww6 } })) -}
62e198601be4cac9703a7878d90fa463
  $fShowWeight_$cshowList :: [Types.Weight] -> GHC.Show.ShowS
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showList} True True} GHC.Show.showList__
                                                                                                  @ Types.Weight
                                                                                                  Types.$fShowWeight1) -}
62e198601be4cac9703a7878d90fa463
  $fShowWeight_$cshowsPrec ::
    GHC.Types.Int -> Types.Weight -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Types.Weight) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec1 ww1 w1 }) -}
b7eab4f08821948fcc71d5d84aed42c0
  $fShowWorld :: GHC.Show.Show Types.World
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.World
                  Types.$fShowWorld_$cshowsPrec
                  Types.$fShowWorld_$cshow
                  Types.$fShowWorld_$cshowList -}
b7eab4f08821948fcc71d5d84aed42c0
  $fShowWorld1 :: Types.World -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Types.World) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showList} False True} case w of ww { Types.World ww1 ww2 ->
                                                                                                 Types.$w$cshowsPrec6
                                                                                                   0#
                                                                                                   ww1
                                                                                                   ww2 }) -}
f927f7d6200858176e63e70c9cbe5122
  $fShowWorld2 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                    "World {"#) -}
25e6d888fe5bcd2d4f33cb7adcdc489b
  $fShowWorld3 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                    "}"#) -}
588e0e608db070fefb96ab9650c6f2fb
  $fShowWorld4 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                    "env = "#) -}
fcee7aed326b4572ac8e385087f4954b
  $fShowWorld5 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                    ", "#) -}
b79ca129e5d70354f9485a5a6943e680
  $fShowWorld6 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} False True} GHC.CString.unpackCString#
                                                                                                    "agents = "#) -}
b7eab4f08821948fcc71d5d84aed42c0
  $fShowWorld_$cshow :: Types.World -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U,U,U,U),U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.World) ->
                 Types.$fShowWorld_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b7eab4f08821948fcc71d5d84aed42c0
  $fShowWorld_$cshowList :: [Types.World] -> GHC.Show.ShowS
  {- Unfolding: ({__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showList} True True} GHC.Show.showList__
                                                                                                  @ Types.World
                                                                                                  Types.$fShowWorld1) -}
b7eab4f08821948fcc71d5d84aed42c0
  $fShowWorld_$cshowsPrec ::
    GHC.Types.Int -> Types.World -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U(U,U,U,U),U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Types.World) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.World ww3 ww4 ->
                 Types.$w$cshowsPrec6 ww1 ww3 ww4 } }) -}
a166392f4ef92dbc2d2e64f728852a4c
  $fShowWorld_$s$fShow(,) ::
    GHC.Show.Show (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, GHC.Types.Int)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Show.$fShowInt
                     GHC.Show.$fShowInt)
                  Types.$fShowWorld_$s$fShow(,)_$cshow
                  Types.$fShowWorld_$s$fShow(,)_$cshowList -}
85e8d410353d9eb3b78f3f7a0711ad07
  $fShowWorld_$s$fShow(,)_$cshow ::
    (GHC.Types.Int, GHC.Types.Int) -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U(U),U(U))>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: (GHC.Types.Int, GHC.Types.Int)) ->
                 GHC.Show.$fShow(,)_$cshowsPrec
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   GHC.Show.$fShowInt
                   GHC.Show.$fShowInt
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
69c54015924db37db637c9939cda0c32
  $fShowWorld_$s$fShow(,)_$cshowList ::
    [(GHC.Types.Int, GHC.Types.Int)] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [(GHC.Types.Int, GHC.Types.Int)])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Types.Int, GHC.Types.Int)
                   (GHC.Show.$fShow(,)_$cshowsPrec
                      @ GHC.Types.Int
                      @ GHC.Types.Int
                      GHC.Show.$fShowInt
                      GHC.Show.$fShowInt
                      GHC.Show.shows22)
                   eta
                   eta1) -}
2180e1761df0a66c29c35ac22706761f
  $s$fRead(,) :: GHC.Read.Read (GHC.Types.Int, GHC.Types.Int)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, GHC.Types.Int)
                  Types.$s$fRead(,)_$s$fRead(,)_$creadsPrec
                  Types.$s$fRead(,)_$s$fRead(,)_$creadList
                  (GHC.Read.$fRead(,)_$creadPrec
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Read.$fReadInt
                     GHC.Read.$fReadInt)
                  (GHC.Read.$fRead(,)_$creadListPrec
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Read.$fReadInt
                     GHC.Read.$fReadInt) -}
c88859db5a5a4c8c08091c0fb902e9ae
  $s$fRead(,)_$s$fRead(,)_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [(GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [(GHC.Types.Int, GHC.Types.Int)]
                   (GHC.Read.list1
                      @ (GHC.Types.Int, GHC.Types.Int)
                      (GHC.Read.$fRead(,)2
                         @ GHC.Types.Int
                         @ GHC.Types.Int
                         GHC.Read.$fReadInt
                         GHC.Read.$fReadInt)
                        `cast`
                      (Trans
                           (<Text.ParserCombinators.ReadPrec.Prec>_R
                            ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                          <(GHC.Types.Int, GHC.Types.Int)>_R))
                           (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                     <(GHC.Types.Int, GHC.Types.Int)>_R)))
                      GHC.Read.$fRead()5
                      @ [(GHC.Types.Int, GHC.Types.Int)]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [(GHC.Types.Int, GHC.Types.Int)]))) -}
012d5936101d052c53711808a2653e0a
  $s$fRead(,)_$s$fRead(,)_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (GHC.Types.Int, GHC.Types.Int)
                   (GHC.Read.$fRead(,)2
                      @ GHC.Types.Int
                      @ GHC.Types.Int
                      GHC.Read.$fReadInt
                      GHC.Read.$fReadInt
                      eta
                      @ (GHC.Types.Int, GHC.Types.Int)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (GHC.Types.Int, GHC.Types.Int)))) -}
58e4576fd9c440054f9caacf6e31064f
  $tc'Agent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   839279320842906340##
                   707951382388173215##
                   Types.$trModule
                   Types.$tc'Agent1) -}
0d925313341abe7522534217f8ef8533
  $tc'Agent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Agent"#) -}
f681e32be3bfb2c1e866a8f32342f2a9
  $tc'C:GeneType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4212993480235682705##
                   14689051677990417424##
                   Types.$trModule
                   Types.$tc'C:GeneType1) -}
5ce3ef0b91112db1fba5916325180c6e
  $tc'C:GeneType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:GeneType"#) -}
3a63c556caf998af5cfc7952540902a4
  $tc'CGene :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6599211984642108776##
                   550820287007366207##
                   Types.$trModule
                   Types.$tc'CGene1) -}
23d9e515fa4429b3f5db7c43725b0c8b
  $tc'CGene1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CGene"#) -}
b50ce84489fa954e3f4fc1535661e994
  $tc'CTfbs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12988852508376985116##
                   949220681602915995##
                   Types.$trModule
                   Types.$tc'CTfbs1) -}
6b7b0d6f9b8d55d0309fa30baa77acb4
  $tc'CTfbs1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CTfbs"#) -}
454b226521ae842115383ed44a438c46
  $tc'GS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4998659191392904128##
                   8665850685942714590##
                   Types.$trModule
                   Types.$tc'GS1) -}
deefae1e9943750ad0591452c499845a
  $tc'GS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'GS"#) -}
eb1fdbf0a786a3157374552425b29d63
  $tc'Gene :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17828553382386550894##
                   2649899743797725485##
                   Types.$trModule
                   Types.$tc'Gene1) -}
6b6887036f760dfe155192317c45bcd3
  $tc'Gene1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Gene"#) -}
c0d1dfd59e85dc90cccff0e482b38617
  $tc'ID :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2264469583022858954##
                   14375894833614567689##
                   Types.$trModule
                   Types.$tc'ID1) -}
328989687efff7ba0466bcce60e43fd2
  $tc'ID1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ID"#) -}
ae817556dd52a0a87805de29b8fcf0d1
  $tc'NoAgent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14331961163207382695##
                   7098551809445147503##
                   Types.$trModule
                   Types.$tc'NoAgent1) -}
515c660285abd6eb39a70296699826c1
  $tc'NoAgent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NoAgent"#) -}
b88b893d15032201cf4058a478b33b81
  $tc'Tfbs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12318017878671590970##
                   493355769914617752##
                   Types.$trModule
                   Types.$tc'Tfbs1) -}
78da715047deded21298509b5a8dbc7c
  $tc'Tfbs1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Tfbs"#) -}
d5d2514f1e89ba8d0c4cb3ced5238591
  $tc'Thres :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11461779979053961781##
                   15821572650089457226##
                   Types.$trModule
                   Types.$tc'Thres1) -}
9394b3d35886529c25cc1532f498859f
  $tc'Thres1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Thres"#) -}
d8b63297f40f1d60e5502ae191437848
  $tc'Transposon :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15139904072590515197##
                   520186587096760709##
                   Types.$trModule
                   Types.$tc'Transposon1) -}
b8e62dd0cbc73a9b0b4ffa7d304e6688
  $tc'Transposon1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Transposon"#) -}
4dc6c4a0bcd19035fd8e7c648ff056b2
  $tc'Weight :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17419325232877337191##
                   7499438509547317810##
                   Types.$trModule
                   Types.$tc'Weight1) -}
e2bcee75bba5efb2b3849502c201e59b
  $tc'Weight1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Weight"#) -}
0b8d8f7b90a834b20c42d8476c6a982c
  $tc'World :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3069931664322439719##
                   1835859365887003410##
                   Types.$trModule
                   Types.$tc'World1) -}
44d3e41c8b02139121c6e92425e0e3b4
  $tc'World1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'World"#) -}
d32e8f5c05ea65234da992e86c5b4768
  $tcAgent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10986159601741656507##
                   3055949379642964034##
                   Types.$trModule
                   Types.$tcAgent1) -}
b3a9a3faa154f28bd734c17b17560021
  $tcAgent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Agent"#) -}
2f0fe8acaee4b343acbc6f5d16e7c662
  $tcGene :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13737406393132724594##
                   10945487890674606552##
                   Types.$trModule
                   Types.$tcGene1) -}
6ad8ef4109861ee52d271afd060b6409
  $tcGene1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Gene"#) -}
c8e675d1f3954dbd23dccd43a32dd822
  $tcGeneState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4735124037855175204##
                   6520661589232249684##
                   Types.$trModule
                   Types.$tcGeneState1) -}
0e82f7247e2793227a83d9e6496e2439
  $tcGeneState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "GeneState"#) -}
1ee77ecc8983ee47d73c0a1dd8d1ff30
  $tcGeneType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2063259764092655278##
                   5383980767000751632##
                   Types.$trModule
                   Types.$tcGeneType1) -}
c541a605cf71cfd81b7c0acfc5071052
  $tcGeneType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "GeneType"#) -}
dfa7d790da81426aea7f74ef65cf426c
  $tcID :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5585541150733700751##
                   7391705528414916006##
                   Types.$trModule
                   Types.$tcID1) -}
b076d6c0daa6e38ead57e826653d4236
  $tcID1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ID"#) -}
39de691a927f58341e427ab99ace1fbb
  $tcLocus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2588112145452490589##
                   2558431216699026801##
                   Types.$trModule
                   Types.$tcLocus1) -}
664444f935d81c978d53ab60b1c3370d
  $tcLocus1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Locus"#) -}
642bf77317dee8a4f5794572816feaa4
  $tcTfbs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13703008061098861417##
                   3233318630049127763##
                   Types.$trModule
                   Types.$tcTfbs1) -}
d8956744491be603d278f71e1303c4e5
  $tcTfbs1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Tfbs"#) -}
e408f3605bd8d5bcddab6653d4b1fcf1
  $tcThres :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1528972350689239198##
                   1635253706858371068##
                   Types.$trModule
                   Types.$tcThres1) -}
bed6fc6f4a2db8fe074aefb68e6b1304
  $tcThres1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Thres"#) -}
def0b47cc48a5ababf4d1fb17d01986a
  $tcWeight :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1193334855607177316##
                   13983795906427708103##
                   Types.$trModule
                   Types.$tcWeight1) -}
88cb191977016ecb89b8438db5460d96
  $tcWeight1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Weight"#) -}
a7559c45711c01842400d7612b209d25
  $tcWorld :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9879139076327926283##
                   11239031668398555297##
                   Types.$trModule
                   Types.$tcWorld1) -}
93932d4d3378740d0146c61bfdd90fe6
  $tcWorld1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "World"#) -}
35c88edb363263f3f8c83c52076d2a12
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Types.$trModule2 Types.$trModule1) -}
3ae389ecafc2ae75050db498894b3a05
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Types"#) -}
b1c6cd842b0f836bf5d915d56f61253a
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF"#) -}
4a1b4c95a5d97af338afd898324366ea
  $w$c/= ::
    Types.ID
    -> Types.Weight -> Types.ID -> Types.Weight -> GHC.Types.Bool
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Types.ID)
                   (ww1 :: Types.Weight)
                   (ww2 :: Types.ID)
                   (ww3 :: Types.Weight) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types./=} True True} {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.==} True False} case {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.==} False True} Types.$fEqID2
                                                                                                                                                                                                                                                     ww
                                                                                                                                                                                                                                                       `cast`
                                                                                                                                                                                                                                                     (Types.N:ID[0])
                                                                                                                                                                                                                                                     ww2
                                                                                                                                                                                                                                                       `cast`
                                                                                                                                                                                                                                                     (Types.N:ID[0]) of wild {
                                                                                                                                                                      GHC.Types.False
                                                                                                                                                                      -> GHC.Types.True
                                                                                                                                                                      GHC.Types.True
                                                                                                                                                                      -> case {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.==} False True} Types.$fEqLocus1
                                                                                                                                                                                                                                                          ww1
                                                                                                                                                                                                                                                            `cast`
                                                                                                                                                                                                                                                          (Types.N:Weight[0])
                                                                                                                                                                                                                                                          ww3
                                                                                                                                                                                                                                                            `cast`
                                                                                                                                                                                                                                                          (Types.N:Weight[0]) of wild1 {
                                                                                                                                                                           GHC.Types.False
                                                                                                                                                                           -> GHC.Types.True
                                                                                                                                                                           GHC.Types.True
                                                                                                                                                                           -> GHC.Types.False } }) -}
f70fb81a0f616e5a487ff8e3f83347a5
  $w$c< ::
    Types.ID
    -> Types.Weight -> Types.ID -> Types.Weight -> GHC.Types.Bool
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Types.ID)
                   (ww1 :: Types.Weight)
                   (ww2 :: Types.ID)
                   (ww3 :: Types.Weight) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.<} True True} case Types.$fOrdID7
                                                                                                ww
                                                                                                  `cast`
                                                                                                (Types.N:ID[0])
                                                                                                ww2
                                                                                                  `cast`
                                                                                                (Types.N:ID[0]) of wild {
                                                                                           GHC.Types.LT
                                                                                           -> GHC.Types.True
                                                                                           GHC.Types.EQ
                                                                                           -> Types.$fOrdWeight6
                                                                                                ww1
                                                                                                  `cast`
                                                                                                (Types.N:Weight[0])
                                                                                                ww3
                                                                                                  `cast`
                                                                                                (Types.N:Weight[0])
                                                                                           GHC.Types.GT
                                                                                           -> GHC.Types.False }) -}
0bf872d0f809d60826b3cf8db17a96e6
  $w$c<= ::
    Types.ID
    -> Types.Weight -> Types.ID -> Types.Weight -> GHC.Types.Bool
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Types.ID)
                   (ww1 :: Types.Weight)
                   (ww2 :: Types.ID)
                   (ww3 :: Types.Weight) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.<=} True True} case Types.$fOrdID7
                                                                                                 ww
                                                                                                   `cast`
                                                                                                 (Types.N:ID[0])
                                                                                                 ww2
                                                                                                   `cast`
                                                                                                 (Types.N:ID[0]) of wild {
                                                                                            GHC.Types.LT
                                                                                            -> GHC.Types.True
                                                                                            GHC.Types.EQ
                                                                                            -> Types.$fOrdWeight5
                                                                                                 ww1
                                                                                                   `cast`
                                                                                                 (Types.N:Weight[0])
                                                                                                 ww3
                                                                                                   `cast`
                                                                                                 (Types.N:Weight[0])
                                                                                            GHC.Types.GT
                                                                                            -> GHC.Types.False }) -}
f1eb15c949964db0102cba86f0cdde9a
  $w$c== ::
    Types.ID
    -> Types.Weight -> Types.ID -> Types.Weight -> GHC.Types.Bool
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Types.ID)
                   (ww1 :: Types.Weight)
                   (ww2 :: Types.ID)
                   (ww3 :: Types.Weight) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.==} True True} case Types.$fEqID2
                                                                                                 ww
                                                                                                   `cast`
                                                                                                 (Types.N:ID[0])
                                                                                                 ww2
                                                                                                   `cast`
                                                                                                 (Types.N:ID[0]) of wild {
                                                                                            GHC.Types.False
                                                                                            -> GHC.Types.False
                                                                                            GHC.Types.True
                                                                                            -> Types.$fEqLocus1
                                                                                                 ww1
                                                                                                   `cast`
                                                                                                 (Types.N:Weight[0])
                                                                                                 ww3
                                                                                                   `cast`
                                                                                                 (Types.N:Weight[0]) }) -}
f66883adc6e120b6b07d044df3f20f3f
  $w$c==1 ::
    Types.ID
    -> Types.Thres
    -> Types.GeneState
    -> Types.ID
    -> Types.Thres
    -> Types.GeneState
    -> GHC.Types.Bool
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Types.ID)
                   (ww1 :: Types.Thres)
                   (ww2 :: Types.GeneState)
                   (ww3 :: Types.ID)
                   (ww4 :: Types.Thres)
                   (ww5 :: Types.GeneState) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.==} True True} case Types.$fEqID2
                                                                                                 ww
                                                                                                   `cast`
                                                                                                 (Types.N:ID[0])
                                                                                                 ww3
                                                                                                   `cast`
                                                                                                 (Types.N:ID[0]) of wild {
                                                                                            GHC.Types.False
                                                                                            -> GHC.Types.False
                                                                                            GHC.Types.True
                                                                                            -> case Types.$fEqLocus2
                                                                                                      ww1
                                                                                                        `cast`
                                                                                                      (Types.N:Thres[0])
                                                                                                      ww4
                                                                                                        `cast`
                                                                                                      (Types.N:Thres[0]) of wild1 {
                                                                                                 GHC.Types.False
                                                                                                 -> GHC.Types.False
                                                                                                 GHC.Types.True
                                                                                                 -> Types.$fEqGeneState2
                                                                                                      ww2
                                                                                                        `cast`
                                                                                                      (Types.N:GeneState[0])
                                                                                                      ww5
                                                                                                        `cast`
                                                                                                      (Types.N:GeneState[0]) } }) -}
fab24a37f31aa49f2c30843bdb1f2ad0
  $w$c==2 ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# Types.Agent
    -> Types.Env
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# Types.Agent
    -> Types.Env
    -> GHC.Types.Bool
  {- Arity: 14,
     Strictness: <L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><S,1*U><L,U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U><L,U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Types.Int)
                   (ww3 :: GHC.Types.Int)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: GHC.Prim.Array# Types.Agent)
                   (ww6 :: Types.Env)
                   (ww7 :: GHC.Types.Int)
                   (ww8 :: GHC.Types.Int)
                   (ww9 :: GHC.Types.Int)
                   (ww10 :: GHC.Types.Int)
                   (ww11 :: GHC.Prim.Int#)
                   (ww12 :: GHC.Prim.Array# Types.Agent)
                   (ww13 :: Types.Env) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.==} True True} case ww4 of wild {
                                                                                            DEFAULT
                                                                                            -> case ww of wild1 { GHC.Types.I# x ->
                                                                                               case ww7 of wild2 { GHC.Types.I# y ->
                                                                                               case GHC.Prim.tagToEnum#
                                                                                                      @ GHC.Types.Bool
                                                                                                      (GHC.Prim.==#
                                                                                                         x
                                                                                                         y) of wild3 {
                                                                                                 GHC.Types.False
                                                                                                 -> GHC.Types.False
                                                                                                 GHC.Types.True
                                                                                                 -> case ww1 of wild4 { GHC.Types.I# x1 ->
                                                                                                    case ww8 of wild5 { GHC.Types.I# y1 ->
                                                                                                    case GHC.Prim.tagToEnum#
                                                                                                           @ GHC.Types.Bool
                                                                                                           (GHC.Prim.==#
                                                                                                              x1
                                                                                                              y1) of wild6 {
                                                                                                      GHC.Types.False
                                                                                                      -> GHC.Types.False
                                                                                                      GHC.Types.True
                                                                                                      -> case ww2 of wild7 { GHC.Types.I# x2 ->
                                                                                                         case ww9 of wild8 { GHC.Types.I# y2 ->
                                                                                                         case GHC.Prim.tagToEnum#
                                                                                                                @ GHC.Types.Bool
                                                                                                                (GHC.Prim.==#
                                                                                                                   x2
                                                                                                                   y2) of wild9 {
                                                                                                           GHC.Types.False
                                                                                                           -> GHC.Types.False
                                                                                                           GHC.Types.True
                                                                                                           -> case ww3 of wild10 { GHC.Types.I# x3 ->
                                                                                                              case ww10 of wild11 { GHC.Types.I# y3 ->
                                                                                                              case GHC.Prim.tagToEnum#
                                                                                                                     @ GHC.Types.Bool
                                                                                                                     (GHC.Prim.==#
                                                                                                                        x3
                                                                                                                        y3) of wild12 {
                                                                                                                GHC.Types.False
                                                                                                                -> GHC.Types.False
                                                                                                                GHC.Types.True
                                                                                                                -> let {
                                                                                                                     y4 :: GHC.Prim.Int#
                                                                                                                     = GHC.Prim.-#
                                                                                                                         wild
                                                                                                                         1#
                                                                                                                   } in
                                                                                                                   case GHC.Prim.tagToEnum#
                                                                                                                          @ GHC.Types.Bool
                                                                                                                          (GHC.Prim.>#
                                                                                                                             0#
                                                                                                                             y4) of wild13 {
                                                                                                                     GHC.Types.False
                                                                                                                     -> letrec {
                                                                                                                          go :: GHC.Prim.Int#
                                                                                                                                -> GHC.Types.Bool
                                                                                                                            {- Arity: 1,
                                                                                                                               Strictness: <S,U> -}
                                                                                                                          = \ (x4 :: GHC.Prim.Int#) ->
                                                                                                                            {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.==} True False} case GHC.Prim.indexArray#
                                                                                                                                                                                                             @ Types.Agent
                                                                                                                                                                                                             ww5
                                                                                                                                                                                                             x4 of ds4 { Unit# ipv ->
                                                                                                                                                                                                      case ipv of wild14 {
                                                                                                                                                                                                        Types.Agent a1 a2
                                                                                                                                                                                                        -> case GHC.Prim.indexArray#
                                                                                                                                                                                                                  @ Types.Agent
                                                                                                                                                                                                                  ww12
                                                                                                                                                                                                                  x4 of ds1 { Unit# ipv1 ->
                                                                                                                                                                                                           case ipv1 of wild15 {
                                                                                                                                                                                                             Types.Agent b1 b2
                                                                                                                                                                                                             -> case {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.==} False True} GHC.Classes.$fEq[]_$c==
                                                                                                                                                                                                                                                                                                 @ [Types.Locus]
                                                                                                                                                                                                                                                                                                 Types.$fEqAgent_$s$fEq[]
                                                                                                                                                                                                                                                                                                 a1
                                                                                                                                                                                                                                                                                                 b1 of wild16 {
                                                                                                                                                                                                                  GHC.Types.False
                                                                                                                                                                                                                  -> GHC.Types.False
                                                                                                                                                                                                                  GHC.Types.True
                                                                                                                                                                                                                  -> case {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.==} False True} Types.$fEqWorld1
                                                                                                                                                                                                                                                                                                      a2
                                                                                                                                                                                                                                                                                                      b2 of wild17 {
                                                                                                                                                                                                                       GHC.Types.False
                                                                                                                                                                                                                       -> GHC.Types.False
                                                                                                                                                                                                                       GHC.Types.True
                                                                                                                                                                                                                       -> case GHC.Prim.tagToEnum#
                                                                                                                                                                                                                                 @ GHC.Types.Bool
                                                                                                                                                                                                                                 (GHC.Prim.==#
                                                                                                                                                                                                                                    x4
                                                                                                                                                                                                                                    y4) of wild18 {
                                                                                                                                                                                                                            GHC.Types.False
                                                                                                                                                                                                                            -> go
                                                                                                                                                                                                                                 (GHC.Prim.+#
                                                                                                                                                                                                                                    x4
                                                                                                                                                                                                                                    1#)
                                                                                                                                                                                                                            GHC.Types.True
                                                                                                                                                                                                                            -> GHC.Types.True } } }
                                                                                                                                                                                                             Types.NoAgent
                                                                                                                                                                                                             -> GHC.Types.False } }
                                                                                                                                                                                                        Types.NoAgent
                                                                                                                                                                                                        -> case GHC.Prim.indexArray#
                                                                                                                                                                                                                  @ Types.Agent
                                                                                                                                                                                                                  ww12
                                                                                                                                                                                                                  x4 of ds1 { Unit# ipv1 ->
                                                                                                                                                                                                           case ipv1 of wild15 {
                                                                                                                                                                                                             Types.Agent ipv2 ipv3
                                                                                                                                                                                                             -> GHC.Types.False
                                                                                                                                                                                                             Types.NoAgent
                                                                                                                                                                                                             -> case GHC.Prim.tagToEnum#
                                                                                                                                                                                                                       @ GHC.Types.Bool
                                                                                                                                                                                                                       (GHC.Prim.==#
                                                                                                                                                                                                                          x4
                                                                                                                                                                                                                          y4) of wild16 {
                                                                                                                                                                                                                  GHC.Types.False
                                                                                                                                                                                                                  -> go
                                                                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                                                                          x4
                                                                                                                                                                                                                          1#)
                                                                                                                                                                                                                  GHC.Types.True
                                                                                                                                                                                                                  -> GHC.Types.True } } } } }
                                                                                                                        } in
                                                                                                                        case go
                                                                                                                               0# of wild14 {
                                                                                                                          GHC.Types.False
                                                                                                                          -> GHC.Types.False
                                                                                                                          GHC.Types.True
                                                                                                                          -> GHC.Classes.eqInt
                                                                                                                               ww6
                                                                                                                               ww13 }
                                                                                                                     GHC.Types.True
                                                                                                                     -> GHC.Classes.eqInt
                                                                                                                          ww6
                                                                                                                          ww13 } } } } } } } } } } } } }
                                                                                            0#
                                                                                            -> case ww11 of wild1 {
                                                                                                 DEFAULT
                                                                                                 -> GHC.Types.False
                                                                                                 0#
                                                                                                 -> GHC.Classes.eqInt
                                                                                                      ww6
                                                                                                      ww13 } }) -}
4f81ef6e2925bc87a3f543b8d34acc59
  $w$c> ::
    Types.ID
    -> Types.Weight -> Types.ID -> Types.Weight -> GHC.Types.Bool
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Types.ID)
                   (ww1 :: Types.Weight)
                   (ww2 :: Types.ID)
                   (ww3 :: Types.Weight) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.>} True True} case Types.$fOrdID7
                                                                                                ww
                                                                                                  `cast`
                                                                                                (Types.N:ID[0])
                                                                                                ww2
                                                                                                  `cast`
                                                                                                (Types.N:ID[0]) of wild {
                                                                                           GHC.Types.LT
                                                                                           -> GHC.Types.False
                                                                                           GHC.Types.EQ
                                                                                           -> Types.$fOrdWeight4
                                                                                                ww1
                                                                                                  `cast`
                                                                                                (Types.N:Weight[0])
                                                                                                ww3
                                                                                                  `cast`
                                                                                                (Types.N:Weight[0])
                                                                                           GHC.Types.GT
                                                                                           -> GHC.Types.True }) -}
4a47d9bd581d1040f7ea188346423102
  $w$c>= ::
    Types.ID
    -> Types.Weight -> Types.ID -> Types.Weight -> GHC.Types.Bool
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Types.ID)
                   (ww1 :: Types.Weight)
                   (ww2 :: Types.ID)
                   (ww3 :: Types.Weight) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.>=} True True} case Types.$fOrdID7
                                                                                                 ww
                                                                                                   `cast`
                                                                                                 (Types.N:ID[0])
                                                                                                 ww2
                                                                                                   `cast`
                                                                                                 (Types.N:ID[0]) of wild {
                                                                                            GHC.Types.LT
                                                                                            -> GHC.Types.False
                                                                                            GHC.Types.EQ
                                                                                            -> Types.$fOrdWeight3
                                                                                                 ww1
                                                                                                   `cast`
                                                                                                 (Types.N:Weight[0])
                                                                                                 ww3
                                                                                                   `cast`
                                                                                                 (Types.N:Weight[0])
                                                                                            GHC.Types.GT
                                                                                            -> GHC.Types.True }) -}
4b9836f035786ee88cad045d62b89fc4
  $w$ccompare ::
    Types.ID
    -> Types.Thres
    -> Types.GeneState
    -> Types.ID
    -> Types.Thres
    -> Types.GeneState
    -> GHC.Types.Ordering
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Types.ID)
                   (ww1 :: Types.Thres)
                   (ww2 :: Types.GeneState)
                   (ww3 :: Types.ID)
                   (ww4 :: Types.Thres)
                   (ww5 :: Types.GeneState) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.compare} True True} case Types.$fEqID2
                                                                                                      ww
                                                                                                        `cast`
                                                                                                      (Types.N:ID[0])
                                                                                                      ww3
                                                                                                        `cast`
                                                                                                      (Types.N:ID[0]) of wild {
                                                                                                 GHC.Types.False
                                                                                                 -> Types.$fOrdID7
                                                                                                      ww
                                                                                                        `cast`
                                                                                                      (Types.N:ID[0])
                                                                                                      ww3
                                                                                                        `cast`
                                                                                                      (Types.N:ID[0])
                                                                                                 GHC.Types.True
                                                                                                 -> case Types.$fEqGeneState2
                                                                                                           ww2
                                                                                                             `cast`
                                                                                                           (Types.N:GeneState[0])
                                                                                                           ww5
                                                                                                             `cast`
                                                                                                           (Types.N:GeneState[0]) of wild1 {
                                                                                                      GHC.Types.False
                                                                                                      -> Types.$fOrdGeneState7
                                                                                                           ww5
                                                                                                             `cast`
                                                                                                           (Types.N:GeneState[0])
                                                                                                           ww2
                                                                                                             `cast`
                                                                                                           (Types.N:GeneState[0])
                                                                                                      GHC.Types.True
                                                                                                      -> Types.$fOrdThres7
                                                                                                           ww1
                                                                                                             `cast`
                                                                                                           (Types.N:Thres[0])
                                                                                                           ww4
                                                                                                             `cast`
                                                                                                           (Types.N:Thres[0]) } }) -}
f23c5696d9feb9fda42ef8e7dbb1268b
  $w$ccompare1 ::
    Types.ID
    -> Types.Weight -> Types.ID -> Types.Weight -> GHC.Types.Ordering
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Types.ID)
                   (ww1 :: Types.Weight)
                   (ww2 :: Types.ID)
                   (ww3 :: Types.Weight) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.compare} True True} case Types.$fOrdID7
                                                                                                      ww
                                                                                                        `cast`
                                                                                                      (Types.N:ID[0])
                                                                                                      ww2
                                                                                                        `cast`
                                                                                                      (Types.N:ID[0]) of wild {
                                                                                                 GHC.Types.LT
                                                                                                 -> GHC.Types.LT
                                                                                                 GHC.Types.EQ
                                                                                                 -> Types.$fOrdWeight7
                                                                                                      ww1
                                                                                                        `cast`
                                                                                                      (Types.N:Weight[0])
                                                                                                      ww3
                                                                                                        `cast`
                                                                                                      (Types.N:Weight[0])
                                                                                                 GHC.Types.GT
                                                                                                 -> GHC.Types.GT }) -}
a072f6d238ac5e449aeaa2a33683da36
  $w$creadPrec ::
    GHC.Prim.Int# -> Text.ParserCombinators.ReadP.ReadP Types.Gene
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readPrec} False True} case GHC.Prim.tagToEnum#
                                                                                                        @ GHC.Types.Bool
                                                                                                        (GHC.Prim.<=#
                                                                                                           ww
                                                                                                           11#) of wild2 {
                                                                                                   GHC.Types.False
                                                                                                   -> (Text.ParserCombinators.ReadP.pfail1
                                                                                                         @ Types.Gene)
                                                                                                        `cast`
                                                                                                      (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                <Types.Gene>_R))
                                                                                                   GHC.Types.True
                                                                                                   -> Types.$fReadGene4
                                                                                                        `cast`
                                                                                                      (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                <Types.Gene>_R)) }) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $w$creadPrec1 ::
    GHC.Prim.Int# -> Text.ParserCombinators.ReadP.ReadP Types.GeneState
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readPrec} False True} case GHC.Prim.tagToEnum#
                                                                                                        @ GHC.Types.Bool
                                                                                                        (GHC.Prim.<=#
                                                                                                           ww
                                                                                                           10#) of wild2 {
                                                                                                   GHC.Types.False
                                                                                                   -> (Text.ParserCombinators.ReadP.pfail1
                                                                                                         @ Types.GeneState)
                                                                                                        `cast`
                                                                                                      (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                <Types.GeneState>_R))
                                                                                                   GHC.Types.True
                                                                                                   -> Types.$fReadGeneState4
                                                                                                        `cast`
                                                                                                      (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                <Types.GeneState>_R)) }) -}
11cf07ccdff9acbf576dc2c8351e445c
  $w$creadPrec2 ::
    GHC.Prim.Int# -> Text.ParserCombinators.ReadP.ReadP Types.ID
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readPrec} False True} case GHC.Prim.tagToEnum#
                                                                                                        @ GHC.Types.Bool
                                                                                                        (GHC.Prim.<=#
                                                                                                           ww
                                                                                                           10#) of wild2 {
                                                                                                   GHC.Types.False
                                                                                                   -> (Text.ParserCombinators.ReadP.pfail1
                                                                                                         @ Types.ID)
                                                                                                        `cast`
                                                                                                      (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                <Types.ID>_R))
                                                                                                   GHC.Types.True
                                                                                                   -> Types.$fReadID4
                                                                                                        `cast`
                                                                                                      (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                <Types.ID>_R)) }) -}
1dea3bc58315922227e05d4377f1eea5
  $w$creadPrec3 ::
    GHC.Prim.Int# -> Text.ParserCombinators.ReadP.ReadP Types.Tfbs
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readPrec} False True} case GHC.Prim.tagToEnum#
                                                                                                        @ GHC.Types.Bool
                                                                                                        (GHC.Prim.<=#
                                                                                                           ww
                                                                                                           11#) of wild2 {
                                                                                                   GHC.Types.False
                                                                                                   -> (Text.ParserCombinators.ReadP.pfail1
                                                                                                         @ Types.Tfbs)
                                                                                                        `cast`
                                                                                                      (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                <Types.Tfbs>_R))
                                                                                                   GHC.Types.True
                                                                                                   -> Types.$fReadTfbs4
                                                                                                        `cast`
                                                                                                      (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                <Types.Tfbs>_R)) }) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $w$creadPrec4 ::
    GHC.Prim.Int# -> Text.ParserCombinators.ReadP.ReadP Types.Thres
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readPrec} False True} case GHC.Prim.tagToEnum#
                                                                                                        @ GHC.Types.Bool
                                                                                                        (GHC.Prim.<=#
                                                                                                           ww
                                                                                                           10#) of wild2 {
                                                                                                   GHC.Types.False
                                                                                                   -> (Text.ParserCombinators.ReadP.pfail1
                                                                                                         @ Types.Thres)
                                                                                                        `cast`
                                                                                                      (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                <Types.Thres>_R))
                                                                                                   GHC.Types.True
                                                                                                   -> Types.$fReadThres4
                                                                                                        `cast`
                                                                                                      (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                <Types.Thres>_R)) }) -}
62e198601be4cac9703a7878d90fa463
  $w$creadPrec5 ::
    GHC.Prim.Int# -> Text.ParserCombinators.ReadP.ReadP Types.Weight
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readPrec} False True} case GHC.Prim.tagToEnum#
                                                                                                        @ GHC.Types.Bool
                                                                                                        (GHC.Prim.<=#
                                                                                                           ww
                                                                                                           10#) of wild2 {
                                                                                                   GHC.Types.False
                                                                                                   -> (Text.ParserCombinators.ReadP.pfail1
                                                                                                         @ Types.Weight)
                                                                                                        `cast`
                                                                                                      (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                <Types.Weight>_R))
                                                                                                   GHC.Types.True
                                                                                                   -> Types.$fReadWeight4
                                                                                                        `cast`
                                                                                                      (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                <Types.Weight>_R)) }) -}
b7eab4f08821948fcc71d5d84aed42c0
  $w$creadPrec6 ::
    GHC.Prim.Int# -> Text.ParserCombinators.ReadP.ReadP Types.World
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.readPrec} False True} case GHC.Prim.tagToEnum#
                                                                                                        @ GHC.Types.Bool
                                                                                                        (GHC.Prim.<=#
                                                                                                           ww
                                                                                                           11#) of wild2 {
                                                                                                   GHC.Types.False
                                                                                                   -> (Text.ParserCombinators.ReadP.pfail1
                                                                                                         @ Types.World)
                                                                                                        `cast`
                                                                                                      (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                <Types.World>_R))
                                                                                                   GHC.Types.True
                                                                                                   -> Types.$fReadWorld4
                                                                                                        `cast`
                                                                                                      (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                                                                <Types.World>_R)) }) -}
f0e26fc455d34f9411996f4e97e84c88
  $w$cshowsPrec ::
    GHC.Prim.Int# -> Types.ID -> Types.Weight -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,U(U)><L,U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Types.ID)
                   (ww2 :: Types.Weight) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} True True} let {
                                                                                                   f :: GHC.Base.String
                                                                                                        -> GHC.Base.String
                                                                                                   = Types.$w$cshowsPrec2
                                                                                                       0#
                                                                                                       ww1
                                                                                                 } in
                                                                                                 let {
                                                                                                   f1 :: GHC.Base.String
                                                                                                         -> GHC.Base.String
                                                                                                   = Types.$w$cshowsPrec1
                                                                                                       0#
                                                                                                       ww2
                                                                                                 } in
                                                                                                 let {
                                                                                                   p :: GHC.Show.ShowS
                                                                                                     {- Arity: 1,
                                                                                                        Strictness: <L,1*U> -}
                                                                                                   = \ (x :: GHC.Base.String) ->
                                                                                                     GHC.Base.++
                                                                                                       @ GHC.Types.Char
                                                                                                       Types.$fShowAgent14
                                                                                                       (GHC.Base.++
                                                                                                          @ GHC.Types.Char
                                                                                                          Types.$fShowAgent13
                                                                                                          (f (GHC.Base.++
                                                                                                                @ GHC.Types.Char
                                                                                                                Types.$fShowAgent12
                                                                                                                (GHC.Base.++
                                                                                                                   @ GHC.Types.Char
                                                                                                                   Types.$fShowAgent11
                                                                                                                   (f1
                                                                                                                      (GHC.Base.++
                                                                                                                         @ GHC.Types.Char
                                                                                                                         Types.$fShowAgent10
                                                                                                                         x))))))
                                                                                                 } in
                                                                                                 case GHC.Prim.tagToEnum#
                                                                                                        @ GHC.Types.Bool
                                                                                                        (GHC.Prim.>=#
                                                                                                           ww
                                                                                                           11#) of wild {
                                                                                                   GHC.Types.False
                                                                                                   -> p
                                                                                                   GHC.Types.True
                                                                                                   -> \ (x :: GHC.Base.String) ->
                                                                                                      GHC.Types.:
                                                                                                        @ GHC.Types.Char
                                                                                                        GHC.Show.shows7
                                                                                                        (p (GHC.Types.:
                                                                                                              @ GHC.Types.Char
                                                                                                              GHC.Show.shows4
                                                                                                              x)) }) -}
62e198601be4cac9703a7878d90fa463
  $w$cshowsPrec1 :: GHC.Prim.Int# -> Types.Weight -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><L,U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: Types.Weight) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} True True} case GHC.Prim.tagToEnum#
                                                                                                        @ GHC.Types.Bool
                                                                                                        (GHC.Prim.>=#
                                                                                                           ww
                                                                                                           11#) of wild {
                                                                                                   GHC.Types.False
                                                                                                   -> \ (x :: GHC.Base.String) ->
                                                                                                      GHC.Base.++
                                                                                                        @ GHC.Types.Char
                                                                                                        Types.$fShowAgent15
                                                                                                        (case w `cast`
                                                                                                              (Types.N:Weight[0]) of ww2 { GHC.Types.I# ww3 ->
                                                                                                         case GHC.Show.$wshowSignedInt
                                                                                                                11#
                                                                                                                ww3
                                                                                                                x of ww4 { (#,#) ww5 ww6 ->
                                                                                                         GHC.Types.:
                                                                                                           @ GHC.Types.Char
                                                                                                           ww5
                                                                                                           ww6 } })
                                                                                                   GHC.Types.True
                                                                                                   -> \ (x :: GHC.Base.String) ->
                                                                                                      GHC.Types.:
                                                                                                        @ GHC.Types.Char
                                                                                                        GHC.Show.shows7
                                                                                                        (GHC.Base.++
                                                                                                           @ GHC.Types.Char
                                                                                                           Types.$fShowAgent15
                                                                                                           (case w `cast`
                                                                                                                 (Types.N:Weight[0]) of ww2 { GHC.Types.I# ww3 ->
                                                                                                            case GHC.Show.$wshowSignedInt
                                                                                                                   11#
                                                                                                                   ww3
                                                                                                                   (GHC.Types.:
                                                                                                                      @ GHC.Types.Char
                                                                                                                      GHC.Show.shows4
                                                                                                                      x) of ww4 { (#,#) ww5 ww6 ->
                                                                                                            GHC.Types.:
                                                                                                              @ GHC.Types.Char
                                                                                                              ww5
                                                                                                              ww6 } })) }) -}
11cf07ccdff9acbf576dc2c8351e445c
  $w$cshowsPrec2 :: GHC.Prim.Int# -> Types.ID -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><L,U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: Types.ID) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} True True} case GHC.Prim.tagToEnum#
                                                                                                        @ GHC.Types.Bool
                                                                                                        (GHC.Prim.>=#
                                                                                                           ww
                                                                                                           11#) of wild {
                                                                                                   GHC.Types.False
                                                                                                   -> \ (x :: GHC.Base.String) ->
                                                                                                      GHC.Base.++
                                                                                                        @ GHC.Types.Char
                                                                                                        Types.$fShowAgent16
                                                                                                        (case w `cast`
                                                                                                              (Types.N:ID[0]) of ww2 { GHC.Types.I# ww3 ->
                                                                                                         case GHC.Show.$wshowSignedInt
                                                                                                                11#
                                                                                                                ww3
                                                                                                                x of ww4 { (#,#) ww5 ww6 ->
                                                                                                         GHC.Types.:
                                                                                                           @ GHC.Types.Char
                                                                                                           ww5
                                                                                                           ww6 } })
                                                                                                   GHC.Types.True
                                                                                                   -> \ (x :: GHC.Base.String) ->
                                                                                                      GHC.Types.:
                                                                                                        @ GHC.Types.Char
                                                                                                        GHC.Show.shows7
                                                                                                        (GHC.Base.++
                                                                                                           @ GHC.Types.Char
                                                                                                           Types.$fShowAgent16
                                                                                                           (case w `cast`
                                                                                                                 (Types.N:ID[0]) of ww2 { GHC.Types.I# ww3 ->
                                                                                                            case GHC.Show.$wshowSignedInt
                                                                                                                   11#
                                                                                                                   ww3
                                                                                                                   (GHC.Types.:
                                                                                                                      @ GHC.Types.Char
                                                                                                                      GHC.Show.shows4
                                                                                                                      x) of ww4 { (#,#) ww5 ww6 ->
                                                                                                            GHC.Types.:
                                                                                                              @ GHC.Types.Char
                                                                                                              ww5
                                                                                                              ww6 } })) }) -}
3d4c2cd19c07e823bedd1333eaf6be8c
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> Types.ID -> Types.Thres -> Types.GeneState -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,U(U)><L,U(U)><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Types.ID)
                   (ww2 :: Types.Thres)
                   (ww3 :: Types.GeneState) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} True True} let {
                                                                                                   f :: GHC.Base.String
                                                                                                        -> GHC.Base.String
                                                                                                   = Types.$w$cshowsPrec2
                                                                                                       0#
                                                                                                       ww1
                                                                                                 } in
                                                                                                 let {
                                                                                                   f1 :: GHC.Base.String
                                                                                                         -> GHC.Base.String
                                                                                                   = Types.$w$cshowsPrec5
                                                                                                       0#
                                                                                                       ww2
                                                                                                 } in
                                                                                                 let {
                                                                                                   f2 :: GHC.Base.String
                                                                                                         -> GHC.Base.String
                                                                                                   = Types.$w$cshowsPrec4
                                                                                                       0#
                                                                                                       ww3
                                                                                                 } in
                                                                                                 let {
                                                                                                   p :: GHC.Show.ShowS
                                                                                                     {- Arity: 1,
                                                                                                        Strictness: <L,1*U> -}
                                                                                                   = \ (x :: GHC.Base.String) ->
                                                                                                     GHC.Base.++
                                                                                                       @ GHC.Types.Char
                                                                                                       Types.$fShowAgent23
                                                                                                       (GHC.Base.++
                                                                                                          @ GHC.Types.Char
                                                                                                          Types.$fShowAgent22
                                                                                                          (f (GHC.Base.++
                                                                                                                @ GHC.Types.Char
                                                                                                                Types.$fShowAgent21
                                                                                                                (GHC.Base.++
                                                                                                                   @ GHC.Types.Char
                                                                                                                   Types.$fShowAgent20
                                                                                                                   (f1
                                                                                                                      (GHC.Base.++
                                                                                                                         @ GHC.Types.Char
                                                                                                                         Types.$fShowAgent21
                                                                                                                         (GHC.Base.++
                                                                                                                            @ GHC.Types.Char
                                                                                                                            Types.$fShowAgent19
                                                                                                                            (f2
                                                                                                                               (GHC.Base.++
                                                                                                                                  @ GHC.Types.Char
                                                                                                                                  Types.$fShowAgent18
                                                                                                                                  x)))))))))
                                                                                                 } in
                                                                                                 case GHC.Prim.tagToEnum#
                                                                                                        @ GHC.Types.Bool
                                                                                                        (GHC.Prim.>=#
                                                                                                           ww
                                                                                                           11#) of wild {
                                                                                                   GHC.Types.False
                                                                                                   -> p
                                                                                                   GHC.Types.True
                                                                                                   -> \ (x :: GHC.Base.String) ->
                                                                                                      GHC.Types.:
                                                                                                        @ GHC.Types.Char
                                                                                                        GHC.Show.shows7
                                                                                                        (p (GHC.Types.:
                                                                                                              @ GHC.Types.Char
                                                                                                              GHC.Show.shows4
                                                                                                              x)) }) -}
af1dcb53c958f9cc4cee41e0cdd40f73
  $w$cshowsPrec4 ::
    GHC.Prim.Int# -> Types.GeneState -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: Types.GeneState) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} True True} let {
                                                                                                   p :: GHC.Show.ShowS
                                                                                                     {- Arity: 1,
                                                                                                        Strictness: <L,1*U> -}
                                                                                                   = \ (x :: GHC.Base.String) ->
                                                                                                     GHC.Base.++
                                                                                                       @ GHC.Types.Char
                                                                                                       Types.$fShowAgent24
                                                                                                       (case w `cast`
                                                                                                             (Types.N:GeneState[0]) of wild {
                                                                                                          GHC.Types.False
                                                                                                          -> GHC.Base.++
                                                                                                               @ GHC.Types.Char
                                                                                                               GHC.Show.shows18
                                                                                                               x
                                                                                                          GHC.Types.True
                                                                                                          -> GHC.Base.++
                                                                                                               @ GHC.Types.Char
                                                                                                               GHC.Show.shows17
                                                                                                               x })
                                                                                                 } in
                                                                                                 case GHC.Prim.tagToEnum#
                                                                                                        @ GHC.Types.Bool
                                                                                                        (GHC.Prim.>=#
                                                                                                           ww
                                                                                                           11#) of wild {
                                                                                                   GHC.Types.False
                                                                                                   -> p
                                                                                                   GHC.Types.True
                                                                                                   -> \ (x :: GHC.Base.String) ->
                                                                                                      GHC.Types.:
                                                                                                        @ GHC.Types.Char
                                                                                                        GHC.Show.shows7
                                                                                                        (p (GHC.Types.:
                                                                                                              @ GHC.Types.Char
                                                                                                              GHC.Show.shows4
                                                                                                              x)) }) -}
c3d818f4b4b9480567dfc64900f5b9f1
  $w$cshowsPrec5 :: GHC.Prim.Int# -> Types.Thres -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><L,U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: Types.Thres) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} True True} case GHC.Prim.tagToEnum#
                                                                                                        @ GHC.Types.Bool
                                                                                                        (GHC.Prim.>=#
                                                                                                           ww
                                                                                                           11#) of wild {
                                                                                                   GHC.Types.False
                                                                                                   -> \ (x :: GHC.Base.String) ->
                                                                                                      GHC.Base.++
                                                                                                        @ GHC.Types.Char
                                                                                                        Types.$fShowAgent25
                                                                                                        (case w `cast`
                                                                                                              (Types.N:Thres[0]) of ww2 { GHC.Types.I# ww3 ->
                                                                                                         case GHC.Show.$wshowSignedInt
                                                                                                                11#
                                                                                                                ww3
                                                                                                                x of ww4 { (#,#) ww5 ww6 ->
                                                                                                         GHC.Types.:
                                                                                                           @ GHC.Types.Char
                                                                                                           ww5
                                                                                                           ww6 } })
                                                                                                   GHC.Types.True
                                                                                                   -> \ (x :: GHC.Base.String) ->
                                                                                                      GHC.Types.:
                                                                                                        @ GHC.Types.Char
                                                                                                        GHC.Show.shows7
                                                                                                        (GHC.Base.++
                                                                                                           @ GHC.Types.Char
                                                                                                           Types.$fShowAgent25
                                                                                                           (case w `cast`
                                                                                                                 (Types.N:Thres[0]) of ww2 { GHC.Types.I# ww3 ->
                                                                                                            case GHC.Show.$wshowSignedInt
                                                                                                                   11#
                                                                                                                   ww3
                                                                                                                   (GHC.Types.:
                                                                                                                      @ GHC.Types.Char
                                                                                                                      GHC.Show.shows4
                                                                                                                      x) of ww4 { (#,#) ww5 ww6 ->
                                                                                                            GHC.Types.:
                                                                                                              @ GHC.Types.Char
                                                                                                              ww5
                                                                                                              ww6 } })) }) -}
871dbbbf04ac6f3136bfded7f211f411
  $w$cshowsPrec6 ::
    GHC.Prim.Int# -> Types.Agents -> Types.Env -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,U(U,U,U,U)><L,U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Types.Agents)
                   (ww2 :: Types.Env) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.showsPrec} True True} let {
                                                                                                   f :: GHC.Base.String
                                                                                                        -> GHC.Base.String
                                                                                                   = GHC.Arr.$w$cshowsPrec
                                                                                                       @ (GHC.Types.Int,
                                                                                                          GHC.Types.Int)
                                                                                                       @ Types.Agent
                                                                                                       GHC.Arr.$fIx(,)_$s$fIx(,)
                                                                                                       Types.$fShowWorld_$s$fShow(,)
                                                                                                       Types.$fShowAgent
                                                                                                       0#
                                                                                                       ww1
                                                                                                 } in
                                                                                                 let {
                                                                                                   g :: GHC.Base.String
                                                                                                        -> GHC.Base.String
                                                                                                     {- Arity: 1,
                                                                                                        Strictness: <L,1*U> -}
                                                                                                   = \ (x :: GHC.Base.String) ->
                                                                                                     GHC.Base.++
                                                                                                       @ GHC.Types.Char
                                                                                                       Types.$fShowWorld6
                                                                                                       (f (GHC.Base.++
                                                                                                             @ GHC.Types.Char
                                                                                                             Types.$fShowWorld5
                                                                                                             (GHC.Base.++
                                                                                                                @ GHC.Types.Char
                                                                                                                Types.$fShowWorld4
                                                                                                                (case ww2 of ww3 { GHC.Types.I# ww4 ->
                                                                                                                 case GHC.Show.$wshowSignedInt
                                                                                                                        0#
                                                                                                                        ww4
                                                                                                                        (GHC.Base.++
                                                                                                                           @ GHC.Types.Char
                                                                                                                           Types.$fShowWorld3
                                                                                                                           x) of ww5 { (#,#) ww6 ww7 ->
                                                                                                                 GHC.Types.:
                                                                                                                   @ GHC.Types.Char
                                                                                                                   ww6
                                                                                                                   ww7 } }))))
                                                                                                 } in
                                                                                                 case GHC.Prim.tagToEnum#
                                                                                                        @ GHC.Types.Bool
                                                                                                        (GHC.Prim.>=#
                                                                                                           ww
                                                                                                           11#) of wild {
                                                                                                   GHC.Types.False
                                                                                                   -> \ (x :: GHC.Base.String) ->
                                                                                                      GHC.Base.++
                                                                                                        @ GHC.Types.Char
                                                                                                        Types.$fShowWorld2
                                                                                                        (g x)
                                                                                                   GHC.Types.True
                                                                                                   -> \ (x :: GHC.Base.String) ->
                                                                                                      GHC.Types.:
                                                                                                        @ GHC.Types.Char
                                                                                                        GHC.Show.shows7
                                                                                                        (GHC.Base.++
                                                                                                           @ GHC.Types.Char
                                                                                                           Types.$fShowWorld2
                                                                                                           (g (GHC.Types.:
                                                                                                                 @ GHC.Types.Char
                                                                                                                 GHC.Show.shows4
                                                                                                                 x))) }) -}
38df965694c57ea8a99df285579eb778
  data Agent
    = Agent {genome :: Types.Genome,
             geneStateTable :: Types.GeneStateTable}
    | NoAgent
fa340cdbac56ae3df75a49de8a541ac9
  type Agents =
    GHC.Arr.Array (GHC.Types.Int, GHC.Types.Int) Types.Agent
b0226af39439d913341efe44e43bfe94
  type Chromosome = [Types.Locus]
3acf42e6b3ff031d4328eeca7f593f33
  type Env = GHC.Types.Int
a072f6d238ac5e449aeaa2a33683da36
  data Gene
    = Gene {geneID :: Types.ID,
            thres :: Types.Thres,
            genSt :: Types.GeneState}
af1dcb53c958f9cc4cee41e0cdd40f73
  newtype GeneState = GS GHC.Types.Bool
2391f3cee93211cf0ef5eca6d8dee743
  type GeneStateTable = Data.Map.Base.Map Types.ID Types.GeneState
b2674ec13353b81d4ec5e1754d7246f5
  class GeneType a where
    iD :: a -> Types.ID
    {-# MINIMAL iD #-}
e49f3db4c7cafe6d5cfe014af10e3dff
  type Genome = [Types.Chromosome]
11cf07ccdff9acbf576dc2c8351e445c
  newtype ID = ID GHC.Types.Int
3a1ffa0ff8e7c5056897e544d9829245
  data Locus = Transposon | CGene Types.Gene | CTfbs Types.Tfbs
1dea3bc58315922227e05d4377f1eea5
  data Tfbs = Tfbs {tfbsID :: Types.ID, wt :: Types.Weight}
c3d818f4b4b9480567dfc64900f5b9f1
  newtype Thres = Thres GHC.Types.Int
62e198601be4cac9703a7878d90fa463
  newtype Weight = Weight GHC.Types.Int
b7eab4f08821948fcc71d5d84aed42c0
  data World = World {agents :: Types.Agents, env :: Types.Env}
737811b46088e419167c5aa20bf62f1d
  agents :: Types.World -> Types.Agents
  RecSel Left Types.World
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U(U,U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.World) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.agents} True True} case ds of wild { Types.World ds1 ds2 ->
                                                                                              ds1 }) -}
523f944343938761ccf67db2b2eff0c1
  env :: Types.World -> Types.Env
  RecSel Left Types.World
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.World) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.env} True True} case ds of wild { Types.World ds1 ds2 ->
                                                                                           ds2 }) -}
008860dbd9f8294a9e68c703e5e0679d
  genSt :: Types.Gene -> Types.GeneState
  RecSel Left Types.Gene
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.Gene) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.genSt} True True} case ds of wild { Types.Gene ds1 ds2 ds3 ->
                                                                                             ds3 }) -}
b8a9374f60abecba353f07da9618d759
  geneID :: Types.Gene -> Types.ID
  RecSel Left Types.Gene
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.Gene) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.geneID} True True} case ds of wild { Types.Gene ds1 ds2 ds3 ->
                                                                                              ds1 }) -}
fce9fac92fe9c6acd283f4e7544a7e28
  geneStateTable :: Types.Agent -> Types.GeneStateTable
  RecSel Left Types.Agent
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.Agent) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.geneStateTable} True True} case ds of wild {
                                                                                                        Types.Agent ds1 ds2
                                                                                                        -> ds2
                                                                                                        Types.NoAgent
                                                                                                        -> Types.geneStateTable1 }) -}
a95c188aabb0816056432362b34cd0cc
  geneStateTable1 :: Types.GeneStateTable
  {- Strictness: x -}
13618b2dffb223e6f501df03ab5399f2
  genome :: Types.Agent -> Types.Genome
  RecSel Left Types.Agent
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.Agent) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.genome} True True} case ds of wild {
                                                                                                Types.Agent ds1 ds2
                                                                                                -> ds1
                                                                                                Types.NoAgent
                                                                                                -> Types.genome1 }) -}
e1fabb245059205f23a7ad622a6d7bc6
  genome1 :: Types.Genome
  {- Strictness: x -}
b23fe737816e323e47163fb015d906c1
  tfbsID :: Types.Tfbs -> Types.ID
  RecSel Left Types.Tfbs
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.Tfbs) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.tfbsID} True True} case ds of wild { Types.Tfbs ds1 ds2 ->
                                                                                              ds1 }) -}
133585b9a2ea60a549dabfc80d2fd662
  thres :: Types.Gene -> Types.Thres
  RecSel Left Types.Gene
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.Gene) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.thres} True True} case ds of wild { Types.Gene ds1 ds2 ds3 ->
                                                                                             ds2 }) -}
c2ba26f67ffa3deb53d7fe1003e5c662
  wt :: Types.Tfbs -> Types.Weight
  RecSel Left Types.Tfbs
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.Tfbs) ->
                 {__scc {Evolverbetert-0.1.0.0-oxgjcqyO3h9h1Y3DYcTQF:Types.wt} True True} case ds of wild { Types.Tfbs ds1 ds2 ->
                                                                                          ds2 }) -}
instance GHC.Enum.Bounded [Types.GeneState]
  = Types.$fBoundedGeneState
instance GHC.Enum.Bounded [Types.ID] = Types.$fBoundedID
instance GHC.Enum.Bounded [Types.Thres] = Types.$fBoundedThres
instance GHC.Enum.Bounded [Types.Weight] = Types.$fBoundedWeight
instance GHC.Enum.Enum [Types.GeneState] = Types.$fEnumGeneState
instance GHC.Enum.Enum [Types.ID] = Types.$fEnumID
instance GHC.Enum.Enum [Types.Thres] = Types.$fEnumThres
instance GHC.Enum.Enum [Types.Weight] = Types.$fEnumWeight
instance GHC.Classes.Eq [Types.Agent] = Types.$fEqAgent
instance GHC.Classes.Eq [Types.Gene] = Types.$fEqGene
instance GHC.Classes.Eq [Types.GeneState] = Types.$fEqGeneState
instance GHC.Classes.Eq [Types.ID] = Types.$fEqID
instance GHC.Classes.Eq [Types.Locus] = Types.$fEqLocus
instance GHC.Classes.Eq [Types.Tfbs] = Types.$fEqTfbs
instance GHC.Classes.Eq [Types.Thres] = Types.$fEqThres
instance GHC.Classes.Eq [Types.Weight] = Types.$fEqWeight
instance GHC.Classes.Eq [Types.World] = Types.$fEqWorld
instance Types.GeneType [Types.Gene] = Types.$fGeneTypeGene
instance Types.GeneType [Types.Tfbs] = Types.$fGeneTypeTfbs
instance GHC.Real.Integral [Types.ID] = Types.$fIntegralID
instance GHC.Real.Integral [Types.Thres] = Types.$fIntegralThres
instance GHC.Real.Integral [Types.Weight] = Types.$fIntegralWeight
instance GHC.Num.Num [Types.GeneState] = Types.$fNumGeneState
instance GHC.Num.Num [Types.ID] = Types.$fNumID
instance GHC.Num.Num [Types.Thres] = Types.$fNumThres
instance GHC.Num.Num [Types.Weight] = Types.$fNumWeight
instance GHC.Classes.Ord [Types.Agent] = Types.$fOrdAgent
instance GHC.Classes.Ord [Types.Gene] = Types.$fOrdGene
instance GHC.Classes.Ord [Types.GeneState] = Types.$fOrdGeneState
instance GHC.Classes.Ord [Types.ID] = Types.$fOrdID
instance GHC.Classes.Ord [Types.Locus] = Types.$fOrdLocus
instance GHC.Classes.Ord [Types.Tfbs] = Types.$fOrdTfbs
instance GHC.Classes.Ord [Types.Thres] = Types.$fOrdThres
instance GHC.Classes.Ord [Types.Weight] = Types.$fOrdWeight
instance GHC.Read.Read [Types.Agent] = Types.$fReadAgent
instance GHC.Read.Read [Types.Gene] = Types.$fReadGene
instance GHC.Read.Read [Types.GeneState] = Types.$fReadGeneState
instance GHC.Read.Read [Types.ID] = Types.$fReadID
instance GHC.Read.Read [Types.Locus] = Types.$fReadLocus
instance GHC.Read.Read [Types.Tfbs] = Types.$fReadTfbs
instance GHC.Read.Read [Types.Thres] = Types.$fReadThres
instance GHC.Read.Read [Types.Weight] = Types.$fReadWeight
instance GHC.Read.Read [Types.World] = Types.$fReadWorld
instance GHC.Real.Real [Types.GeneState] = Types.$fRealGeneState
instance GHC.Real.Real [Types.ID] = Types.$fRealID
instance GHC.Real.Real [Types.Thres] = Types.$fRealThres
instance GHC.Real.Real [Types.Weight] = Types.$fRealWeight
instance GHC.Show.Show [Types.Agent] = Types.$fShowAgent
instance GHC.Show.Show [Types.Gene] = Types.$fShowGene
instance GHC.Show.Show [Types.GeneState] = Types.$fShowGeneState
instance GHC.Show.Show [Types.ID] = Types.$fShowID
instance GHC.Show.Show [Types.Locus] = Types.$fShowLocus
instance GHC.Show.Show [Types.Tfbs] = Types.$fShowTfbs
instance GHC.Show.Show [Types.Thres] = Types.$fShowThres
instance GHC.Show.Show [Types.Weight] = Types.$fShowWeight
instance GHC.Show.Show [Types.World] = Types.$fShowWorld
"SPEC/Types $fEq[] @ Locus" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                       Types.Locus)
  GHC.Classes.$fEq[] @ Types.Locus $dEq = Types.$fEqAgent_$s$fEq[]
"SPEC/Types $fEq[]_$c/= @ Locus" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                            Types.Locus)
  GHC.Classes.$fEq[]_$c/= @ Types.Locus $dEq
  = Types.$fEqAgent_$s$fEq[]_$c/=
"SPEC/Types $fOrd[] @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                         Types.Locus)
  GHC.Classes.$fOrd[] @ Types.Locus $dOrd
  = Types.$fOrdAgent_$s$fOrd[]
"SPEC/Types $fOrd[]_$c< @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                             Types.Locus)
  GHC.Classes.$fOrd[]_$c< @ Types.Locus $dOrd
  = Types.$fOrdAgent_$s$fOrd[]_$c<
"SPEC/Types $fOrd[]_$c<= @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                              Types.Locus)
  GHC.Classes.$fOrd[]_$c<= @ Types.Locus $dOrd
  = Types.$fOrdAgent_$s$fOrd[]_$c<=
"SPEC/Types $fOrd[]_$c> @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                             Types.Locus)
  GHC.Classes.$fOrd[]_$c> @ Types.Locus $dOrd
  = Types.$fOrdAgent_$s$fOrd[]_$c>
"SPEC/Types $fOrd[]_$c>= @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                              Types.Locus)
  GHC.Classes.$fOrd[]_$c>= @ Types.Locus $dOrd
  = Types.$fOrdAgent_$s$fOrd[]_$c>=
"SPEC/Types $fOrd[]_$cmax @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                               Types.Locus)
  GHC.Classes.$fOrd[]_$cmax @ Types.Locus $dOrd
  = Types.$fOrdAgent_$s$fOrd[]_$cmax
"SPEC/Types $fOrd[]_$cmin @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                               Types.Locus)
  GHC.Classes.$fOrd[]_$cmin @ Types.Locus $dOrd
  = Types.$fOrdAgent_$s$fOrd[]_$cmin
"SPEC/Types $fOrd[]_$cp1Ord @ Locus" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                 Types.Locus)
  GHC.Classes.$fOrd[]_$cp1Ord @ Types.Locus $dOrd
  = Types.$fOrdAgent_$s$fOrd[]_$cp1Ord
"SPEC/Types $fRead(,) @ Int @ Int" [ALWAYS] forall ($dRead1 :: GHC.Read.Read
                                                                 GHC.Types.Int)
                                                   ($dRead :: GHC.Read.Read GHC.Types.Int)
  GHC.Read.$fRead(,) @ GHC.Types.Int @ GHC.Types.Int $dRead $dRead1
  = Types.$s$fRead(,)
"SPEC/Types $fRead(,)_$creadList @ Int @ Int" [ALWAYS] forall ($dRead1 :: GHC.Read.Read
                                                                            GHC.Types.Int)
                                                              ($dRead :: GHC.Read.Read
                                                                           GHC.Types.Int)
  GHC.Read.$fRead(,)_$creadList @ GHC.Types.Int
                                @ GHC.Types.Int
                                $dRead
                                $dRead1
  = Types.$s$fRead(,)_$s$fRead(,)_$creadList
"SPEC/Types $fRead(,)_$creadsPrec @ Int @ Int" [ALWAYS] forall ($dRead1 :: GHC.Read.Read
                                                                             GHC.Types.Int)
                                                               ($dRead :: GHC.Read.Read
                                                                            GHC.Types.Int)
  GHC.Read.$fRead(,)_$creadsPrec @ GHC.Types.Int
                                 @ GHC.Types.Int
                                 $dRead
                                 $dRead1
  = Types.$s$fRead(,)_$s$fRead(,)_$creadsPrec
"SPEC/Types $fShow(,) @ Int @ Int" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                 GHC.Types.Int)
                                                   ($dShow :: GHC.Show.Show GHC.Types.Int)
  GHC.Show.$fShow(,) @ GHC.Types.Int @ GHC.Types.Int $dShow $dShow1
  = Types.$fShowWorld_$s$fShow(,)
"SPEC/Types $fShow(,)_$cshow @ Int @ Int" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                        GHC.Types.Int)
                                                          ($dShow :: GHC.Show.Show GHC.Types.Int)
  GHC.Show.$fShow(,)_$cshow @ GHC.Types.Int
                            @ GHC.Types.Int
                            $dShow
                            $dShow1
  = Types.$fShowWorld_$s$fShow(,)_$cshow
"SPEC/Types $fShow(,)_$cshowList @ Int @ Int" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                            GHC.Types.Int)
                                                              ($dShow :: GHC.Show.Show
                                                                           GHC.Types.Int)
  GHC.Show.$fShow(,)_$cshowList @ GHC.Types.Int
                                @ GHC.Types.Int
                                $dShow
                                $dShow1
  = Types.$fShowWorld_$s$fShow(,)_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

